
Perifericos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065dc  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080067a4  080067a4  000167a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067cc  080067cc  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  080067cc  080067cc  000167cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067d4  080067d4  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067d4  080067d4  000167d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067d8  080067d8  000167d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080067dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  20000064  08006840  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08006840  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f416  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044aa  00000000  00000000  0003f4aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  00043958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b0  00000000  00000000  00044c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000276d9  00000000  00000000  00045cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001da67  00000000  00000000  0006d3b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2364  00000000  00000000  0008ae18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016d17c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a3c  00000000  00000000  0016d1d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000064 	.word	0x20000064
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800678c 	.word	0x0800678c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000068 	.word	0x20000068
 8000204:	0800678c 	.word	0x0800678c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f000 b96e 	b.w	8000d38 <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9d08      	ldr	r5, [sp, #32]
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	468c      	mov	ip, r1
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	f040 8083 	bne.w	8000b8a <__udivmoddi4+0x116>
 8000a84:	428a      	cmp	r2, r1
 8000a86:	4617      	mov	r7, r2
 8000a88:	d947      	bls.n	8000b1a <__udivmoddi4+0xa6>
 8000a8a:	fab2 f282 	clz	r2, r2
 8000a8e:	b142      	cbz	r2, 8000aa2 <__udivmoddi4+0x2e>
 8000a90:	f1c2 0020 	rsb	r0, r2, #32
 8000a94:	fa24 f000 	lsr.w	r0, r4, r0
 8000a98:	4091      	lsls	r1, r2
 8000a9a:	4097      	lsls	r7, r2
 8000a9c:	ea40 0c01 	orr.w	ip, r0, r1
 8000aa0:	4094      	lsls	r4, r2
 8000aa2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000aa6:	0c23      	lsrs	r3, r4, #16
 8000aa8:	fbbc f6f8 	udiv	r6, ip, r8
 8000aac:	fa1f fe87 	uxth.w	lr, r7
 8000ab0:	fb08 c116 	mls	r1, r8, r6, ip
 8000ab4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ab8:	fb06 f10e 	mul.w	r1, r6, lr
 8000abc:	4299      	cmp	r1, r3
 8000abe:	d909      	bls.n	8000ad4 <__udivmoddi4+0x60>
 8000ac0:	18fb      	adds	r3, r7, r3
 8000ac2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ac6:	f080 8119 	bcs.w	8000cfc <__udivmoddi4+0x288>
 8000aca:	4299      	cmp	r1, r3
 8000acc:	f240 8116 	bls.w	8000cfc <__udivmoddi4+0x288>
 8000ad0:	3e02      	subs	r6, #2
 8000ad2:	443b      	add	r3, r7
 8000ad4:	1a5b      	subs	r3, r3, r1
 8000ad6:	b2a4      	uxth	r4, r4
 8000ad8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000adc:	fb08 3310 	mls	r3, r8, r0, r3
 8000ae0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ae4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ae8:	45a6      	cmp	lr, r4
 8000aea:	d909      	bls.n	8000b00 <__udivmoddi4+0x8c>
 8000aec:	193c      	adds	r4, r7, r4
 8000aee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000af2:	f080 8105 	bcs.w	8000d00 <__udivmoddi4+0x28c>
 8000af6:	45a6      	cmp	lr, r4
 8000af8:	f240 8102 	bls.w	8000d00 <__udivmoddi4+0x28c>
 8000afc:	3802      	subs	r0, #2
 8000afe:	443c      	add	r4, r7
 8000b00:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b04:	eba4 040e 	sub.w	r4, r4, lr
 8000b08:	2600      	movs	r6, #0
 8000b0a:	b11d      	cbz	r5, 8000b14 <__udivmoddi4+0xa0>
 8000b0c:	40d4      	lsrs	r4, r2
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e9c5 4300 	strd	r4, r3, [r5]
 8000b14:	4631      	mov	r1, r6
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	b902      	cbnz	r2, 8000b1e <__udivmoddi4+0xaa>
 8000b1c:	deff      	udf	#255	; 0xff
 8000b1e:	fab2 f282 	clz	r2, r2
 8000b22:	2a00      	cmp	r2, #0
 8000b24:	d150      	bne.n	8000bc8 <__udivmoddi4+0x154>
 8000b26:	1bcb      	subs	r3, r1, r7
 8000b28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b2c:	fa1f f887 	uxth.w	r8, r7
 8000b30:	2601      	movs	r6, #1
 8000b32:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b36:	0c21      	lsrs	r1, r4, #16
 8000b38:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b40:	fb08 f30c 	mul.w	r3, r8, ip
 8000b44:	428b      	cmp	r3, r1
 8000b46:	d907      	bls.n	8000b58 <__udivmoddi4+0xe4>
 8000b48:	1879      	adds	r1, r7, r1
 8000b4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0xe2>
 8000b50:	428b      	cmp	r3, r1
 8000b52:	f200 80e9 	bhi.w	8000d28 <__udivmoddi4+0x2b4>
 8000b56:	4684      	mov	ip, r0
 8000b58:	1ac9      	subs	r1, r1, r3
 8000b5a:	b2a3      	uxth	r3, r4
 8000b5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b60:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b64:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b68:	fb08 f800 	mul.w	r8, r8, r0
 8000b6c:	45a0      	cmp	r8, r4
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0x10c>
 8000b70:	193c      	adds	r4, r7, r4
 8000b72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x10a>
 8000b78:	45a0      	cmp	r8, r4
 8000b7a:	f200 80d9 	bhi.w	8000d30 <__udivmoddi4+0x2bc>
 8000b7e:	4618      	mov	r0, r3
 8000b80:	eba4 0408 	sub.w	r4, r4, r8
 8000b84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b88:	e7bf      	b.n	8000b0a <__udivmoddi4+0x96>
 8000b8a:	428b      	cmp	r3, r1
 8000b8c:	d909      	bls.n	8000ba2 <__udivmoddi4+0x12e>
 8000b8e:	2d00      	cmp	r5, #0
 8000b90:	f000 80b1 	beq.w	8000cf6 <__udivmoddi4+0x282>
 8000b94:	2600      	movs	r6, #0
 8000b96:	e9c5 0100 	strd	r0, r1, [r5]
 8000b9a:	4630      	mov	r0, r6
 8000b9c:	4631      	mov	r1, r6
 8000b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba2:	fab3 f683 	clz	r6, r3
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	d14a      	bne.n	8000c40 <__udivmoddi4+0x1cc>
 8000baa:	428b      	cmp	r3, r1
 8000bac:	d302      	bcc.n	8000bb4 <__udivmoddi4+0x140>
 8000bae:	4282      	cmp	r2, r0
 8000bb0:	f200 80b8 	bhi.w	8000d24 <__udivmoddi4+0x2b0>
 8000bb4:	1a84      	subs	r4, r0, r2
 8000bb6:	eb61 0103 	sbc.w	r1, r1, r3
 8000bba:	2001      	movs	r0, #1
 8000bbc:	468c      	mov	ip, r1
 8000bbe:	2d00      	cmp	r5, #0
 8000bc0:	d0a8      	beq.n	8000b14 <__udivmoddi4+0xa0>
 8000bc2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bc6:	e7a5      	b.n	8000b14 <__udivmoddi4+0xa0>
 8000bc8:	f1c2 0320 	rsb	r3, r2, #32
 8000bcc:	fa20 f603 	lsr.w	r6, r0, r3
 8000bd0:	4097      	lsls	r7, r2
 8000bd2:	fa01 f002 	lsl.w	r0, r1, r2
 8000bd6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bda:	40d9      	lsrs	r1, r3
 8000bdc:	4330      	orrs	r0, r6
 8000bde:	0c03      	lsrs	r3, r0, #16
 8000be0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000be4:	fa1f f887 	uxth.w	r8, r7
 8000be8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf0:	fb06 f108 	mul.w	r1, r6, r8
 8000bf4:	4299      	cmp	r1, r3
 8000bf6:	fa04 f402 	lsl.w	r4, r4, r2
 8000bfa:	d909      	bls.n	8000c10 <__udivmoddi4+0x19c>
 8000bfc:	18fb      	adds	r3, r7, r3
 8000bfe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c02:	f080 808d 	bcs.w	8000d20 <__udivmoddi4+0x2ac>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 808a 	bls.w	8000d20 <__udivmoddi4+0x2ac>
 8000c0c:	3e02      	subs	r6, #2
 8000c0e:	443b      	add	r3, r7
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	b281      	uxth	r1, r0
 8000c14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c20:	fb00 f308 	mul.w	r3, r0, r8
 8000c24:	428b      	cmp	r3, r1
 8000c26:	d907      	bls.n	8000c38 <__udivmoddi4+0x1c4>
 8000c28:	1879      	adds	r1, r7, r1
 8000c2a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c2e:	d273      	bcs.n	8000d18 <__udivmoddi4+0x2a4>
 8000c30:	428b      	cmp	r3, r1
 8000c32:	d971      	bls.n	8000d18 <__udivmoddi4+0x2a4>
 8000c34:	3802      	subs	r0, #2
 8000c36:	4439      	add	r1, r7
 8000c38:	1acb      	subs	r3, r1, r3
 8000c3a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c3e:	e778      	b.n	8000b32 <__udivmoddi4+0xbe>
 8000c40:	f1c6 0c20 	rsb	ip, r6, #32
 8000c44:	fa03 f406 	lsl.w	r4, r3, r6
 8000c48:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c4c:	431c      	orrs	r4, r3
 8000c4e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c52:	fa01 f306 	lsl.w	r3, r1, r6
 8000c56:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c5a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c5e:	431f      	orrs	r7, r3
 8000c60:	0c3b      	lsrs	r3, r7, #16
 8000c62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c66:	fa1f f884 	uxth.w	r8, r4
 8000c6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c6e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c72:	fb09 fa08 	mul.w	sl, r9, r8
 8000c76:	458a      	cmp	sl, r1
 8000c78:	fa02 f206 	lsl.w	r2, r2, r6
 8000c7c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x220>
 8000c82:	1861      	adds	r1, r4, r1
 8000c84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c88:	d248      	bcs.n	8000d1c <__udivmoddi4+0x2a8>
 8000c8a:	458a      	cmp	sl, r1
 8000c8c:	d946      	bls.n	8000d1c <__udivmoddi4+0x2a8>
 8000c8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c92:	4421      	add	r1, r4
 8000c94:	eba1 010a 	sub.w	r1, r1, sl
 8000c98:	b2bf      	uxth	r7, r7
 8000c9a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c9e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ca2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ca6:	fb00 f808 	mul.w	r8, r0, r8
 8000caa:	45b8      	cmp	r8, r7
 8000cac:	d907      	bls.n	8000cbe <__udivmoddi4+0x24a>
 8000cae:	19e7      	adds	r7, r4, r7
 8000cb0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cb4:	d22e      	bcs.n	8000d14 <__udivmoddi4+0x2a0>
 8000cb6:	45b8      	cmp	r8, r7
 8000cb8:	d92c      	bls.n	8000d14 <__udivmoddi4+0x2a0>
 8000cba:	3802      	subs	r0, #2
 8000cbc:	4427      	add	r7, r4
 8000cbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cc2:	eba7 0708 	sub.w	r7, r7, r8
 8000cc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000cca:	454f      	cmp	r7, r9
 8000ccc:	46c6      	mov	lr, r8
 8000cce:	4649      	mov	r1, r9
 8000cd0:	d31a      	bcc.n	8000d08 <__udivmoddi4+0x294>
 8000cd2:	d017      	beq.n	8000d04 <__udivmoddi4+0x290>
 8000cd4:	b15d      	cbz	r5, 8000cee <__udivmoddi4+0x27a>
 8000cd6:	ebb3 020e 	subs.w	r2, r3, lr
 8000cda:	eb67 0701 	sbc.w	r7, r7, r1
 8000cde:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ce2:	40f2      	lsrs	r2, r6
 8000ce4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ce8:	40f7      	lsrs	r7, r6
 8000cea:	e9c5 2700 	strd	r2, r7, [r5]
 8000cee:	2600      	movs	r6, #0
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	462e      	mov	r6, r5
 8000cf8:	4628      	mov	r0, r5
 8000cfa:	e70b      	b.n	8000b14 <__udivmoddi4+0xa0>
 8000cfc:	4606      	mov	r6, r0
 8000cfe:	e6e9      	b.n	8000ad4 <__udivmoddi4+0x60>
 8000d00:	4618      	mov	r0, r3
 8000d02:	e6fd      	b.n	8000b00 <__udivmoddi4+0x8c>
 8000d04:	4543      	cmp	r3, r8
 8000d06:	d2e5      	bcs.n	8000cd4 <__udivmoddi4+0x260>
 8000d08:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d0c:	eb69 0104 	sbc.w	r1, r9, r4
 8000d10:	3801      	subs	r0, #1
 8000d12:	e7df      	b.n	8000cd4 <__udivmoddi4+0x260>
 8000d14:	4608      	mov	r0, r1
 8000d16:	e7d2      	b.n	8000cbe <__udivmoddi4+0x24a>
 8000d18:	4660      	mov	r0, ip
 8000d1a:	e78d      	b.n	8000c38 <__udivmoddi4+0x1c4>
 8000d1c:	4681      	mov	r9, r0
 8000d1e:	e7b9      	b.n	8000c94 <__udivmoddi4+0x220>
 8000d20:	4666      	mov	r6, ip
 8000d22:	e775      	b.n	8000c10 <__udivmoddi4+0x19c>
 8000d24:	4630      	mov	r0, r6
 8000d26:	e74a      	b.n	8000bbe <__udivmoddi4+0x14a>
 8000d28:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d2c:	4439      	add	r1, r7
 8000d2e:	e713      	b.n	8000b58 <__udivmoddi4+0xe4>
 8000d30:	3802      	subs	r0, #2
 8000d32:	443c      	add	r4, r7
 8000d34:	e724      	b.n	8000b80 <__udivmoddi4+0x10c>
 8000d36:	bf00      	nop

08000d38 <__aeabi_idiv0>:
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop

08000d3c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d42:	463b      	mov	r3, r7
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d4e:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <MX_ADC1_Init+0x9c>)
 8000d50:	4a22      	ldr	r2, [pc, #136]	; (8000ddc <MX_ADC1_Init+0xa0>)
 8000d52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d54:	4b20      	ldr	r3, [pc, #128]	; (8000dd8 <MX_ADC1_Init+0x9c>)
 8000d56:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d5a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d5c:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <MX_ADC1_Init+0x9c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d62:	4b1d      	ldr	r3, [pc, #116]	; (8000dd8 <MX_ADC1_Init+0x9c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d68:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <MX_ADC1_Init+0x9c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d6e:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <MX_ADC1_Init+0x9c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d76:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <MX_ADC1_Init+0x9c>)
 8000d78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000d7e:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <MX_ADC1_Init+0x9c>)
 8000d80:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000d84:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d86:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <MX_ADC1_Init+0x9c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <MX_ADC1_Init+0x9c>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_ADC1_Init+0x9c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <MX_ADC1_Init+0x9c>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000da0:	480d      	ldr	r0, [pc, #52]	; (8000dd8 <MX_ADC1_Init+0x9c>)
 8000da2:	f001 fa35 	bl	8002210 <HAL_ADC_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000dac:	f000 fcae 	bl	800170c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000db0:	2308      	movs	r3, #8
 8000db2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000db4:	2301      	movs	r3, #1
 8000db6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <MX_ADC1_Init+0x9c>)
 8000dc2:	f001 fcd7 	bl	8002774 <HAL_ADC_ConfigChannel>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000dcc:	f000 fc9e 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dd0:	bf00      	nop
 8000dd2:	3710      	adds	r7, #16
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000158 	.word	0x20000158
 8000ddc:	40012000 	.word	0x40012000

08000de0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	; 0x28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a32      	ldr	r2, [pc, #200]	; (8000ec8 <HAL_ADC_MspInit+0xe8>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d15e      	bne.n	8000ec0 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	4b31      	ldr	r3, [pc, #196]	; (8000ecc <HAL_ADC_MspInit+0xec>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	4a30      	ldr	r2, [pc, #192]	; (8000ecc <HAL_ADC_MspInit+0xec>)
 8000e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e10:	6453      	str	r3, [r2, #68]	; 0x44
 8000e12:	4b2e      	ldr	r3, [pc, #184]	; (8000ecc <HAL_ADC_MspInit+0xec>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	4b2a      	ldr	r3, [pc, #168]	; (8000ecc <HAL_ADC_MspInit+0xec>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a29      	ldr	r2, [pc, #164]	; (8000ecc <HAL_ADC_MspInit+0xec>)
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <HAL_ADC_MspInit+0xec>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4820      	ldr	r0, [pc, #128]	; (8000ed0 <HAL_ADC_MspInit+0xf0>)
 8000e4e:	f003 fa53 	bl	80042f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e52:	4b20      	ldr	r3, [pc, #128]	; (8000ed4 <HAL_ADC_MspInit+0xf4>)
 8000e54:	4a20      	ldr	r2, [pc, #128]	; (8000ed8 <HAL_ADC_MspInit+0xf8>)
 8000e56:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000e58:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <HAL_ADC_MspInit+0xf4>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e5e:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <HAL_ADC_MspInit+0xf4>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e64:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <HAL_ADC_MspInit+0xf4>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <HAL_ADC_MspInit+0xf4>)
 8000e6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e70:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e72:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <HAL_ADC_MspInit+0xf4>)
 8000e74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e78:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e7a:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <HAL_ADC_MspInit+0xf4>)
 8000e7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e80:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000e82:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <HAL_ADC_MspInit+0xf4>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_ADC_MspInit+0xf4>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <HAL_ADC_MspInit+0xf4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e94:	480f      	ldr	r0, [pc, #60]	; (8000ed4 <HAL_ADC_MspInit+0xf4>)
 8000e96:	f002 febf 	bl	8003c18 <HAL_DMA_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000ea0:	f000 fc34 	bl	800170c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a0b      	ldr	r2, [pc, #44]	; (8000ed4 <HAL_ADC_MspInit+0xf4>)
 8000ea8:	639a      	str	r2, [r3, #56]	; 0x38
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <HAL_ADC_MspInit+0xf4>)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2012      	movs	r0, #18
 8000eb6:	f002 fe78 	bl	8003baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000eba:	2012      	movs	r0, #18
 8000ebc:	f002 fe91 	bl	8003be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ec0:	bf00      	nop
 8000ec2:	3728      	adds	r7, #40	; 0x28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40012000 	.word	0x40012000
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020400 	.word	0x40020400
 8000ed4:	200001a0 	.word	0x200001a0
 8000ed8:	40026410 	.word	0x40026410

08000edc <MX_APP_Init>:
/***********************************************************************************************************************
 * Public functions implementation
 **********************************************************************************************************************/

void MX_APP_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
    /* Initialize board LEDs */
    BSP_LED_Init(LED1);
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f000 ff4c 	bl	8001d80 <BSP_LED_Init>
    BSP_LED_Init(LED2);
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f000 ff49 	bl	8001d80 <BSP_LED_Init>
    BSP_LED_Init(LED3);
 8000eee:	2002      	movs	r0, #2
 8000ef0:	f000 ff46 	bl	8001d80 <BSP_LED_Init>

    /* Initialize board buzzer */
    BSP_BUZZER_Init();
 8000ef4:	f000 fea4 	bl	8001c40 <BSP_BUZZER_Init>

    /* Initialize hardware */
    BOTONES_HW_Init();
 8000ef8:	f000 f914 	bl	8001124 <BOTONES_HW_Init>
    PEDAL_HW_Init();
 8000efc:	f000 fc9a 	bl	8001834 <PEDAL_HW_Init>
    PANTALLA_HW_Init();
 8000f00:	f000 fc10 	bl	8001724 <PANTALLA_HW_Init>
    CAN_HW_Init();
 8000f04:	f000 f972 	bl	80011ec <CAN_HW_Init>

    /* Indicate that initialization was completed */
    for(int i=0; i<3; i++)
 8000f08:	2300      	movs	r3, #0
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	e01a      	b.n	8000f44 <MX_APP_Init+0x68>
    {
    	BSP_LED_On(LED1);
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f000 ff7e 	bl	8001e10 <BSP_LED_On>
    	BSP_LED_On(LED2);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f000 ff7b 	bl	8001e10 <BSP_LED_On>
    	BSP_LED_On(LED3);
 8000f1a:	2002      	movs	r0, #2
 8000f1c:	f000 ff78 	bl	8001e10 <BSP_LED_On>

    	HAL_Delay(200);
 8000f20:	20c8      	movs	r0, #200	; 0xc8
 8000f22:	f001 f951 	bl	80021c8 <HAL_Delay>

    	BSP_LED_Off(LED1);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f000 ff8c 	bl	8001e44 <BSP_LED_Off>
    	BSP_LED_Off(LED2);
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f000 ff89 	bl	8001e44 <BSP_LED_Off>
    	BSP_LED_Off(LED3);
 8000f32:	2002      	movs	r0, #2
 8000f34:	f000 ff86 	bl	8001e44 <BSP_LED_Off>

    	HAL_Delay(200);
 8000f38:	20c8      	movs	r0, #200	; 0xc8
 8000f3a:	f001 f945 	bl	80021c8 <HAL_Delay>
    for(int i=0; i<3; i++)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3301      	adds	r3, #1
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	dde1      	ble.n	8000f0e <MX_APP_Init+0x32>
    }
}
 8000f4a:	bf00      	nop
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <MX_APP_Process>:

void MX_APP_Process(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	switch (app_state)
 8000f58:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <MX_APP_Process+0x7c>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d002      	beq.n	8000f66 <MX_APP_Process+0x12>
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d027      	beq.n	8000fb4 <MX_APP_Process+0x60>

	    //CAN_APP_Process();

		break;
	}
}
 8000f64:	e031      	b.n	8000fca <MX_APP_Process+0x76>
		blink_tickstart = HAL_GetTick();
 8000f66:	f001 f923 	bl	80021b0 <HAL_GetTick>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4a19      	ldr	r2, [pc, #100]	; (8000fd4 <MX_APP_Process+0x80>)
 8000f6e:	6013      	str	r3, [r2, #0]
			if( (HAL_GetTick() - blink_tickstart) > BLINK_TIME )
 8000f70:	f001 f91e 	bl	80021b0 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <MX_APP_Process+0x80>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	2bfa      	cmp	r3, #250	; 0xfa
 8000f7e:	d907      	bls.n	8000f90 <MX_APP_Process+0x3c>
				BSP_LED_Toggle(LED1);
 8000f80:	2000      	movs	r0, #0
 8000f82:	f000 ff79 	bl	8001e78 <BSP_LED_Toggle>
				blink_tickstart = HAL_GetTick();
 8000f86:	f001 f913 	bl	80021b0 <HAL_GetTick>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	4a11      	ldr	r2, [pc, #68]	; (8000fd4 <MX_APP_Process+0x80>)
 8000f8e:	6013      	str	r3, [r2, #0]
			if (bus_can_input.control_ok == CAN_VALUE_MODULE_OK)
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <MX_APP_Process+0x84>)
 8000f92:	789b      	ldrb	r3, [r3, #2]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d1eb      	bne.n	8000f70 <MX_APP_Process+0x1c>
				HAL_Delay(500);
 8000f98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f9c:	f001 f914 	bl	80021c8 <HAL_Delay>
				bus_can_output.perifericos_ok = CAN_VALUE_MODULE_OK;
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <MX_APP_Process+0x88>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	70da      	strb	r2, [r3, #3]
				INDICATORS_Finish_StartUp();
 8000fa6:	f000 fae5 	bl	8001574 <INDICATORS_Finish_StartUp>
				app_state = kRUNNING;
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <MX_APP_Process+0x7c>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	701a      	strb	r2, [r3, #0]
				break;
 8000fb0:	bf00      	nop
		break;
 8000fb2:	e00a      	b.n	8000fca <MX_APP_Process+0x76>
	    BOTONES_Process();
 8000fb4:	f000 f814 	bl	8000fe0 <BOTONES_Process>
	    PEDAL_Process();
 8000fb8:	f000 fbba 	bl	8001730 <PEDAL_Process>
	    PANTALLA_Process();
 8000fbc:	f000 fbab 	bl	8001716 <PANTALLA_Process>
	    INDICATORS_Process();
 8000fc0:	f000 fb1f 	bl	8001602 <INDICATORS_Process>
	    DECODE_DATA_Process();
 8000fc4:	f000 f95e 	bl	8001284 <DECODE_DATA_Process>
		break;
 8000fc8:	bf00      	nop
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000080 	.word	0x20000080
 8000fd4:	20000084 	.word	0x20000084
 8000fd8:	20000030 	.word	0x20000030
 8000fdc:	2000002c 	.word	0x2000002c

08000fe0 <BOTONES_Process>:
 *
 * @param   None
 * @retval  None
 */
void BOTONES_Process(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	BOTONES_Update_HM_Btns();									// actualice pulsadores de hombre muerto en bus de datos
 8000fe4:	f000 f814 	bl	8001010 <BOTONES_Update_HM_Btns>

	BOTONES_Update_HM_State();									// actualice estado de hombre muerto en bus de datos
 8000fe8:	f000 f836 	bl	8001058 <BOTONES_Update_HM_State>

	BOTONES_Send_HM_State( bus_data.hm_state, 
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <BOTONES_Process+0x28>)
 8000fee:	78db      	ldrb	r3, [r3, #3]
 8000ff0:	4906      	ldr	r1, [pc, #24]	; (800100c <BOTONES_Process+0x2c>)
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f850 	bl	8001098 <BOTONES_Send_HM_State>
							&bus_can_output);					// envie estado hombre muerto a bus de salida CAN

	BOTONES_Send_DrivingMode_Btn( bus_data.btn_modo_manejo, 
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <BOTONES_Process+0x28>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4903      	ldr	r1, [pc, #12]	; (800100c <BOTONES_Process+0x2c>)
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 f864 	bl	80010cc <BOTONES_Send_DrivingMode_Btn>
									&bus_can_output);			// envie modo de manejo presionado a bus de salida CAN
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000000 	.word	0x20000000
 800100c:	2000002c 	.word	0x2000002c

08001010 <BOTONES_Update_HM_Btns>:
 *
 * @param None
 * @retval None
 */
static void BOTONES_Update_HM_Btns(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	/* Pulsador 1 hombre muerto */
	if(HAL_GPIO_ReadPin(BTN_HM1_GPIO_Port, BTN_HM1_Pin) == GPIO_PIN_RESET)
 8001014:	2108      	movs	r1, #8
 8001016:	480e      	ldr	r0, [pc, #56]	; (8001050 <BOTONES_Update_HM_Btns+0x40>)
 8001018:	f003 fb02 	bl	8004620 <HAL_GPIO_ReadPin>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d103      	bne.n	800102a <BOTONES_Update_HM_Btns+0x1a>
	{
		bus_data.btn_hm1 = kBTN_PRESSED;
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <BOTONES_Update_HM_Btns+0x44>)
 8001024:	2201      	movs	r2, #1
 8001026:	705a      	strb	r2, [r3, #1]
 8001028:	e002      	b.n	8001030 <BOTONES_Update_HM_Btns+0x20>
	}
	else
	{
		bus_data.btn_hm1 = kBTN_NOT_PRESSED;
 800102a:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <BOTONES_Update_HM_Btns+0x44>)
 800102c:	2200      	movs	r2, #0
 800102e:	705a      	strb	r2, [r3, #1]
	}

	/* Pulsador 2 hombre muerto */
	if(HAL_GPIO_ReadPin(BTN_HM2_GPIO_Port, BTN_HM2_Pin) == GPIO_PIN_RESET)
 8001030:	2110      	movs	r1, #16
 8001032:	4807      	ldr	r0, [pc, #28]	; (8001050 <BOTONES_Update_HM_Btns+0x40>)
 8001034:	f003 faf4 	bl	8004620 <HAL_GPIO_ReadPin>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d103      	bne.n	8001046 <BOTONES_Update_HM_Btns+0x36>
	{
		bus_data.btn_hm2 = kBTN_PRESSED;
 800103e:	4b05      	ldr	r3, [pc, #20]	; (8001054 <BOTONES_Update_HM_Btns+0x44>)
 8001040:	2201      	movs	r2, #1
 8001042:	709a      	strb	r2, [r3, #2]
	}
	else
	{
		bus_data.btn_hm2 = kBTN_NOT_PRESSED;
	}
}
 8001044:	e002      	b.n	800104c <BOTONES_Update_HM_Btns+0x3c>
		bus_data.btn_hm2 = kBTN_NOT_PRESSED;
 8001046:	4b03      	ldr	r3, [pc, #12]	; (8001054 <BOTONES_Update_HM_Btns+0x44>)
 8001048:	2200      	movs	r2, #0
 800104a:	709a      	strb	r2, [r3, #2]
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40021000 	.word	0x40021000
 8001054:	20000000 	.word	0x20000000

08001058 <BOTONES_Update_HM_State>:
 *
 * @param None
 * @retval None
 */
static void BOTONES_Update_HM_State(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
	/* Ambos pulsadores de hombre muerto no presionados */
	if(bus_data.btn_hm1 == kBTN_NOT_PRESSED && bus_data.btn_hm2 == kBTN_NOT_PRESSED)
 800105c:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <BOTONES_Update_HM_State+0x3c>)
 800105e:	785b      	ldrb	r3, [r3, #1]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d107      	bne.n	8001074 <BOTONES_Update_HM_State+0x1c>
 8001064:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <BOTONES_Update_HM_State+0x3c>)
 8001066:	789b      	ldrb	r3, [r3, #2]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d103      	bne.n	8001074 <BOTONES_Update_HM_State+0x1c>
	{
		bus_data.hm_state = kHOMBRE_MUERTO_ON;
 800106c:	4b09      	ldr	r3, [pc, #36]	; (8001094 <BOTONES_Update_HM_State+0x3c>)
 800106e:	2201      	movs	r2, #1
 8001070:	70da      	strb	r2, [r3, #3]
	/* Cualquiera de los pulsadores de hombre muerto presionados */
	else if(bus_data.btn_hm1 == kBTN_PRESSED || bus_data.btn_hm2 == kBTN_PRESSED)
	{
		bus_data.hm_state = kHOMBRE_MUERTO_OFF;
	}
}
 8001072:	e00a      	b.n	800108a <BOTONES_Update_HM_State+0x32>
	else if(bus_data.btn_hm1 == kBTN_PRESSED || bus_data.btn_hm2 == kBTN_PRESSED)
 8001074:	4b07      	ldr	r3, [pc, #28]	; (8001094 <BOTONES_Update_HM_State+0x3c>)
 8001076:	785b      	ldrb	r3, [r3, #1]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d003      	beq.n	8001084 <BOTONES_Update_HM_State+0x2c>
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <BOTONES_Update_HM_State+0x3c>)
 800107e:	789b      	ldrb	r3, [r3, #2]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d102      	bne.n	800108a <BOTONES_Update_HM_State+0x32>
		bus_data.hm_state = kHOMBRE_MUERTO_OFF;
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <BOTONES_Update_HM_State+0x3c>)
 8001086:	2200      	movs	r2, #0
 8001088:	70da      	strb	r2, [r3, #3]
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	20000000 	.word	0x20000000

08001098 <BOTONES_Send_HM_State>:
 *
 * @param to_send           Estado de hombre muerto a enviar
 * @param bus_can_output    Puntero a estructura de tipo typedef_bus2_t (bus de salida CAN)
 */
static void BOTONES_Send_HM_State(hm_state_t to_send, typedef_bus2_t* bus_can_output)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	6039      	str	r1, [r7, #0]
 80010a2:	71fb      	strb	r3, [r7, #7]
    /* Envío a bus de salida CAN */
    switch (to_send)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d005      	beq.n	80010b6 <BOTONES_Send_HM_State+0x1e>
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d107      	bne.n	80010be <BOTONES_Send_HM_State+0x26>
    {
    case kHOMBRE_MUERTO_ON:
        bus_can_output->hombre_muerto = CAN_VALUE_HM_PRESSED;
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	2201      	movs	r2, #1
 80010b2:	705a      	strb	r2, [r3, #1]
        break;
 80010b4:	e004      	b.n	80010c0 <BOTONES_Send_HM_State+0x28>
    case kHOMBRE_MUERTO_OFF:
        bus_can_output->hombre_muerto = CAN_VALUE_HM_NOT_PRESSED;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	2202      	movs	r2, #2
 80010ba:	705a      	strb	r2, [r3, #1]
        break;
 80010bc:	e000      	b.n	80010c0 <BOTONES_Send_HM_State+0x28>
    default:
        break;
 80010be:	bf00      	nop
    }
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <BOTONES_Send_DrivingMode_Btn>:
 *
 * @param to_send           Modo de manejo presionado a enviar
 * @param bus_can_output    Puntero a estructura de tipo typedef_bus2_t (bus de salida CAN)
 */
static void BOTONES_Send_DrivingMode_Btn(btn_modo_manejo_t to_send, typedef_bus2_t* bus_can_output)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	6039      	str	r1, [r7, #0]
 80010d6:	71fb      	strb	r3, [r7, #7]
    /* Envío a bus de salida CAN */
    switch (to_send)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	2b03      	cmp	r3, #3
 80010dc:	d81a      	bhi.n	8001114 <BOTONES_Send_DrivingMode_Btn+0x48>
 80010de:	a201      	add	r2, pc, #4	; (adr r2, 80010e4 <BOTONES_Send_DrivingMode_Btn+0x18>)
 80010e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e4:	080010f5 	.word	0x080010f5
 80010e8:	080010fd 	.word	0x080010fd
 80010ec:	08001105 	.word	0x08001105
 80010f0:	0800110d 	.word	0x0800110d
    {
    case kBTN_NONE:
        bus_can_output->botones_cambio_estado = CAN_VALUE_BTN_NONE;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	2204      	movs	r2, #4
 80010f8:	709a      	strb	r2, [r3, #2]
        break;
 80010fa:	e00c      	b.n	8001116 <BOTONES_Send_DrivingMode_Btn+0x4a>
    case kBTN_ECO:
        bus_can_output->botones_cambio_estado = CAN_VALUE_BTN_ECO;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	2202      	movs	r2, #2
 8001100:	709a      	strb	r2, [r3, #2]
        break;
 8001102:	e008      	b.n	8001116 <BOTONES_Send_DrivingMode_Btn+0x4a>
    case kBTN_NORMAL:
        bus_can_output->botones_cambio_estado = CAN_VALUE_BTN_NORMAL;
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	2201      	movs	r2, #1
 8001108:	709a      	strb	r2, [r3, #2]
        break;
 800110a:	e004      	b.n	8001116 <BOTONES_Send_DrivingMode_Btn+0x4a>
    case kBTN_SPORT:
        bus_can_output->botones_cambio_estado = CAN_VALUE_BTN_SPORT;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	2203      	movs	r2, #3
 8001110:	709a      	strb	r2, [r3, #2]
        break;
 8001112:	e000      	b.n	8001116 <BOTONES_Send_DrivingMode_Btn+0x4a>
    default:
        break;
 8001114:	bf00      	nop
    }
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop

08001124 <BOTONES_HW_Init>:
/***********************************************************************************************************************
 * Public functions implementation
 **********************************************************************************************************************/

void BOTONES_HW_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
    MX_GPIO_Init();
 8001128:	f000 f982 	bl	8001430 <MX_GPIO_Init>
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}

08001130 <HAL_CAN_MspInit>:
  /* USER CODE END CAN2_Init 2 */

}

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN2)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a24      	ldr	r2, [pc, #144]	; (80011e0 <HAL_CAN_MspInit+0xb0>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d142      	bne.n	80011d8 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* CAN2 clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <HAL_CAN_MspInit+0xb4>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	4a22      	ldr	r2, [pc, #136]	; (80011e4 <HAL_CAN_MspInit+0xb4>)
 800115c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001160:	6413      	str	r3, [r2, #64]	; 0x40
 8001162:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <HAL_CAN_MspInit+0xb4>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <HAL_CAN_MspInit+0xb4>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	4a1b      	ldr	r2, [pc, #108]	; (80011e4 <HAL_CAN_MspInit+0xb4>)
 8001178:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800117c:	6413      	str	r3, [r2, #64]	; 0x40
 800117e:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <HAL_CAN_MspInit+0xb4>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <HAL_CAN_MspInit+0xb4>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a14      	ldr	r2, [pc, #80]	; (80011e4 <HAL_CAN_MspInit+0xb4>)
 8001194:	f043 0302 	orr.w	r3, r3, #2
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <HAL_CAN_MspInit+0xb4>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80011a6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b4:	2303      	movs	r3, #3
 80011b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80011b8:	2309      	movs	r3, #9
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	4809      	ldr	r0, [pc, #36]	; (80011e8 <HAL_CAN_MspInit+0xb8>)
 80011c4:	f003 f898 	bl	80042f8 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2100      	movs	r1, #0
 80011cc:	2040      	movs	r0, #64	; 0x40
 80011ce:	f002 fcec 	bl	8003baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80011d2:	2040      	movs	r0, #64	; 0x40
 80011d4:	f002 fd05 	bl	8003be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80011d8:	bf00      	nop
 80011da:	3728      	adds	r7, #40	; 0x28
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40006800 	.word	0x40006800
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40020400 	.word	0x40020400

080011ec <CAN_HW_Init>:
/***********************************************************************************************************************
 * Public functions implementation
 **********************************************************************************************************************/

void CAN_HW_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af04      	add	r7, sp, #16
  /* Initialize time base timer for CAN triggering */
  MX_TIM7_Init();
 80011f2:	f000 fc17 	bl	8001a24 <MX_TIM7_Init>

  /* Inicializa CAN usando driver */
  CAN_API_Init( &can_obj,
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <CAN_HW_Init+0x3c>)
 80011f8:	9302      	str	r3, [sp, #8]
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <CAN_HW_Init+0x40>)
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <CAN_HW_Init+0x44>)
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <CAN_HW_Init+0x48>)
 8001204:	2200      	movs	r2, #0
 8001206:	2100      	movs	r1, #0
 8001208:	480b      	ldr	r0, [pc, #44]	; (8001238 <CAN_HW_Init+0x4c>)
 800120a:	f000 fe4f 	bl	8001eac <CAN_API_Init>

  /* Initialize CAN2 */
  //MX_CAN2_Init();

  /* Start CAN module */
  HAL_CAN_Start(&hcan2);
 800120e:	480b      	ldr	r0, [pc, #44]	; (800123c <CAN_HW_Init+0x50>)
 8001210:	f001 ff46 	bl	80030a0 <HAL_CAN_Start>

  /* Activate CAN notification (enable interrupts) */
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001214:	2102      	movs	r1, #2
 8001216:	4809      	ldr	r0, [pc, #36]	; (800123c <CAN_HW_Init+0x50>)
 8001218:	f002 f997 	bl	800354a <HAL_CAN_ActivateNotification>

  /* Start time base trigger CAN timer */
  HAL_TIM_Base_Start_IT(&htim7);
 800121c:	4808      	ldr	r0, [pc, #32]	; (8001240 <CAN_HW_Init+0x54>)
 800121e:	f004 f817 	bl	8005250 <HAL_TIM_Base_Start_IT>
}
 8001222:	bf00      	nop
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	08001fb1 	.word	0x08001fb1
 800122c:	08001f81 	.word	0x08001f81
 8001230:	08001f19 	.word	0x08001f19
 8001234:	08001efd 	.word	0x08001efd
 8001238:	20000228 	.word	0x20000228
 800123c:	20000200 	.word	0x20000200
 8001240:	200002a4 	.word	0x200002a4

08001244 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * Exported functions implementation
 **********************************************************************************************************************/

/* Callback mensaje CAN recibido */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
    /* The flag indicates that the callback was called */
    flag_rx_can = CAN_MSG_RECEIVED;
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	20000038 	.word	0x20000038

08001264 <HAL_TIM_PeriodElapsedCallback>:

/* Callback timer trigger de transmisión de datos de bus de salida CAN a módulo CAN */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Toggle LED 1 (Red LED) */
  BSP_LED_Toggle(LED1);
 800126c:	2000      	movs	r0, #0
 800126e:	f000 fe03 	bl	8001e78 <BSP_LED_Toggle>

  /* The flag indicates that the callback was called */
  flag_tx_can = CAN_TX_READY;
 8001272:	4b03      	ldr	r3, [pc, #12]	; (8001280 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000088 	.word	0x20000088

08001284 <DECODE_DATA_Process>:
 *
 * @param None
 * @retval None
 */
void DECODE_DATA_Process(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
    if (flag_decodificar == DECODIFICA)
 8001288:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <DECODE_DATA_Process+0x24>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d108      	bne.n	80012a2 <DECODE_DATA_Process+0x1e>
    {
    	DECODE_DATA_Decode_Control();
 8001290:	f000 f80c 	bl	80012ac <DECODE_DATA_Decode_Control>

    	DECODE_DATA_Decode_Bms();
 8001294:	f000 f862 	bl	800135c <DECODE_DATA_Decode_Bms>

    	DECODE_DATA_Decode_Inversor();
 8001298:	f000 f894 	bl	80013c4 <DECODE_DATA_Decode_Inversor>

        flag_decodificar = NO_DECODIFICA;
 800129c:	4b02      	ldr	r3, [pc, #8]	; (80012a8 <DECODE_DATA_Process+0x24>)
 800129e:	2201      	movs	r2, #1
 80012a0:	701a      	strb	r2, [r3, #0]
    }
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000039 	.word	0x20000039

080012ac <DECODE_DATA_Decode_Control>:
 * los datos en la estructura Rx_Control del tipo rx_control_vars_t y que
 * se encuentra en el bus_data.
 *
 */
static void DECODE_DATA_Decode_Control(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
    /* Decodifica info de Control */
    switch (bus_can_input.control_ok)
 80012b0:	4b28      	ldr	r3, [pc, #160]	; (8001354 <DECODE_DATA_Decode_Control+0xa8>)
 80012b2:	789b      	ldrb	r3, [r3, #2]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d002      	beq.n	80012be <DECODE_DATA_Decode_Control+0x12>
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d005      	beq.n	80012c8 <DECODE_DATA_Decode_Control+0x1c>
 80012bc:	e009      	b.n	80012d2 <DECODE_DATA_Decode_Control+0x26>
    {
    case CAN_VALUE_MODULE_OK:
        Rx_Control->control_ok = kMODULE_INFO_OK;
 80012be:	4b26      	ldr	r3, [pc, #152]	; (8001358 <DECODE_DATA_Decode_Control+0xac>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2200      	movs	r2, #0
 80012c4:	709a      	strb	r2, [r3, #2]
        break;
 80012c6:	e004      	b.n	80012d2 <DECODE_DATA_Decode_Control+0x26>
    case CAN_VALUE_MODULE_ERROR:
        Rx_Control->control_ok = kMODULE_INFO_ERROR;
 80012c8:	4b23      	ldr	r3, [pc, #140]	; (8001358 <DECODE_DATA_Decode_Control+0xac>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2201      	movs	r2, #1
 80012ce:	709a      	strb	r2, [r3, #2]
        break;
 80012d0:	bf00      	nop
    }

	/* Decodifica modos de manejo de Control */
    switch (bus_can_input.estado_manejo)
 80012d2:	4b20      	ldr	r3, [pc, #128]	; (8001354 <DECODE_DATA_Decode_Control+0xa8>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	d00f      	beq.n	80012fa <DECODE_DATA_Decode_Control+0x4e>
 80012da:	2b04      	cmp	r3, #4
 80012dc:	dc12      	bgt.n	8001304 <DECODE_DATA_Decode_Control+0x58>
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d006      	beq.n	80012f0 <DECODE_DATA_Decode_Control+0x44>
 80012e2:	2b03      	cmp	r3, #3
 80012e4:	d10e      	bne.n	8001304 <DECODE_DATA_Decode_Control+0x58>
    {
    case CAN_VALUE_DRIVING_MODE_ECO:
    	Rx_Control->driving_mode = kDRIVING_MODE_ECO;
 80012e6:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <DECODE_DATA_Decode_Control+0xac>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2200      	movs	r2, #0
 80012ec:	701a      	strb	r2, [r3, #0]
        break;
 80012ee:	e009      	b.n	8001304 <DECODE_DATA_Decode_Control+0x58>
    case CAN_VALUE_DRIVING_MODE_NORMAL:
    	Rx_Control->driving_mode = kDRIVING_MODE_NORMAL;
 80012f0:	4b19      	ldr	r3, [pc, #100]	; (8001358 <DECODE_DATA_Decode_Control+0xac>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2201      	movs	r2, #1
 80012f6:	701a      	strb	r2, [r3, #0]
        break;
 80012f8:	e004      	b.n	8001304 <DECODE_DATA_Decode_Control+0x58>
    case CAN_VALUE_DRIVING_MODE_SPORT:
    	Rx_Control->driving_mode = kDRIVING_MODE_SPORT;
 80012fa:	4b17      	ldr	r3, [pc, #92]	; (8001358 <DECODE_DATA_Decode_Control+0xac>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2202      	movs	r2, #2
 8001300:	701a      	strb	r2, [r3, #0]
        break;
 8001302:	bf00      	nop
    }

    /* Decodifica fallas de Control */
    switch (bus_can_input.estado_falla)
 8001304:	4b13      	ldr	r3, [pc, #76]	; (8001354 <DECODE_DATA_Decode_Control+0xa8>)
 8001306:	785b      	ldrb	r3, [r3, #1]
 8001308:	2b03      	cmp	r3, #3
 800130a:	d81e      	bhi.n	800134a <DECODE_DATA_Decode_Control+0x9e>
 800130c:	a201      	add	r2, pc, #4	; (adr r2, 8001314 <DECODE_DATA_Decode_Control+0x68>)
 800130e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001312:	bf00      	nop
 8001314:	08001325 	.word	0x08001325
 8001318:	0800132f 	.word	0x0800132f
 800131c:	08001339 	.word	0x08001339
 8001320:	08001341 	.word	0x08001341
    {
    case CAN_VALUE_FAILURE_OK:
    	Rx_Control->failure = kFAILURE_OK;
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <DECODE_DATA_Decode_Control+0xac>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2200      	movs	r2, #0
 800132a:	705a      	strb	r2, [r3, #1]
        break;
 800132c:	e00d      	b.n	800134a <DECODE_DATA_Decode_Control+0x9e>
    case CAN_VALUE_FAILURE_CAUTION1:
    	Rx_Control->failure = kFAILURE_CAUTION1;
 800132e:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <DECODE_DATA_Decode_Control+0xac>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2201      	movs	r2, #1
 8001334:	705a      	strb	r2, [r3, #1]
        break;
 8001336:	e008      	b.n	800134a <DECODE_DATA_Decode_Control+0x9e>
    case CAN_VALUE_FAILURE_CAUTION2:
    	Rx_Control->failure = kFAILURE_CAUTION2;
 8001338:	4b07      	ldr	r3, [pc, #28]	; (8001358 <DECODE_DATA_Decode_Control+0xac>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2202      	movs	r2, #2
 800133e:	705a      	strb	r2, [r3, #1]
    case CAN_VALUE_FAILURE_AUTOKILL:
    	Rx_Control->failure = kFAILURE_AUTOKILL;
 8001340:	4b05      	ldr	r3, [pc, #20]	; (8001358 <DECODE_DATA_Decode_Control+0xac>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2203      	movs	r2, #3
 8001346:	705a      	strb	r2, [r3, #1]
        break;
 8001348:	bf00      	nop
    }
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	20000030 	.word	0x20000030
 8001358:	2000003c 	.word	0x2000003c

0800135c <DECODE_DATA_Decode_Bms>:
 * los datos en la estructura Rx_Bms del tipo rx_bms_vars_t y que
 * se encuentra en el bus_data.
 *
 */
static void DECODE_DATA_Decode_Bms(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
	/* Decodifica las variables analógicas de BMS */
    Rx_Bms->voltaje = (rx_var_t)bus_can_input.voltaje_bms;
 8001360:	4b16      	ldr	r3, [pc, #88]	; (80013bc <DECODE_DATA_Decode_Bms+0x60>)
 8001362:	78da      	ldrb	r2, [r3, #3]
 8001364:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <DECODE_DATA_Decode_Bms+0x64>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	ee07 2a90 	vmov	s15, r2
 800136c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001370:	edc3 7a00 	vstr	s15, [r3]

    Rx_Bms->corriente = (rx_var_t)bus_can_input.corriente_bms;
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <DECODE_DATA_Decode_Bms+0x60>)
 8001376:	791a      	ldrb	r2, [r3, #4]
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <DECODE_DATA_Decode_Bms+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	ee07 2a90 	vmov	s15, r2
 8001380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001384:	edc3 7a01 	vstr	s15, [r3, #4]

    Rx_Bms->potencia = (rx_var_t)bus_can_input.potencia_bms;
 8001388:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <DECODE_DATA_Decode_Bms+0x60>)
 800138a:	795a      	ldrb	r2, [r3, #5]
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <DECODE_DATA_Decode_Bms+0x64>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	ee07 2a90 	vmov	s15, r2
 8001394:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001398:	edc3 7a03 	vstr	s15, [r3, #12]

    Rx_Bms->nivel_bateria = (rx_var_t)bus_can_input.nivel_bateria_bms;
 800139c:	4b07      	ldr	r3, [pc, #28]	; (80013bc <DECODE_DATA_Decode_Bms+0x60>)
 800139e:	799a      	ldrb	r2, [r3, #6]
 80013a0:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <DECODE_DATA_Decode_Bms+0x64>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	ee07 2a90 	vmov	s15, r2
 80013a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013ac:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	20000030 	.word	0x20000030
 80013c0:	20000040 	.word	0x20000040

080013c4 <DECODE_DATA_Decode_Inversor>:
 * los datos en la estructura Rx_Inversor del tipo rx_inversor_vars_t y
 * que se encuentra en el bus_data.
 *
 */
static void DECODE_DATA_Decode_Inversor(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
	/* Decodifica las variables analógicas de Inversor */
    Rx_Inversor->velocidad = (rx_var_t)bus_can_input.velocidad_inv;
 80013c8:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <DECODE_DATA_Decode_Inversor+0x24>)
 80013ca:	79da      	ldrb	r2, [r3, #7]
 80013cc:	4b07      	ldr	r3, [pc, #28]	; (80013ec <DECODE_DATA_Decode_Inversor+0x28>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	ee07 2a90 	vmov	s15, r2
 80013d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013d8:	edc3 7a00 	vstr	s15, [r3]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000030 	.word	0x20000030
 80013ec:	20000044 	.word	0x20000044

080013f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <MX_DMA_Init+0x3c>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a0b      	ldr	r2, [pc, #44]	; (800142c <MX_DMA_Init+0x3c>)
 8001400:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <MX_DMA_Init+0x3c>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	2100      	movs	r1, #0
 8001416:	2038      	movs	r0, #56	; 0x38
 8001418:	f002 fbc7 	bl	8003baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800141c:	2038      	movs	r0, #56	; 0x38
 800141e:	f002 fbe0 	bl	8003be2 <HAL_NVIC_EnableIRQ>

}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40023800 	.word	0x40023800

08001430 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	4b46      	ldr	r3, [pc, #280]	; (8001564 <MX_GPIO_Init+0x134>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a45      	ldr	r2, [pc, #276]	; (8001564 <MX_GPIO_Init+0x134>)
 8001450:	f043 0310 	orr.w	r3, r3, #16
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b43      	ldr	r3, [pc, #268]	; (8001564 <MX_GPIO_Init+0x134>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0310 	and.w	r3, r3, #16
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	4b3f      	ldr	r3, [pc, #252]	; (8001564 <MX_GPIO_Init+0x134>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a3e      	ldr	r2, [pc, #248]	; (8001564 <MX_GPIO_Init+0x134>)
 800146c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b3c      	ldr	r3, [pc, #240]	; (8001564 <MX_GPIO_Init+0x134>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	4b38      	ldr	r3, [pc, #224]	; (8001564 <MX_GPIO_Init+0x134>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a37      	ldr	r2, [pc, #220]	; (8001564 <MX_GPIO_Init+0x134>)
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b35      	ldr	r3, [pc, #212]	; (8001564 <MX_GPIO_Init+0x134>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	4b31      	ldr	r3, [pc, #196]	; (8001564 <MX_GPIO_Init+0x134>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a30      	ldr	r2, [pc, #192]	; (8001564 <MX_GPIO_Init+0x134>)
 80014a4:	f043 0304 	orr.w	r3, r3, #4
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b2e      	ldr	r3, [pc, #184]	; (8001564 <MX_GPIO_Init+0x134>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0304 	and.w	r3, r3, #4
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	603b      	str	r3, [r7, #0]
 80014ba:	4b2a      	ldr	r3, [pc, #168]	; (8001564 <MX_GPIO_Init+0x134>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a29      	ldr	r2, [pc, #164]	; (8001564 <MX_GPIO_Init+0x134>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b27      	ldr	r3, [pc, #156]	; (8001564 <MX_GPIO_Init+0x134>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ECO_GPIO_Port, LED_ECO_Pin, GPIO_PIN_RESET);
 80014d2:	2200      	movs	r2, #0
 80014d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014d8:	4823      	ldr	r0, [pc, #140]	; (8001568 <MX_GPIO_Init+0x138>)
 80014da:	f003 f8b9 	bl	8004650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_NORMAL_Pin|LED_SPORT_Pin, GPIO_PIN_RESET);
 80014de:	2200      	movs	r2, #0
 80014e0:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 80014e4:	4821      	ldr	r0, [pc, #132]	; (800156c <MX_GPIO_Init+0x13c>)
 80014e6:	f003 f8b3 	bl	8004650 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BTN_HM1_Pin|BTN_HM2_Pin;
 80014ea:	2318      	movs	r3, #24
 80014ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	4619      	mov	r1, r3
 80014fc:	481c      	ldr	r0, [pc, #112]	; (8001570 <MX_GPIO_Init+0x140>)
 80014fe:	f002 fefb 	bl	80042f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_ECO_Pin;
 8001502:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001508:	2301      	movs	r3, #1
 800150a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_ECO_GPIO_Port, &GPIO_InitStruct);
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4619      	mov	r1, r3
 800151a:	4813      	ldr	r0, [pc, #76]	; (8001568 <MX_GPIO_Init+0x138>)
 800151c:	f002 feec 	bl	80042f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BTN_ECO_Pin|BTN_NORMAL_Pin|BTN_SPORT_Pin;
 8001520:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 8001524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001526:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800152a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	4619      	mov	r1, r3
 8001536:	480d      	ldr	r0, [pc, #52]	; (800156c <MX_GPIO_Init+0x13c>)
 8001538:	f002 fede 	bl	80042f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_NORMAL_Pin|LED_SPORT_Pin;
 800153c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001542:	2301      	movs	r3, #1
 8001544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4619      	mov	r1, r3
 8001554:	4805      	ldr	r0, [pc, #20]	; (800156c <MX_GPIO_Init+0x13c>)
 8001556:	f002 fecf 	bl	80042f8 <HAL_GPIO_Init>

}
 800155a:	bf00      	nop
 800155c:	3728      	adds	r7, #40	; 0x28
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800
 8001568:	40020800 	.word	0x40020800
 800156c:	40020000 	.word	0x40020000
 8001570:	40021000 	.word	0x40021000

08001574 <INDICATORS_Finish_StartUp>:
 *
 * @param None
 * @retval None
 */
void INDICATORS_Finish_StartUp(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
    uint32_t tickstart;

    uint32_t blink_tickstart;

    BSP_BUZZER_On();
 800157a:	f000 fbe9 	bl	8001d50 <BSP_BUZZER_On>

    tickstart = HAL_GetTick();      // get ticks for the turn off time of LEDs and buzzer
 800157e:	f000 fe17 	bl	80021b0 <HAL_GetTick>
 8001582:	6038      	str	r0, [r7, #0]

    blink_tickstart = tickstart;    // ticks for the blinking of the LEDs
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	607b      	str	r3, [r7, #4]

    BSP_LED_Off(LED1);
 8001588:	2000      	movs	r0, #0
 800158a:	f000 fc5b 	bl	8001e44 <BSP_LED_Off>
    BSP_LED_Off(LED2);
 800158e:	2001      	movs	r0, #1
 8001590:	f000 fc58 	bl	8001e44 <BSP_LED_Off>
    BSP_LED_Off(LED3);
 8001594:	2002      	movs	r0, #2
 8001596:	f000 fc55 	bl	8001e44 <BSP_LED_Off>

    while(1)
    {
        if( (HAL_GetTick() - blink_tickstart) > BLINK_TIME )  		// 250ms
 800159a:	f000 fe09 	bl	80021b0 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2bfa      	cmp	r3, #250	; 0xfa
 80015a6:	d90b      	bls.n	80015c0 <INDICATORS_Finish_StartUp+0x4c>
        {
            BSP_LED_Toggle(LED1);
 80015a8:	2000      	movs	r0, #0
 80015aa:	f000 fc65 	bl	8001e78 <BSP_LED_Toggle>
            BSP_LED_Toggle(LED2);
 80015ae:	2001      	movs	r0, #1
 80015b0:	f000 fc62 	bl	8001e78 <BSP_LED_Toggle>
            BSP_LED_Toggle(LED3);
 80015b4:	2002      	movs	r0, #2
 80015b6:	f000 fc5f 	bl	8001e78 <BSP_LED_Toggle>

            blink_tickstart = HAL_GetTick();
 80015ba:	f000 fdf9 	bl	80021b0 <HAL_GetTick>
 80015be:	6078      	str	r0, [r7, #4]
        }

        if( (HAL_GetTick() - tickstart) > BUZZER_TURNOFF_TIME )   	// 2s
 80015c0:	f000 fdf6 	bl	80021b0 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80015ce:	d901      	bls.n	80015d4 <INDICATORS_Finish_StartUp+0x60>
        {
            BSP_BUZZER_Off();
 80015d0:	f000 fbca 	bl	8001d68 <BSP_BUZZER_Off>
        }

        if( (HAL_GetTick() - tickstart) > LEDS_TURNOFF_TIME )   	// 3s
 80015d4:	f000 fdec 	bl	80021b0 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d9d9      	bls.n	800159a <INDICATORS_Finish_StartUp+0x26>
        {
            BSP_LED_Off(LED1);
 80015e6:	2000      	movs	r0, #0
 80015e8:	f000 fc2c 	bl	8001e44 <BSP_LED_Off>
            BSP_LED_Off(LED2);
 80015ec:	2001      	movs	r0, #1
 80015ee:	f000 fc29 	bl	8001e44 <BSP_LED_Off>
            BSP_LED_Off(LED3);
 80015f2:	2002      	movs	r0, #2
 80015f4:	f000 fc26 	bl	8001e44 <BSP_LED_Off>

            break;  // startup is completed
 80015f8:	bf00      	nop
        }
    }
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <INDICATORS_Process>:
 *
 * @param None
 * @retval None
 */
void INDICATORS_Process(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
	//BSP_LED_Off(LED1);
	//BSP_LED_Off(LED2);
	//BSP_LED_Off(LED3);
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001614:	f000 fd66 	bl	80020e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001618:	f000 f818 	bl	800164c <SystemClock_Config>
  /* USER CODE END SysInit */

  /* USER CODE BEGIN 2 */

  /* Turn driving modes buttons LEDs on */
  HAL_GPIO_TogglePin(LED_ECO_GPIO_Port, LED_ECO_Pin);
 800161c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001620:	4808      	ldr	r0, [pc, #32]	; (8001644 <main+0x34>)
 8001622:	f003 f82e 	bl	8004682 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(LED_NORMAL_GPIO_Port, LED_NORMAL_Pin);
 8001626:	f44f 7100 	mov.w	r1, #512	; 0x200
 800162a:	4807      	ldr	r0, [pc, #28]	; (8001648 <main+0x38>)
 800162c:	f003 f829 	bl	8004682 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(LED_SPORT_GPIO_Port, LED_SPORT_Pin);
 8001630:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001634:	4804      	ldr	r0, [pc, #16]	; (8001648 <main+0x38>)
 8001636:	f003 f824 	bl	8004682 <HAL_GPIO_TogglePin>

  MX_APP_Init();
 800163a:	f7ff fc4f 	bl	8000edc <MX_APP_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	MX_APP_Process();
 800163e:	f7ff fc89 	bl	8000f54 <MX_APP_Process>
 8001642:	e7fc      	b.n	800163e <main+0x2e>
 8001644:	40020800 	.word	0x40020800
 8001648:	40020000 	.word	0x40020000

0800164c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b094      	sub	sp, #80	; 0x50
 8001650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001652:	f107 031c 	add.w	r3, r7, #28
 8001656:	2234      	movs	r2, #52	; 0x34
 8001658:	2100      	movs	r1, #0
 800165a:	4618      	mov	r0, r3
 800165c:	f005 f88e 	bl	800677c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001660:	f107 0308 	add.w	r3, r7, #8
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001670:	2300      	movs	r3, #0
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	4b23      	ldr	r3, [pc, #140]	; (8001704 <SystemClock_Config+0xb8>)
 8001676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001678:	4a22      	ldr	r2, [pc, #136]	; (8001704 <SystemClock_Config+0xb8>)
 800167a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167e:	6413      	str	r3, [r2, #64]	; 0x40
 8001680:	4b20      	ldr	r3, [pc, #128]	; (8001704 <SystemClock_Config+0xb8>)
 8001682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800168c:	2300      	movs	r3, #0
 800168e:	603b      	str	r3, [r7, #0]
 8001690:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <SystemClock_Config+0xbc>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001698:	4a1b      	ldr	r2, [pc, #108]	; (8001708 <SystemClock_Config+0xbc>)
 800169a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	4b19      	ldr	r3, [pc, #100]	; (8001708 <SystemClock_Config+0xbc>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016a8:	603b      	str	r3, [r7, #0]
 80016aa:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016ac:	2302      	movs	r3, #2
 80016ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016b0:	2301      	movs	r3, #1
 80016b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016b4:	2310      	movs	r3, #16
 80016b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016bc:	f107 031c 	add.w	r3, r7, #28
 80016c0:	4618      	mov	r0, r3
 80016c2:	f003 fa6f 	bl	8004ba4 <HAL_RCC_OscConfig>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80016cc:	f000 f81e 	bl	800170c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016d0:	230f      	movs	r3, #15
 80016d2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d8:	2300      	movs	r3, #0
 80016da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016e4:	f107 0308 	add.w	r3, r7, #8
 80016e8:	2100      	movs	r1, #0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f002 ffe4 	bl	80046b8 <HAL_RCC_ClockConfig>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80016f6:	f000 f809 	bl	800170c <Error_Handler>
  }
}
 80016fa:	bf00      	nop
 80016fc:	3750      	adds	r7, #80	; 0x50
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800
 8001708:	40007000 	.word	0x40007000

0800170c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001710:	b672      	cpsid	i
}
 8001712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001714:	e7fe      	b.n	8001714 <Error_Handler+0x8>

08001716 <PANTALLA_Process>:
 *
 * @param None
 * @retval None
 */
void PANTALLA_Process(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
    //PANTALLA_Demo();


}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <PANTALLA_HW_Init>:
/***********************************************************************************************************************
 * Public functions implementation
 **********************************************************************************************************************/

void PANTALLA_HW_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
    MX_USART6_UART_Init();
 8001728:	f000 f9ee 	bl	8001b08 <MX_USART6_UART_Init>
}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}

08001730 <PEDAL_Process>:
 *
 * @param   None
 * @retval  None
 */
void PEDAL_Process(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	/* Mapeo de lectura ADC pedal */
	PEDAL_Map_ADC_Reading();
 8001734:	f000 f810 	bl	8001758 <PEDAL_Map_ADC_Reading>

	/* Envío de valor de pedal mapeado a bus de salida CAN */
	PEDAL_Send_Pedal_Value(bus_data.pedal, &bus_can_output);
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <PEDAL_Process+0x20>)
 800173a:	edd3 7a02 	vldr	s15, [r3, #8]
 800173e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001742:	4904      	ldr	r1, [pc, #16]	; (8001754 <PEDAL_Process+0x24>)
 8001744:	ee17 0a90 	vmov	r0, s15
 8001748:	f000 f864 	bl	8001814 <PEDAL_Send_Pedal_Value>
}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000000 	.word	0x20000000
 8001754:	2000002c 	.word	0x2000002c

08001758 <PEDAL_Map_ADC_Reading>:
 *
 * @param None
 * @retval None
 */
static void PEDAL_Map_ADC_Reading(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
	if(flag_adc == ADC_CONV_COMPLETED)
 800175c:	4b28      	ldr	r3, [pc, #160]	; (8001800 <PEDAL_Map_ADC_Reading+0xa8>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d140      	bne.n	80017e6 <PEDAL_Map_ADC_Reading+0x8e>
	{
		/* Guarda lectura de ADC en bus de datos */
		bus_data.adc_reading = adc_buf[0];
 8001764:	4b27      	ldr	r3, [pc, #156]	; (8001804 <PEDAL_Map_ADC_Reading+0xac>)
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	4b27      	ldr	r3, [pc, #156]	; (8001808 <PEDAL_Map_ADC_Reading+0xb0>)
 800176c:	605a      	str	r2, [r3, #4]

		/* ADC reading mapping */
		if(bus_data.adc_reading < MIN_ADC_VAL)
 800176e:	4b26      	ldr	r3, [pc, #152]	; (8001808 <PEDAL_Map_ADC_Reading+0xb0>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001776:	d204      	bcs.n	8001782 <PEDAL_Map_ADC_Reading+0x2a>
		{
			bus_data.pedal = 0.0;
 8001778:	4b23      	ldr	r3, [pc, #140]	; (8001808 <PEDAL_Map_ADC_Reading+0xb0>)
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	e02e      	b.n	80017e0 <PEDAL_Map_ADC_Reading+0x88>
		}
		else if(bus_data.adc_reading > MAX_ADC_VAL)
 8001782:	4b21      	ldr	r3, [pc, #132]	; (8001808 <PEDAL_Map_ADC_Reading+0xb0>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f640 62d8 	movw	r2, #3800	; 0xed8
 800178a:	4293      	cmp	r3, r2
 800178c:	d903      	bls.n	8001796 <PEDAL_Map_ADC_Reading+0x3e>
		{
			bus_data.pedal = 100.0;
 800178e:	4b1e      	ldr	r3, [pc, #120]	; (8001808 <PEDAL_Map_ADC_Reading+0xb0>)
 8001790:	4a1e      	ldr	r2, [pc, #120]	; (800180c <PEDAL_Map_ADC_Reading+0xb4>)
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	e024      	b.n	80017e0 <PEDAL_Map_ADC_Reading+0x88>
		}
		else
		{
			bus_data.pedal = ((bus_data.adc_reading - MIN_ADC_VAL) / (MAX_ADC_VAL - MIN_ADC_VAL)) * 100;
 8001796:	4b1c      	ldr	r3, [pc, #112]	; (8001808 <PEDAL_Map_ADC_Reading+0xb0>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	4618      	mov	r0, r3
 800179c:	f7fe fe76 	bl	800048c <__aeabi_ui2d>
 80017a0:	a313      	add	r3, pc, #76	; (adr r3, 80017f0 <PEDAL_Map_ADC_Reading+0x98>)
 80017a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a6:	f7fe fd33 	bl	8000210 <__aeabi_dsub>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	a311      	add	r3, pc, #68	; (adr r3, 80017f8 <PEDAL_Map_ADC_Reading+0xa0>)
 80017b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b8:	f7ff f80c 	bl	80007d4 <__aeabi_ddiv>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4610      	mov	r0, r2
 80017c2:	4619      	mov	r1, r3
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <PEDAL_Map_ADC_Reading+0xb8>)
 80017ca:	f7fe fed9 	bl	8000580 <__aeabi_dmul>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	f7ff f8e5 	bl	80009a4 <__aeabi_d2f>
 80017da:	4603      	mov	r3, r0
 80017dc:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <PEDAL_Map_ADC_Reading+0xb0>)
 80017de:	6093      	str	r3, [r2, #8]
		}

		/* Clear ADC conversion flag */
		flag_adc = ADC_CONV_NOT_COMPLETED;
 80017e0:	4b07      	ldr	r3, [pc, #28]	; (8001800 <PEDAL_Map_ADC_Reading+0xa8>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	701a      	strb	r2, [r3, #0]
	}
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	f3af 8000 	nop.w
 80017f0:	00000000 	.word	0x00000000
 80017f4:	4072c000 	.word	0x4072c000
 80017f8:	00000000 	.word	0x00000000
 80017fc:	40ab5800 	.word	0x40ab5800
 8001800:	20000048 	.word	0x20000048
 8001804:	20000248 	.word	0x20000248
 8001808:	20000000 	.word	0x20000000
 800180c:	42c80000 	.word	0x42c80000
 8001810:	40590000 	.word	0x40590000

08001814 <PEDAL_Send_Pedal_Value>:
 *
 * @param to_send           Valor de pedal a enviar
 * @param bus_can_output    Puntero a estructura de tipo typedef_bus2_t (bus de salida can)
 */
static void PEDAL_Send_Pedal_Value(uint32_t to_send, typedef_bus2_t* bus_can_output)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
	bus_can_output->pedal = (uint8_t) to_send;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	b2da      	uxtb	r2, r3
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	701a      	strb	r2, [r3, #0]
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
	...

08001834 <PEDAL_HW_Init>:
/***********************************************************************************************************************
 * Public functions implementation
 **********************************************************************************************************************/

void PEDAL_HW_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
	/* Initialize DMA */
	MX_DMA_Init();
 8001838:	f7ff fdda 	bl	80013f0 <MX_DMA_Init>

	/* Initialize ADC1 */
	MX_ADC1_Init();
 800183c:	f7ff fa7e 	bl	8000d3c <MX_ADC1_Init>

	/* Initialize time base timer for ADC triggering */
	MX_TIM2_Init();
 8001840:	f000 f8a2 	bl	8001988 <MX_TIM2_Init>

	/* Start ADC with DMA */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8001844:	220a      	movs	r2, #10
 8001846:	4904      	ldr	r1, [pc, #16]	; (8001858 <PEDAL_HW_Init+0x24>)
 8001848:	4804      	ldr	r0, [pc, #16]	; (800185c <PEDAL_HW_Init+0x28>)
 800184a:	f000 fe65 	bl	8002518 <HAL_ADC_Start_DMA>

	/* Start time base trigger ADC timer */
	HAL_TIM_Base_Start(&htim2);
 800184e:	4804      	ldr	r0, [pc, #16]	; (8001860 <PEDAL_HW_Init+0x2c>)
 8001850:	f003 fc96 	bl	8005180 <HAL_TIM_Base_Start>
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000248 	.word	0x20000248
 800185c:	20000158 	.word	0x20000158
 8001860:	2000025c 	.word	0x2000025c

08001864 <HAL_ADC_ConvCpltCallback>:
 * Exported functions implementation
 **********************************************************************************************************************/

/* Called when buffer is completely filled */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	/* Turn on LED 3 (yellow LED) */
	BSP_LED_Toggle(LED3);
 800186c:	2002      	movs	r0, #2
 800186e:	f000 fb03 	bl	8001e78 <BSP_LED_Toggle>

	/* Start ADC DMA again */
	HAL_ADC_Start_DMA(hadc, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8001872:	220a      	movs	r2, #10
 8001874:	4905      	ldr	r1, [pc, #20]	; (800188c <HAL_ADC_ConvCpltCallback+0x28>)
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 fe4e 	bl	8002518 <HAL_ADC_Start_DMA>

	/* The flag indicates that the callback was called */
	flag_adc = ADC_CONV_COMPLETED;
 800187c:	4b04      	ldr	r3, [pc, #16]	; (8001890 <HAL_ADC_ConvCpltCallback+0x2c>)
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000248 	.word	0x20000248
 8001890:	20000048 	.word	0x20000048

08001894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <HAL_MspInit+0x4c>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	4a0f      	ldr	r2, [pc, #60]	; (80018e0 <HAL_MspInit+0x4c>)
 80018a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a8:	6453      	str	r3, [r2, #68]	; 0x44
 80018aa:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <HAL_MspInit+0x4c>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	603b      	str	r3, [r7, #0]
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <HAL_MspInit+0x4c>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	4a08      	ldr	r2, [pc, #32]	; (80018e0 <HAL_MspInit+0x4c>)
 80018c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c4:	6413      	str	r3, [r2, #64]	; 0x40
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_MspInit+0x4c>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ce:	603b      	str	r3, [r7, #0]
 80018d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800

080018e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <NMI_Handler+0x4>

080018ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ee:	e7fe      	b.n	80018ee <HardFault_Handler+0x4>

080018f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f4:	e7fe      	b.n	80018f4 <MemManage_Handler+0x4>

080018f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018fa:	e7fe      	b.n	80018fa <BusFault_Handler+0x4>

080018fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001900:	e7fe      	b.n	8001900 <UsageFault_Handler+0x4>

08001902 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001930:	f000 fc2a 	bl	8002188 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}

08001938 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800193c:	4802      	ldr	r0, [pc, #8]	; (8001948 <ADC_IRQHandler+0x10>)
 800193e:	f000 fcaa 	bl	8002296 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000158 	.word	0x20000158

0800194c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001950:	4802      	ldr	r0, [pc, #8]	; (800195c <TIM7_IRQHandler+0x10>)
 8001952:	f003 fe7f 	bl	8005654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200002a4 	.word	0x200002a4

08001960 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001964:	4802      	ldr	r0, [pc, #8]	; (8001970 <DMA2_Stream0_IRQHandler+0x10>)
 8001966:	f002 fa5d 	bl	8003e24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	200001a0 	.word	0x200001a0

08001974 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001978:	4802      	ldr	r0, [pc, #8]	; (8001984 <CAN2_RX0_IRQHandler+0x10>)
 800197a:	f001 fe0c 	bl	8003596 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000200 	.word	0x20000200

08001988 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800198e:	f107 0308 	add.w	r3, r7, #8
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800199c:	463b      	mov	r3, r7
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019a4:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <MX_TIM2_Init+0x98>)
 80019a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 80019ac:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <MX_TIM2_Init+0x98>)
 80019ae:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80019b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b4:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <MX_TIM2_Init+0x98>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80019ba:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <MX_TIM2_Init+0x98>)
 80019bc:	f242 720f 	movw	r2, #9999	; 0x270f
 80019c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c2:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <MX_TIM2_Init+0x98>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c8:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <MX_TIM2_Init+0x98>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019ce:	4814      	ldr	r0, [pc, #80]	; (8001a20 <MX_TIM2_Init+0x98>)
 80019d0:	f003 fb86 	bl	80050e0 <HAL_TIM_Base_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80019da:	f7ff fe97 	bl	800170c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019e4:	f107 0308 	add.w	r3, r7, #8
 80019e8:	4619      	mov	r1, r3
 80019ea:	480d      	ldr	r0, [pc, #52]	; (8001a20 <MX_TIM2_Init+0x98>)
 80019ec:	f003 fffc 	bl	80059e8 <HAL_TIM_ConfigClockSource>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80019f6:	f7ff fe89 	bl	800170c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019fa:	2320      	movs	r3, #32
 80019fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80019fe:	2380      	movs	r3, #128	; 0x80
 8001a00:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a02:	463b      	mov	r3, r7
 8001a04:	4619      	mov	r1, r3
 8001a06:	4806      	ldr	r0, [pc, #24]	; (8001a20 <MX_TIM2_Init+0x98>)
 8001a08:	f004 fbee 	bl	80061e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001a12:	f7ff fe7b 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a16:	bf00      	nop
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	2000025c 	.word	0x2000025c

08001a24 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a2a:	463b      	mov	r3, r7
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <MX_TIM7_Init+0x64>)
 8001a34:	4a15      	ldr	r2, [pc, #84]	; (8001a8c <MX_TIM7_Init+0x68>)
 8001a36:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8000-1;
 8001a38:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <MX_TIM7_Init+0x64>)
 8001a3a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001a3e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a40:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <MX_TIM7_Init+0x64>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8001a46:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <MX_TIM7_Init+0x64>)
 8001a48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a4c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <MX_TIM7_Init+0x64>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001a54:	480c      	ldr	r0, [pc, #48]	; (8001a88 <MX_TIM7_Init+0x64>)
 8001a56:	f003 fb43 	bl	80050e0 <HAL_TIM_Base_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001a60:	f7ff fe54 	bl	800170c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a64:	2300      	movs	r3, #0
 8001a66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001a6c:	463b      	mov	r3, r7
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4805      	ldr	r0, [pc, #20]	; (8001a88 <MX_TIM7_Init+0x64>)
 8001a72:	f004 fbb9 	bl	80061e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001a7c:	f7ff fe46 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	200002a4 	.word	0x200002a4
 8001a8c:	40001400 	.word	0x40001400

08001a90 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aa0:	d10e      	bne.n	8001ac0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	4b16      	ldr	r3, [pc, #88]	; (8001b00 <HAL_TIM_Base_MspInit+0x70>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	4a15      	ldr	r2, [pc, #84]	; (8001b00 <HAL_TIM_Base_MspInit+0x70>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab2:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <HAL_TIM_Base_MspInit+0x70>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001abe:	e01a      	b.n	8001af6 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM7)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a0f      	ldr	r2, [pc, #60]	; (8001b04 <HAL_TIM_Base_MspInit+0x74>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d115      	bne.n	8001af6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <HAL_TIM_Base_MspInit+0x70>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	4a0b      	ldr	r2, [pc, #44]	; (8001b00 <HAL_TIM_Base_MspInit+0x70>)
 8001ad4:	f043 0320 	orr.w	r3, r3, #32
 8001ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8001ada:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <HAL_TIM_Base_MspInit+0x70>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	f003 0320 	and.w	r3, r3, #32
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2100      	movs	r1, #0
 8001aea:	2037      	movs	r0, #55	; 0x37
 8001aec:	f002 f85d 	bl	8003baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001af0:	2037      	movs	r0, #55	; 0x37
 8001af2:	f002 f876 	bl	8003be2 <HAL_NVIC_EnableIRQ>
}
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40001400 	.word	0x40001400

08001b08 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <MX_USART6_UART_Init+0x4c>)
 8001b0e:	4a12      	ldr	r2, [pc, #72]	; (8001b58 <MX_USART6_UART_Init+0x50>)
 8001b10:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <MX_USART6_UART_Init+0x4c>)
 8001b14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b18:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <MX_USART6_UART_Init+0x4c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <MX_USART6_UART_Init+0x4c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001b26:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <MX_USART6_UART_Init+0x4c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001b2c:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <MX_USART6_UART_Init+0x4c>)
 8001b2e:	220c      	movs	r2, #12
 8001b30:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b32:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <MX_USART6_UART_Init+0x4c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <MX_USART6_UART_Init+0x4c>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001b3e:	4805      	ldr	r0, [pc, #20]	; (8001b54 <MX_USART6_UART_Init+0x4c>)
 8001b40:	f004 fbe2 	bl	8006308 <HAL_UART_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001b4a:	f7ff fddf 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	200002ec 	.word	0x200002ec
 8001b58:	40011400 	.word	0x40011400

08001b5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08a      	sub	sp, #40	; 0x28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a19      	ldr	r2, [pc, #100]	; (8001be0 <HAL_UART_MspInit+0x84>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d12b      	bne.n	8001bd6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <HAL_UART_MspInit+0x88>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	4a17      	ldr	r2, [pc, #92]	; (8001be4 <HAL_UART_MspInit+0x88>)
 8001b88:	f043 0320 	orr.w	r3, r3, #32
 8001b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <HAL_UART_MspInit+0x88>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	f003 0320 	and.w	r3, r3, #32
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <HAL_UART_MspInit+0x88>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a10      	ldr	r2, [pc, #64]	; (8001be4 <HAL_UART_MspInit+0x88>)
 8001ba4:	f043 0304 	orr.w	r3, r3, #4
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <HAL_UART_MspInit+0x88>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bb6:	23c0      	movs	r3, #192	; 0xc0
 8001bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001bc6:	2308      	movs	r3, #8
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4805      	ldr	r0, [pc, #20]	; (8001be8 <HAL_UART_MspInit+0x8c>)
 8001bd2:	f002 fb91 	bl	80042f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001bd6:	bf00      	nop
 8001bd8:	3728      	adds	r7, #40	; 0x28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40011400 	.word	0x40011400
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40020800 	.word	0x40020800

08001bec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bf0:	480d      	ldr	r0, [pc, #52]	; (8001c28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bf2:	490e      	ldr	r1, [pc, #56]	; (8001c2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bf4:	4a0e      	ldr	r2, [pc, #56]	; (8001c30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bf8:	e002      	b.n	8001c00 <LoopCopyDataInit>

08001bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bfe:	3304      	adds	r3, #4

08001c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c04:	d3f9      	bcc.n	8001bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c06:	4a0b      	ldr	r2, [pc, #44]	; (8001c34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c08:	4c0b      	ldr	r4, [pc, #44]	; (8001c38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c0c:	e001      	b.n	8001c12 <LoopFillZerobss>

08001c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c10:	3204      	adds	r2, #4

08001c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c14:	d3fb      	bcc.n	8001c0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c16:	f000 fa53 	bl	80020c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c1a:	f004 fd8b 	bl	8006734 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c1e:	f7ff fcf7 	bl	8001610 <main>
  bx  lr    
 8001c22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c2c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001c30:	080067dc 	.word	0x080067dc
  ldr r2, =_sbss
 8001c34:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001c38:	20000334 	.word	0x20000334

08001c3c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c3c:	e7fe      	b.n	8001c3c <CAN1_RX0_IRQHandler>
	...

08001c40 <BSP_BUZZER_Init>:
 *
 * @param None
 * @retval BSP status
 */
int32_t BSP_BUZZER_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b092      	sub	sp, #72	; 0x48
 8001c44:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]
 8001c52:	60da      	str	r2, [r3, #12]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]
 8001c64:	615a      	str	r2, [r3, #20]
 8001c66:	619a      	str	r2, [r3, #24]

	/* Configure the Buzzer PWM Timer */
    BUZZER_htim.Instance = BUZZER_PWM_TIM_INSTANCE;
 8001c68:	4b35      	ldr	r3, [pc, #212]	; (8001d40 <BSP_BUZZER_Init+0x100>)
 8001c6a:	4a36      	ldr	r2, [pc, #216]	; (8001d44 <BSP_BUZZER_Init+0x104>)
 8001c6c:	601a      	str	r2, [r3, #0]
    BUZZER_htim.Init.Prescaler = 0;
 8001c6e:	4b34      	ldr	r3, [pc, #208]	; (8001d40 <BSP_BUZZER_Init+0x100>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	605a      	str	r2, [r3, #4]
    BUZZER_htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c74:	4b32      	ldr	r3, [pc, #200]	; (8001d40 <BSP_BUZZER_Init+0x100>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
    BUZZER_htim.Init.Period = 39062;
 8001c7a:	4b31      	ldr	r3, [pc, #196]	; (8001d40 <BSP_BUZZER_Init+0x100>)
 8001c7c:	f649 0296 	movw	r2, #39062	; 0x9896
 8001c80:	60da      	str	r2, [r3, #12]
    BUZZER_htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c82:	4b2f      	ldr	r3, [pc, #188]	; (8001d40 <BSP_BUZZER_Init+0x100>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	611a      	str	r2, [r3, #16]
    BUZZER_htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c88:	4b2d      	ldr	r3, [pc, #180]	; (8001d40 <BSP_BUZZER_Init+0x100>)
 8001c8a:	2280      	movs	r2, #128	; 0x80
 8001c8c:	619a      	str	r2, [r3, #24]
    HAL_TIM_Base_Init(&BUZZER_htim);
 8001c8e:	482c      	ldr	r0, [pc, #176]	; (8001d40 <BSP_BUZZER_Init+0x100>)
 8001c90:	f003 fa26 	bl	80050e0 <HAL_TIM_Base_Init>

    BUZZER_TIM_CLK_ENABLE();	// TIM peripheral clock enable
 8001c94:	2300      	movs	r3, #0
 8001c96:	607b      	str	r3, [r7, #4]
 8001c98:	4b2b      	ldr	r3, [pc, #172]	; (8001d48 <BSP_BUZZER_Init+0x108>)
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	4a2a      	ldr	r2, [pc, #168]	; (8001d48 <BSP_BUZZER_Init+0x108>)
 8001c9e:	f043 0320 	orr.w	r3, r3, #32
 8001ca2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca4:	4b28      	ldr	r3, [pc, #160]	; (8001d48 <BSP_BUZZER_Init+0x108>)
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	f003 0320 	and.w	r3, r3, #32
 8001cac:	607b      	str	r3, [r7, #4]
 8001cae:	687b      	ldr	r3, [r7, #4]

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cb4:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_TIM_ConfigClockSource(&BUZZER_htim, &sClockSourceConfig);
 8001cb6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4820      	ldr	r0, [pc, #128]	; (8001d40 <BSP_BUZZER_Init+0x100>)
 8001cbe:	f003 fe93 	bl	80059e8 <HAL_TIM_ConfigClockSource>

    HAL_TIM_PWM_Init(&BUZZER_htim);
 8001cc2:	481f      	ldr	r0, [pc, #124]	; (8001d40 <BSP_BUZZER_Init+0x100>)
 8001cc4:	f003 fb34 	bl	8005330 <HAL_TIM_PWM_Init>

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cc8:	2360      	movs	r3, #96	; 0x60
 8001cca:	61fb      	str	r3, [r7, #28]
    sConfigOC.Pulse = 3906;
 8001ccc:	f640 7342 	movw	r3, #3906	; 0xf42
 8001cd0:	623b      	str	r3, [r7, #32]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_TIM_PWM_ConfigChannel(&BUZZER_htim, &sConfigOC, BUZZER_PWM_TIM_CHANNEL);
 8001cda:	f107 031c 	add.w	r3, r7, #28
 8001cde:	2200      	movs	r2, #0
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4817      	ldr	r0, [pc, #92]	; (8001d40 <BSP_BUZZER_Init+0x100>)
 8001ce4:	f003 fdbe 	bl	8005864 <HAL_TIM_PWM_ConfigChannel>

    /* HAL_TIM_MspPostInit:  */

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	f107 0308 	add.w	r3, r7, #8
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]

    BUZZER_GPIO_CLK_ENABLE();
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	603b      	str	r3, [r7, #0]
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <BSP_BUZZER_Init+0x108>)
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d00:	4a11      	ldr	r2, [pc, #68]	; (8001d48 <BSP_BUZZER_Init+0x108>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	6313      	str	r3, [r2, #48]	; 0x30
 8001d08:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <BSP_BUZZER_Init+0x108>)
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	603b      	str	r3, [r7, #0]
 8001d12:	683b      	ldr	r3, [r7, #0]
    /** BUZZER GPIO Configuration
        PA2     ------> TIM9_CH1
     */
    GPIO_InitStruct.Pin = BUZZER_GPIO_PIN;
 8001d14:	2304      	movs	r3, #4
 8001d16:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001d24:	2303      	movs	r3, #3
 8001d26:	61bb      	str	r3, [r7, #24]

    HAL_GPIO_Init(BUZZER_GPIO_PORT, &GPIO_InitStruct);
 8001d28:	f107 0308 	add.w	r3, r7, #8
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4807      	ldr	r0, [pc, #28]	; (8001d4c <BSP_BUZZER_Init+0x10c>)
 8001d30:	f002 fae2 	bl	80042f8 <HAL_GPIO_Init>

    return BSP_ERROR_NONE;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3748      	adds	r7, #72	; 0x48
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	2000008c 	.word	0x2000008c
 8001d44:	40014000 	.word	0x40014000
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40020000 	.word	0x40020000

08001d50 <BSP_BUZZER_On>:
 *
 * @param None
 * @return BSP Status
 */
int32_t BSP_BUZZER_On(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&BUZZER_htim, TIM_CHANNEL_1);
 8001d54:	2100      	movs	r1, #0
 8001d56:	4803      	ldr	r0, [pc, #12]	; (8001d64 <BSP_BUZZER_On+0x14>)
 8001d58:	f003 fb44 	bl	80053e4 <HAL_TIM_PWM_Start>

    return BSP_ERROR_NONE;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	2000008c 	.word	0x2000008c

08001d68 <BSP_BUZZER_Off>:
 *
 * @param None
 * @return BSP Status
 */
int32_t BSP_BUZZER_Off(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&BUZZER_htim, TIM_CHANNEL_1);
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	4803      	ldr	r0, [pc, #12]	; (8001d7c <BSP_BUZZER_Off+0x14>)
 8001d70:	f003 fc00 	bl	8005574 <HAL_TIM_PWM_Stop>

    return BSP_ERROR_NONE;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	2000008c 	.word	0x2000008c

08001d80 <BSP_LED_Init>:
 *          @arg LED3
 *
 * @return BSP Status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	71fb      	strb	r3, [r7, #7]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8a:	f107 030c 	add.w	r3, r7, #12
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]
 8001d94:	609a      	str	r2, [r3, #8]
 8001d96:	60da      	str	r2, [r3, #12]
 8001d98:	611a      	str	r2, [r3, #16]

    /* Enable the GPIO_LED Clock */
    LEDx_GPIO_CLK_ENABLE(Led);
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <BSP_LED_Init+0x84>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a18      	ldr	r2, [pc, #96]	; (8001e04 <BSP_LED_Init+0x84>)
 8001da4:	f043 0308 	orr.w	r3, r3, #8
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <BSP_LED_Init+0x84>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	68bb      	ldr	r3, [r7, #8]

    /* Configure the GPIO_LED pin */
    GPIO_InitStruct.Pin = LED_PIN[Led];
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	4a13      	ldr	r2, [pc, #76]	; (8001e08 <BSP_LED_Init+0x88>)
 8001dba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001dbe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	61bb      	str	r3, [r7, #24]

    HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	4a0f      	ldr	r2, [pc, #60]	; (8001e0c <BSP_LED_Init+0x8c>)
 8001dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd4:	f107 020c 	add.w	r2, r7, #12
 8001dd8:	4611      	mov	r1, r2
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f002 fa8c 	bl	80042f8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <BSP_LED_Init+0x8c>)
 8001de4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	4a07      	ldr	r2, [pc, #28]	; (8001e08 <BSP_LED_Init+0x88>)
 8001dec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001df0:	2201      	movs	r2, #1
 8001df2:	4619      	mov	r1, r3
 8001df4:	f002 fc2c 	bl	8004650 <HAL_GPIO_WritePin>

    return BSP_ERROR_NONE;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3720      	adds	r7, #32
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40023800 	.word	0x40023800
 8001e08:	080067a4 	.word	0x080067a4
 8001e0c:	2000004c 	.word	0x2000004c

08001e10 <BSP_LED_On>:
 *          @arg LED2
 *          @arg LED3
 * @return BSP Status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	4a07      	ldr	r2, [pc, #28]	; (8001e3c <BSP_LED_On+0x2c>)
 8001e1e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	4a06      	ldr	r2, [pc, #24]	; (8001e40 <BSP_LED_On+0x30>)
 8001e26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f002 fc0f 	bl	8004650 <HAL_GPIO_WritePin>

    return BSP_ERROR_NONE;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	2000004c 	.word	0x2000004c
 8001e40:	080067a4 	.word	0x080067a4

08001e44 <BSP_LED_Off>:
 *          @arg LED2
 *          @arg LED3
 * @return BSP Status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	4a07      	ldr	r2, [pc, #28]	; (8001e70 <BSP_LED_Off+0x2c>)
 8001e52:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	4a06      	ldr	r2, [pc, #24]	; (8001e74 <BSP_LED_Off+0x30>)
 8001e5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	4619      	mov	r1, r3
 8001e62:	f002 fbf5 	bl	8004650 <HAL_GPIO_WritePin>

    return BSP_ERROR_NONE;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	2000004c 	.word	0x2000004c
 8001e74:	080067a4 	.word	0x080067a4

08001e78 <BSP_LED_Toggle>:
 *          @arg LED2
 *          @arg LED3
 * @return BSP Status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	4a07      	ldr	r2, [pc, #28]	; (8001ea4 <BSP_LED_Toggle+0x2c>)
 8001e86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	4906      	ldr	r1, [pc, #24]	; (8001ea8 <BSP_LED_Toggle+0x30>)
 8001e8e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001e92:	4619      	mov	r1, r3
 8001e94:	4610      	mov	r0, r2
 8001e96:	f002 fbf4 	bl	8004682 <HAL_GPIO_TogglePin>

    return BSP_ERROR_NONE;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	2000004c 	.word	0x2000004c
 8001ea8:	080067a4 	.word	0x080067a4

08001eac <CAN_API_Init>:
                        can_rtr_t RTR,
                        init_ll_can_t Fn_Init_Can,
                        send_can_data_t Fn_Send_Can_Data,
                        read_can_data_t Fn_Read_Can_Data,
                        get_msg_count_t Fn_Get_Msg_Count)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	607b      	str	r3, [r7, #4]
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	72fb      	strb	r3, [r7, #11]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	72bb      	strb	r3, [r7, #10]
    can_status_t status;

    obj->Fn_Init_Can = Fn_Init_Can;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	611a      	str	r2, [r3, #16]

    obj->Fn_Send_Can_Data = Fn_Send_Can_Data;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6a3a      	ldr	r2, [r7, #32]
 8001ec8:	615a      	str	r2, [r3, #20]

    obj->Fn_Read_Can_Data = Fn_Read_Can_Data;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ece:	619a      	str	r2, [r3, #24]

    obj->Fn_Get_Msg_Count = Fn_Get_Msg_Count;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ed4:	61da      	str	r2, [r3, #28]

    obj->Frame.IDE = IDE;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	7afa      	ldrb	r2, [r7, #11]
 8001eda:	711a      	strb	r2, [r3, #4]
    obj->Frame.RTR = RTR;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	7aba      	ldrb	r2, [r7, #10]
 8001ee0:	715a      	strb	r2, [r3, #5]
    obj->Frame.payload_length = 0;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	73da      	strb	r2, [r3, #15]

    status = obj->Fn_Init_Can();
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	4798      	blx	r3
 8001eee:	4603      	mov	r3, r0
 8001ef0:	75fb      	strb	r3, [r7, #23]

    return status;
 8001ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <CAN_Wrapper_Init>:
 *
 * @param   None
 * @retval  None
 */
can_status_t CAN_Wrapper_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
    CAN2_Init();					// CAN2 peripheral initialization
 8001f00:	f000 f85e 	bl	8001fc0 <CAN2_Init>
    CAN2_FilterConfig();    		// CAN2 filter configuration
 8001f04:	f000 f890 	bl	8002028 <CAN2_FilterConfig>
	CAN2_ActivateNotification();	// CAN2 enable interrupt
 8001f08:	f000 f8c6 	bl	8002098 <CAN2_ActivateNotification>
	CAN2_Start();					// CAN2 start the CAN module
 8001f0c:	f000 f8ce 	bl	80020ac <CAN2_Start>

	return CAN_STATUS_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <CAN_Wrapper_TransmitData>:
 * @param dlc Length of frame
 * @param data Data to transmit
 * @retval None
 */
can_status_t CAN_Wrapper_TransmitData(uint32_t id, uint8_t ide, uint8_t rtr, uint8_t dlc, uint8_t *data)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	4608      	mov	r0, r1
 8001f22:	4611      	mov	r1, r2
 8001f24:	461a      	mov	r2, r3
 8001f26:	4603      	mov	r3, r0
 8001f28:	70fb      	strb	r3, [r7, #3]
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	70bb      	strb	r3, [r7, #2]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	707b      	strb	r3, [r7, #1]
    uint32_t mailbox;

	txHeader.StdId = id;            // standard identifier value
 8001f32:	4a11      	ldr	r2, [pc, #68]	; (8001f78 <CAN_Wrapper_TransmitData+0x60>)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6013      	str	r3, [r2, #0]
	txHeader.DLC = dlc; 			// length of frame
 8001f38:	787b      	ldrb	r3, [r7, #1]
 8001f3a:	4a0f      	ldr	r2, [pc, #60]	; (8001f78 <CAN_Wrapper_TransmitData+0x60>)
 8001f3c:	6113      	str	r3, [r2, #16]
	txHeader.IDE = CAN_ID_STD; 		// type of identifier
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <CAN_Wrapper_TransmitData+0x60>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;    // data frame
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <CAN_Wrapper_TransmitData+0x60>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	60da      	str	r2, [r3, #12]

	HAL_CAN_AddTxMessage(&hcan2, &txHeader, data, &mailbox);
 8001f4a:	f107 030c 	add.w	r3, r7, #12
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4909      	ldr	r1, [pc, #36]	; (8001f78 <CAN_Wrapper_TransmitData+0x60>)
 8001f52:	480a      	ldr	r0, [pc, #40]	; (8001f7c <CAN_Wrapper_TransmitData+0x64>)
 8001f54:	f001 f8e8 	bl	8003128 <HAL_CAN_AddTxMessage>

	if(mailbox == CAN_TX_MAILBOX2)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	d107      	bne.n	8001f6e <CAN_Wrapper_TransmitData+0x56>
    {
		while( HAL_CAN_IsTxMessagePending(&hcan2, CAN_TX_MAILBOX0));
 8001f5e:	bf00      	nop
 8001f60:	2101      	movs	r1, #1
 8001f62:	4806      	ldr	r0, [pc, #24]	; (8001f7c <CAN_Wrapper_TransmitData+0x64>)
 8001f64:	f001 f9bb 	bl	80032de <HAL_CAN_IsTxMessagePending>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f8      	bne.n	8001f60 <CAN_Wrapper_TransmitData+0x48>
	}

	return CAN_STATUS_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000124 	.word	0x20000124
 8001f7c:	200000d4 	.word	0x200000d4

08001f80 <CAN_Wrapper_ReceiveData>:
 * @param id Received identifier
 * @param data Received data
 * @retval  None
 */
can_status_t CAN_Wrapper_ReceiveData(uint32_t *id, uint8_t *data)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
    HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &rxHeader, data);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	4a06      	ldr	r2, [pc, #24]	; (8001fa8 <CAN_Wrapper_ReceiveData+0x28>)
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4806      	ldr	r0, [pc, #24]	; (8001fac <CAN_Wrapper_ReceiveData+0x2c>)
 8001f92:	f001 f9c8 	bl	8003326 <HAL_CAN_GetRxMessage>

    *id = rxHeader.StdId;	// received standard identifier
 8001f96:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <CAN_Wrapper_ReceiveData+0x28>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	601a      	str	r2, [r3, #0]

	return CAN_STATUS_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	2000013c 	.word	0x2000013c
 8001fac:	200000d4 	.word	0x200000d4

08001fb0 <CAN_Wrapper_DataCount>:
 * No es static, por lo que puede ser usada por otros archivos.
 *
 * @return can_status_t
 */
can_status_t CAN_Wrapper_DataCount(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
	return CAN_STATUS_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <CAN2_Init>:
 *
 * @param None
 * @retval None
 */
static void CAN2_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
	hcan2.Instance = CAN2;
 8001fc4:	4b16      	ldr	r3, [pc, #88]	; (8002020 <CAN2_Init+0x60>)
 8001fc6:	4a17      	ldr	r2, [pc, #92]	; (8002024 <CAN2_Init+0x64>)
 8001fc8:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 16;
 8001fca:	4b15      	ldr	r3, [pc, #84]	; (8002020 <CAN2_Init+0x60>)
 8001fcc:	2210      	movs	r2, #16
 8001fce:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001fd0:	4b13      	ldr	r3, [pc, #76]	; (8002020 <CAN2_Init+0x60>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001fd6:	4b12      	ldr	r3, [pc, #72]	; (8002020 <CAN2_Init+0x60>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001fdc:	4b10      	ldr	r3, [pc, #64]	; (8002020 <CAN2_Init+0x60>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001fe2:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <CAN2_Init+0x60>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 8001fe8:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <CAN2_Init+0x60>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 8001fee:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <CAN2_Init+0x60>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8001ff4:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <CAN2_Init+0x60>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <CAN2_Init+0x60>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8002000:	4b07      	ldr	r3, [pc, #28]	; (8002020 <CAN2_Init+0x60>)
 8002002:	2200      	movs	r2, #0
 8002004:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <CAN2_Init+0x60>)
 8002008:	2200      	movs	r2, #0
 800200a:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800200c:	4804      	ldr	r0, [pc, #16]	; (8002020 <CAN2_Init+0x60>)
 800200e:	f000 fe6b 	bl	8002ce8 <HAL_CAN_Init>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <CAN2_Init+0x5c>
	{
		Error_Handler();
 8002018:	f7ff fb78 	bl	800170c <Error_Handler>
	}
}
 800201c:	bf00      	nop
 800201e:	bd80      	pop	{r7, pc}
 8002020:	200000d4 	.word	0x200000d4
 8002024:	40006800 	.word	0x40006800

08002028 <CAN2_FilterConfig>:
 *
 * @param None
 * @retval None
 */
static void CAN2_FilterConfig(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
	aFilterConfig.FilterBank = 0;
 800202c:	4b18      	ldr	r3, [pc, #96]	; (8002090 <CAN2_FilterConfig+0x68>)
 800202e:	2200      	movs	r2, #0
 8002030:	615a      	str	r2, [r3, #20]
	aFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8002032:	4b17      	ldr	r3, [pc, #92]	; (8002090 <CAN2_FilterConfig+0x68>)
 8002034:	2201      	movs	r2, #1
 8002036:	621a      	str	r2, [r3, #32]
	aFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002038:	4b15      	ldr	r3, [pc, #84]	; (8002090 <CAN2_FilterConfig+0x68>)
 800203a:	2200      	movs	r2, #0
 800203c:	611a      	str	r2, [r3, #16]
	aFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800203e:	4b14      	ldr	r3, [pc, #80]	; (8002090 <CAN2_FilterConfig+0x68>)
 8002040:	2200      	movs	r2, #0
 8002042:	619a      	str	r2, [r3, #24]
	aFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8002044:	4b12      	ldr	r3, [pc, #72]	; (8002090 <CAN2_FilterConfig+0x68>)
 8002046:	2200      	movs	r2, #0
 8002048:	61da      	str	r2, [r3, #28]
	aFilterConfig.SlaveStartFilterBank = 14;
 800204a:	4b11      	ldr	r3, [pc, #68]	; (8002090 <CAN2_FilterConfig+0x68>)
 800204c:	220e      	movs	r2, #14
 800204e:	625a      	str	r2, [r3, #36]	; 0x24

	//aFilterConfig.FilterIdHigh = ID_PEDAL<<5;
	aFilterConfig.FilterIdLow = 0x000;
 8002050:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <CAN2_FilterConfig+0x68>)
 8002052:	2200      	movs	r2, #0
 8002054:	605a      	str	r2, [r3, #4]
	//aFilterConfig.FilterMaskIdHigh = ID_PEDAL<<5;
	aFilterConfig.FilterMaskIdLow = 0x000;
 8002056:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <CAN2_FilterConfig+0x68>)
 8002058:	2200      	movs	r2, #0
 800205a:	60da      	str	r2, [r3, #12]

	HAL_CAN_ConfigFilter(&hcan2, &aFilterConfig);
 800205c:	490c      	ldr	r1, [pc, #48]	; (8002090 <CAN2_FilterConfig+0x68>)
 800205e:	480d      	ldr	r0, [pc, #52]	; (8002094 <CAN2_FilterConfig+0x6c>)
 8002060:	f000 ff3e 	bl	8002ee0 <HAL_CAN_ConfigFilter>

	aFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8002064:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <CAN2_FilterConfig+0x68>)
 8002066:	2201      	movs	r2, #1
 8002068:	621a      	str	r2, [r3, #32]
	aFilterConfig.FilterBank = 1;
 800206a:	4b09      	ldr	r3, [pc, #36]	; (8002090 <CAN2_FilterConfig+0x68>)
 800206c:	2201      	movs	r2, #1
 800206e:	615a      	str	r2, [r3, #20]
	aFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002070:	4b07      	ldr	r3, [pc, #28]	; (8002090 <CAN2_FilterConfig+0x68>)
 8002072:	2200      	movs	r2, #0
 8002074:	611a      	str	r2, [r3, #16]
	aFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8002076:	4b06      	ldr	r3, [pc, #24]	; (8002090 <CAN2_FilterConfig+0x68>)
 8002078:	2201      	movs	r2, #1
 800207a:	619a      	str	r2, [r3, #24]
	aFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 800207c:	4b04      	ldr	r3, [pc, #16]	; (8002090 <CAN2_FilterConfig+0x68>)
 800207e:	2200      	movs	r2, #0
 8002080:	61da      	str	r2, [r3, #28]
	//aFilterConfig.FilterIdLow = ID_POTENCIA_BMS<<5;
	//aFilterConfig.FilterMaskIdHigh = ID_NIVEL_BATERIA_BMS<<5;
	//aFilterConfig.FilterMaskIdLow = ID_VELOCIDAD_INV<<5;
	//aFilterConfig.SlaveStartFilterBank = 14;

	HAL_CAN_ConfigFilter(&hcan2, &aFilterConfig);
 8002082:	4903      	ldr	r1, [pc, #12]	; (8002090 <CAN2_FilterConfig+0x68>)
 8002084:	4803      	ldr	r0, [pc, #12]	; (8002094 <CAN2_FilterConfig+0x6c>)
 8002086:	f000 ff2b 	bl	8002ee0 <HAL_CAN_ConfigFilter>
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	200000fc 	.word	0x200000fc
 8002094:	200000d4 	.word	0x200000d4

08002098 <CAN2_ActivateNotification>:
 *
 * @param None
 * @retval None
 */
static void CAN2_ActivateNotification(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 800209c:	2102      	movs	r1, #2
 800209e:	4802      	ldr	r0, [pc, #8]	; (80020a8 <CAN2_ActivateNotification+0x10>)
 80020a0:	f001 fa53 	bl	800354a <HAL_CAN_ActivateNotification>
}
 80020a4:	bf00      	nop
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	200000d4 	.word	0x200000d4

080020ac <CAN2_Start>:
 *
 * @param None
 * @retval None
 */
static void CAN2_Start(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
	HAL_CAN_Start(&hcan2);
 80020b0:	4802      	ldr	r0, [pc, #8]	; (80020bc <CAN2_Start+0x10>)
 80020b2:	f000 fff5 	bl	80030a0 <HAL_CAN_Start>
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	200000d4 	.word	0x200000d4

080020c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020c4:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <SystemInit+0x20>)
 80020c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ca:	4a05      	ldr	r2, [pc, #20]	; (80020e0 <SystemInit+0x20>)
 80020cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020e8:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <HAL_Init+0x40>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a0d      	ldr	r2, [pc, #52]	; (8002124 <HAL_Init+0x40>)
 80020ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020f4:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <HAL_Init+0x40>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <HAL_Init+0x40>)
 80020fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002100:	4b08      	ldr	r3, [pc, #32]	; (8002124 <HAL_Init+0x40>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a07      	ldr	r2, [pc, #28]	; (8002124 <HAL_Init+0x40>)
 8002106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800210a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800210c:	2003      	movs	r0, #3
 800210e:	f001 fd41 	bl	8003b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002112:	200f      	movs	r0, #15
 8002114:	f000 f808 	bl	8002128 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002118:	f7ff fbbc 	bl	8001894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40023c00 	.word	0x40023c00

08002128 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002130:	4b12      	ldr	r3, [pc, #72]	; (800217c <HAL_InitTick+0x54>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b12      	ldr	r3, [pc, #72]	; (8002180 <HAL_InitTick+0x58>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	4619      	mov	r1, r3
 800213a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800213e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002142:	fbb2 f3f3 	udiv	r3, r2, r3
 8002146:	4618      	mov	r0, r3
 8002148:	f001 fd59 	bl	8003bfe <HAL_SYSTICK_Config>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e00e      	b.n	8002174 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b0f      	cmp	r3, #15
 800215a:	d80a      	bhi.n	8002172 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800215c:	2200      	movs	r2, #0
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	f04f 30ff 	mov.w	r0, #4294967295
 8002164:	f001 fd21 	bl	8003baa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002168:	4a06      	ldr	r2, [pc, #24]	; (8002184 <HAL_InitTick+0x5c>)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	e000      	b.n	8002174 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
}
 8002174:	4618      	mov	r0, r3
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20000058 	.word	0x20000058
 8002180:	20000060 	.word	0x20000060
 8002184:	2000005c 	.word	0x2000005c

08002188 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800218c:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <HAL_IncTick+0x20>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	461a      	mov	r2, r3
 8002192:	4b06      	ldr	r3, [pc, #24]	; (80021ac <HAL_IncTick+0x24>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4413      	add	r3, r2
 8002198:	4a04      	ldr	r2, [pc, #16]	; (80021ac <HAL_IncTick+0x24>)
 800219a:	6013      	str	r3, [r2, #0]
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	20000060 	.word	0x20000060
 80021ac:	20000330 	.word	0x20000330

080021b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return uwTick;
 80021b4:	4b03      	ldr	r3, [pc, #12]	; (80021c4 <HAL_GetTick+0x14>)
 80021b6:	681b      	ldr	r3, [r3, #0]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	20000330 	.word	0x20000330

080021c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021d0:	f7ff ffee 	bl	80021b0 <HAL_GetTick>
 80021d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e0:	d005      	beq.n	80021ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021e2:	4b0a      	ldr	r3, [pc, #40]	; (800220c <HAL_Delay+0x44>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4413      	add	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021ee:	bf00      	nop
 80021f0:	f7ff ffde 	bl	80021b0 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d8f7      	bhi.n	80021f0 <HAL_Delay+0x28>
  {
  }
}
 8002200:	bf00      	nop
 8002202:	bf00      	nop
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20000060 	.word	0x20000060

08002210 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002218:	2300      	movs	r3, #0
 800221a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e033      	b.n	800228e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	2b00      	cmp	r3, #0
 800222c:	d109      	bne.n	8002242 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7fe fdd6 	bl	8000de0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f003 0310 	and.w	r3, r3, #16
 800224a:	2b00      	cmp	r3, #0
 800224c:	d118      	bne.n	8002280 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002256:	f023 0302 	bic.w	r3, r3, #2
 800225a:	f043 0202 	orr.w	r2, r3, #2
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 fbb8 	bl	80029d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	f023 0303 	bic.w	r3, r3, #3
 8002276:	f043 0201 	orr.w	r2, r3, #1
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	641a      	str	r2, [r3, #64]	; 0x40
 800227e:	e001      	b.n	8002284 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800228c:	7bfb      	ldrb	r3, [r7, #15]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b084      	sub	sp, #16
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	2300      	movs	r3, #0
 80022a4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	bf0c      	ite	eq
 80022b4:	2301      	moveq	r3, #1
 80022b6:	2300      	movne	r3, #0
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 0320 	and.w	r3, r3, #32
 80022c6:	2b20      	cmp	r3, #32
 80022c8:	bf0c      	ite	eq
 80022ca:	2301      	moveq	r3, #1
 80022cc:	2300      	movne	r3, #0
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d049      	beq.n	800236c <HAL_ADC_IRQHandler+0xd6>
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d046      	beq.n	800236c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f003 0310 	and.w	r3, r3, #16
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d105      	bne.n	80022f6 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d12b      	bne.n	800235c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002308:	2b00      	cmp	r3, #0
 800230a:	d127      	bne.n	800235c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002312:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002316:	2b00      	cmp	r3, #0
 8002318:	d006      	beq.n	8002328 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002324:	2b00      	cmp	r3, #0
 8002326:	d119      	bne.n	800235c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0220 	bic.w	r2, r2, #32
 8002336:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002348:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d105      	bne.n	800235c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	f043 0201 	orr.w	r2, r3, #1
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff fa81 	bl	8001864 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f06f 0212 	mvn.w	r2, #18
 800236a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0304 	and.w	r3, r3, #4
 8002376:	2b04      	cmp	r3, #4
 8002378:	bf0c      	ite	eq
 800237a:	2301      	moveq	r3, #1
 800237c:	2300      	movne	r3, #0
 800237e:	b2db      	uxtb	r3, r3
 8002380:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800238c:	2b80      	cmp	r3, #128	; 0x80
 800238e:	bf0c      	ite	eq
 8002390:	2301      	moveq	r3, #1
 8002392:	2300      	movne	r3, #0
 8002394:	b2db      	uxtb	r3, r3
 8002396:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d057      	beq.n	800244e <HAL_ADC_IRQHandler+0x1b8>
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d054      	beq.n	800244e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	f003 0310 	and.w	r3, r3, #16
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d105      	bne.n	80023bc <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d139      	bne.n	800243e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d006      	beq.n	80023e6 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d12b      	bne.n	800243e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d124      	bne.n	800243e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d11d      	bne.n	800243e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002406:	2b00      	cmp	r3, #0
 8002408:	d119      	bne.n	800243e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002418:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d105      	bne.n	800243e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f043 0201 	orr.w	r2, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 fc48 	bl	8002cd4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f06f 020c 	mvn.w	r2, #12
 800244c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b01      	cmp	r3, #1
 800245a:	bf0c      	ite	eq
 800245c:	2301      	moveq	r3, #1
 800245e:	2300      	movne	r3, #0
 8002460:	b2db      	uxtb	r3, r3
 8002462:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246e:	2b40      	cmp	r3, #64	; 0x40
 8002470:	bf0c      	ite	eq
 8002472:	2301      	moveq	r3, #1
 8002474:	2300      	movne	r3, #0
 8002476:	b2db      	uxtb	r3, r3
 8002478:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d017      	beq.n	80024b0 <HAL_ADC_IRQHandler+0x21a>
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d014      	beq.n	80024b0 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b01      	cmp	r3, #1
 8002492:	d10d      	bne.n	80024b0 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f953 	bl	800274c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f06f 0201 	mvn.w	r2, #1
 80024ae:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0320 	and.w	r3, r3, #32
 80024ba:	2b20      	cmp	r3, #32
 80024bc:	bf0c      	ite	eq
 80024be:	2301      	moveq	r3, #1
 80024c0:	2300      	movne	r3, #0
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024d4:	bf0c      	ite	eq
 80024d6:	2301      	moveq	r3, #1
 80024d8:	2300      	movne	r3, #0
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d015      	beq.n	8002510 <HAL_ADC_IRQHandler+0x27a>
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d012      	beq.n	8002510 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ee:	f043 0202 	orr.w	r2, r3, #2
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f06f 0220 	mvn.w	r2, #32
 80024fe:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 f92d 	bl	8002760 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f06f 0220 	mvn.w	r2, #32
 800250e:	601a      	str	r2, [r3, #0]
  }
}
 8002510:	bf00      	nop
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800252e:	2b01      	cmp	r3, #1
 8002530:	d101      	bne.n	8002536 <HAL_ADC_Start_DMA+0x1e>
 8002532:	2302      	movs	r3, #2
 8002534:	e0e9      	b.n	800270a <HAL_ADC_Start_DMA+0x1f2>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b01      	cmp	r3, #1
 800254a:	d018      	beq.n	800257e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689a      	ldr	r2, [r3, #8]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0201 	orr.w	r2, r2, #1
 800255a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800255c:	4b6d      	ldr	r3, [pc, #436]	; (8002714 <HAL_ADC_Start_DMA+0x1fc>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a6d      	ldr	r2, [pc, #436]	; (8002718 <HAL_ADC_Start_DMA+0x200>)
 8002562:	fba2 2303 	umull	r2, r3, r2, r3
 8002566:	0c9a      	lsrs	r2, r3, #18
 8002568:	4613      	mov	r3, r2
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	4413      	add	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002570:	e002      	b.n	8002578 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	3b01      	subs	r3, #1
 8002576:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f9      	bne.n	8002572 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800258c:	d107      	bne.n	800259e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800259c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	f040 80a1 	bne.w	80026f0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80025b6:	f023 0301 	bic.w	r3, r3, #1
 80025ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d007      	beq.n	80025e0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ec:	d106      	bne.n	80025fc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	f023 0206 	bic.w	r2, r3, #6
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	645a      	str	r2, [r3, #68]	; 0x44
 80025fa:	e002      	b.n	8002602 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800260a:	4b44      	ldr	r3, [pc, #272]	; (800271c <HAL_ADC_Start_DMA+0x204>)
 800260c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002612:	4a43      	ldr	r2, [pc, #268]	; (8002720 <HAL_ADC_Start_DMA+0x208>)
 8002614:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261a:	4a42      	ldr	r2, [pc, #264]	; (8002724 <HAL_ADC_Start_DMA+0x20c>)
 800261c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002622:	4a41      	ldr	r2, [pc, #260]	; (8002728 <HAL_ADC_Start_DMA+0x210>)
 8002624:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800262e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800263e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800264e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	334c      	adds	r3, #76	; 0x4c
 800265a:	4619      	mov	r1, r3
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f001 fb88 	bl	8003d74 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 031f 	and.w	r3, r3, #31
 800266c:	2b00      	cmp	r3, #0
 800266e:	d12a      	bne.n	80026c6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a2d      	ldr	r2, [pc, #180]	; (800272c <HAL_ADC_Start_DMA+0x214>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d015      	beq.n	80026a6 <HAL_ADC_Start_DMA+0x18e>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a2c      	ldr	r2, [pc, #176]	; (8002730 <HAL_ADC_Start_DMA+0x218>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d105      	bne.n	8002690 <HAL_ADC_Start_DMA+0x178>
 8002684:	4b25      	ldr	r3, [pc, #148]	; (800271c <HAL_ADC_Start_DMA+0x204>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 031f 	and.w	r3, r3, #31
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00a      	beq.n	80026a6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a27      	ldr	r2, [pc, #156]	; (8002734 <HAL_ADC_Start_DMA+0x21c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d136      	bne.n	8002708 <HAL_ADC_Start_DMA+0x1f0>
 800269a:	4b20      	ldr	r3, [pc, #128]	; (800271c <HAL_ADC_Start_DMA+0x204>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 0310 	and.w	r3, r3, #16
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d130      	bne.n	8002708 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d129      	bne.n	8002708 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	e020      	b.n	8002708 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a18      	ldr	r2, [pc, #96]	; (800272c <HAL_ADC_Start_DMA+0x214>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d11b      	bne.n	8002708 <HAL_ADC_Start_DMA+0x1f0>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d114      	bne.n	8002708 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026ec:	609a      	str	r2, [r3, #8]
 80026ee:	e00b      	b.n	8002708 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	f043 0210 	orr.w	r2, r3, #16
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002700:	f043 0201 	orr.w	r2, r3, #1
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000058 	.word	0x20000058
 8002718:	431bde83 	.word	0x431bde83
 800271c:	40012300 	.word	0x40012300
 8002720:	08002bd1 	.word	0x08002bd1
 8002724:	08002c8b 	.word	0x08002c8b
 8002728:	08002ca7 	.word	0x08002ca7
 800272c:	40012000 	.word	0x40012000
 8002730:	40012100 	.word	0x40012100
 8002734:	40012200 	.word	0x40012200

08002738 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800277e:	2300      	movs	r3, #0
 8002780:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x1c>
 800278c:	2302      	movs	r3, #2
 800278e:	e113      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x244>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b09      	cmp	r3, #9
 800279e:	d925      	bls.n	80027ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68d9      	ldr	r1, [r3, #12]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	461a      	mov	r2, r3
 80027ae:	4613      	mov	r3, r2
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	4413      	add	r3, r2
 80027b4:	3b1e      	subs	r3, #30
 80027b6:	2207      	movs	r2, #7
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	43da      	mvns	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	400a      	ands	r2, r1
 80027c4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68d9      	ldr	r1, [r3, #12]
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	4618      	mov	r0, r3
 80027d8:	4603      	mov	r3, r0
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	4403      	add	r3, r0
 80027de:	3b1e      	subs	r3, #30
 80027e0:	409a      	lsls	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	60da      	str	r2, [r3, #12]
 80027ea:	e022      	b.n	8002832 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6919      	ldr	r1, [r3, #16]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	461a      	mov	r2, r3
 80027fa:	4613      	mov	r3, r2
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	4413      	add	r3, r2
 8002800:	2207      	movs	r2, #7
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	43da      	mvns	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	400a      	ands	r2, r1
 800280e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6919      	ldr	r1, [r3, #16]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	b29b      	uxth	r3, r3
 8002820:	4618      	mov	r0, r3
 8002822:	4603      	mov	r3, r0
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	4403      	add	r3, r0
 8002828:	409a      	lsls	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b06      	cmp	r3, #6
 8002838:	d824      	bhi.n	8002884 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	3b05      	subs	r3, #5
 800284c:	221f      	movs	r2, #31
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43da      	mvns	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	400a      	ands	r2, r1
 800285a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	b29b      	uxth	r3, r3
 8002868:	4618      	mov	r0, r3
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	3b05      	subs	r3, #5
 8002876:	fa00 f203 	lsl.w	r2, r0, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	635a      	str	r2, [r3, #52]	; 0x34
 8002882:	e04c      	b.n	800291e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b0c      	cmp	r3, #12
 800288a:	d824      	bhi.n	80028d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	3b23      	subs	r3, #35	; 0x23
 800289e:	221f      	movs	r2, #31
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	43da      	mvns	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	400a      	ands	r2, r1
 80028ac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	4618      	mov	r0, r3
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	3b23      	subs	r3, #35	; 0x23
 80028c8:	fa00 f203 	lsl.w	r2, r0, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	631a      	str	r2, [r3, #48]	; 0x30
 80028d4:	e023      	b.n	800291e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	3b41      	subs	r3, #65	; 0x41
 80028e8:	221f      	movs	r2, #31
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43da      	mvns	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	400a      	ands	r2, r1
 80028f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	b29b      	uxth	r3, r3
 8002904:	4618      	mov	r0, r3
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	3b41      	subs	r3, #65	; 0x41
 8002912:	fa00 f203 	lsl.w	r2, r0, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800291e:	4b29      	ldr	r3, [pc, #164]	; (80029c4 <HAL_ADC_ConfigChannel+0x250>)
 8002920:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a28      	ldr	r2, [pc, #160]	; (80029c8 <HAL_ADC_ConfigChannel+0x254>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d10f      	bne.n	800294c <HAL_ADC_ConfigChannel+0x1d8>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b12      	cmp	r3, #18
 8002932:	d10b      	bne.n	800294c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a1d      	ldr	r2, [pc, #116]	; (80029c8 <HAL_ADC_ConfigChannel+0x254>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d12b      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x23a>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a1c      	ldr	r2, [pc, #112]	; (80029cc <HAL_ADC_ConfigChannel+0x258>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d003      	beq.n	8002968 <HAL_ADC_ConfigChannel+0x1f4>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b11      	cmp	r3, #17
 8002966:	d122      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a11      	ldr	r2, [pc, #68]	; (80029cc <HAL_ADC_ConfigChannel+0x258>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d111      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800298a:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <HAL_ADC_ConfigChannel+0x25c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a11      	ldr	r2, [pc, #68]	; (80029d4 <HAL_ADC_ConfigChannel+0x260>)
 8002990:	fba2 2303 	umull	r2, r3, r2, r3
 8002994:	0c9a      	lsrs	r2, r3, #18
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029a0:	e002      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	3b01      	subs	r3, #1
 80029a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f9      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	40012300 	.word	0x40012300
 80029c8:	40012000 	.word	0x40012000
 80029cc:	10000012 	.word	0x10000012
 80029d0:	20000058 	.word	0x20000058
 80029d4:	431bde83 	.word	0x431bde83

080029d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029e0:	4b79      	ldr	r3, [pc, #484]	; (8002bc8 <ADC_Init+0x1f0>)
 80029e2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	431a      	orrs	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6859      	ldr	r1, [r3, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	021a      	lsls	r2, r3, #8
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6859      	ldr	r1, [r3, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6899      	ldr	r1, [r3, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6a:	4a58      	ldr	r2, [pc, #352]	; (8002bcc <ADC_Init+0x1f4>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d022      	beq.n	8002ab6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6899      	ldr	r1, [r3, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002aa0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6899      	ldr	r1, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	e00f      	b.n	8002ad6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ac4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ad4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0202 	bic.w	r2, r2, #2
 8002ae4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6899      	ldr	r1, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	7e1b      	ldrb	r3, [r3, #24]
 8002af0:	005a      	lsls	r2, r3, #1
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d01b      	beq.n	8002b3c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b12:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b22:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6859      	ldr	r1, [r3, #4]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	035a      	lsls	r2, r3, #13
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	e007      	b.n	8002b4c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b4a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	051a      	lsls	r2, r3, #20
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6899      	ldr	r1, [r3, #8]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b8e:	025a      	lsls	r2, r3, #9
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ba6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6899      	ldr	r1, [r3, #8]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	029a      	lsls	r2, r3, #10
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	609a      	str	r2, [r3, #8]
}
 8002bbc:	bf00      	nop
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	40012300 	.word	0x40012300
 8002bcc:	0f000001 	.word	0x0f000001

08002bd0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bdc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d13c      	bne.n	8002c64 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d12b      	bne.n	8002c5c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d127      	bne.n	8002c5c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c12:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d006      	beq.n	8002c28 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d119      	bne.n	8002c5c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0220 	bic.w	r2, r2, #32
 8002c36:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d105      	bne.n	8002c5c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	f043 0201 	orr.w	r2, r3, #1
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f7fe fe01 	bl	8001864 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c62:	e00e      	b.n	8002c82 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	f003 0310 	and.w	r3, r3, #16
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f7ff fd75 	bl	8002760 <HAL_ADC_ErrorCallback>
}
 8002c76:	e004      	b.n	8002c82 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	4798      	blx	r3
}
 8002c82:	bf00      	nop
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c96:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f7ff fd4d 	bl	8002738 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c9e:	bf00      	nop
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2240      	movs	r2, #64	; 0x40
 8002cb8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbe:	f043 0204 	orr.w	r2, r3, #4
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f7ff fd4a 	bl	8002760 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ccc:	bf00      	nop
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e0ed      	b.n	8002ed6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d102      	bne.n	8002d0c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7fe fa12 	bl	8001130 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 0201 	orr.w	r2, r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d1c:	f7ff fa48 	bl	80021b0 <HAL_GetTick>
 8002d20:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d22:	e012      	b.n	8002d4a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d24:	f7ff fa44 	bl	80021b0 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b0a      	cmp	r3, #10
 8002d30:	d90b      	bls.n	8002d4a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2205      	movs	r2, #5
 8002d42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e0c5      	b.n	8002ed6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0e5      	beq.n	8002d24 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0202 	bic.w	r2, r2, #2
 8002d66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d68:	f7ff fa22 	bl	80021b0 <HAL_GetTick>
 8002d6c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d6e:	e012      	b.n	8002d96 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d70:	f7ff fa1e 	bl	80021b0 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b0a      	cmp	r3, #10
 8002d7c:	d90b      	bls.n	8002d96 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2205      	movs	r2, #5
 8002d8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e09f      	b.n	8002ed6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1e5      	bne.n	8002d70 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	7e1b      	ldrb	r3, [r3, #24]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d108      	bne.n	8002dbe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	e007      	b.n	8002dce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	7e5b      	ldrb	r3, [r3, #25]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d108      	bne.n	8002de8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	e007      	b.n	8002df8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002df6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	7e9b      	ldrb	r3, [r3, #26]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d108      	bne.n	8002e12 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0220 	orr.w	r2, r2, #32
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	e007      	b.n	8002e22 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0220 	bic.w	r2, r2, #32
 8002e20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	7edb      	ldrb	r3, [r3, #27]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d108      	bne.n	8002e3c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0210 	bic.w	r2, r2, #16
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	e007      	b.n	8002e4c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0210 	orr.w	r2, r2, #16
 8002e4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	7f1b      	ldrb	r3, [r3, #28]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d108      	bne.n	8002e66 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0208 	orr.w	r2, r2, #8
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	e007      	b.n	8002e76 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0208 	bic.w	r2, r2, #8
 8002e74:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	7f5b      	ldrb	r3, [r3, #29]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d108      	bne.n	8002e90 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f042 0204 	orr.w	r2, r2, #4
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	e007      	b.n	8002ea0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0204 	bic.w	r2, r2, #4
 8002e9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	ea42 0103 	orr.w	r1, r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	1e5a      	subs	r2, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
	...

08002ee0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b087      	sub	sp, #28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ef6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002ef8:	7cfb      	ldrb	r3, [r7, #19]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d003      	beq.n	8002f06 <HAL_CAN_ConfigFilter+0x26>
 8002efe:	7cfb      	ldrb	r3, [r7, #19]
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	f040 80be 	bne.w	8003082 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002f06:	4b65      	ldr	r3, [pc, #404]	; (800309c <HAL_CAN_ConfigFilter+0x1bc>)
 8002f08:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f10:	f043 0201 	orr.w	r2, r3, #1
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f20:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	021b      	lsls	r3, r3, #8
 8002f36:	431a      	orrs	r2, r3
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	f003 031f 	and.w	r3, r3, #31
 8002f46:	2201      	movs	r2, #1
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	43db      	mvns	r3, r3
 8002f58:	401a      	ands	r2, r3
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d123      	bne.n	8002fb0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	43db      	mvns	r3, r3
 8002f72:	401a      	ands	r2, r3
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002f8a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	3248      	adds	r2, #72	; 0x48
 8002f90:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002fa4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002fa6:	6979      	ldr	r1, [r7, #20]
 8002fa8:	3348      	adds	r3, #72	; 0x48
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	440b      	add	r3, r1
 8002fae:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d122      	bne.n	8002ffe <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002fd8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	3248      	adds	r2, #72	; 0x48
 8002fde:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ff2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ff4:	6979      	ldr	r1, [r7, #20]
 8002ff6:	3348      	adds	r3, #72	; 0x48
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	440b      	add	r3, r1
 8002ffc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d109      	bne.n	800301a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	43db      	mvns	r3, r3
 8003010:	401a      	ands	r2, r3
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003018:	e007      	b.n	800302a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	431a      	orrs	r2, r3
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d109      	bne.n	8003046 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	43db      	mvns	r3, r3
 800303c:	401a      	ands	r2, r3
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003044:	e007      	b.n	8003056 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	431a      	orrs	r2, r3
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d107      	bne.n	800306e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	431a      	orrs	r2, r3
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003074:	f023 0201 	bic.w	r2, r3, #1
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800307e:	2300      	movs	r3, #0
 8003080:	e006      	b.n	8003090 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
  }
}
 8003090:	4618      	mov	r0, r3
 8003092:	371c      	adds	r7, #28
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	40006400 	.word	0x40006400

080030a0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d12e      	bne.n	8003112 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2202      	movs	r2, #2
 80030b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0201 	bic.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80030cc:	f7ff f870 	bl	80021b0 <HAL_GetTick>
 80030d0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80030d2:	e012      	b.n	80030fa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80030d4:	f7ff f86c 	bl	80021b0 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b0a      	cmp	r3, #10
 80030e0:	d90b      	bls.n	80030fa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2205      	movs	r2, #5
 80030f2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e012      	b.n	8003120 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1e5      	bne.n	80030d4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800310e:	2300      	movs	r3, #0
 8003110:	e006      	b.n	8003120 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
  }
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003128:	b480      	push	{r7}
 800312a:	b089      	sub	sp, #36	; 0x24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f893 3020 	ldrb.w	r3, [r3, #32]
 800313c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003146:	7ffb      	ldrb	r3, [r7, #31]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d003      	beq.n	8003154 <HAL_CAN_AddTxMessage+0x2c>
 800314c:	7ffb      	ldrb	r3, [r7, #31]
 800314e:	2b02      	cmp	r3, #2
 8003150:	f040 80b8 	bne.w	80032c4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10a      	bne.n	8003174 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003164:	2b00      	cmp	r3, #0
 8003166:	d105      	bne.n	8003174 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 80a0 	beq.w	80032b4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	0e1b      	lsrs	r3, r3, #24
 8003178:	f003 0303 	and.w	r3, r3, #3
 800317c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	2b02      	cmp	r3, #2
 8003182:	d907      	bls.n	8003194 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e09e      	b.n	80032d2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003194:	2201      	movs	r2, #1
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	409a      	lsls	r2, r3
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10d      	bne.n	80031c2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80031b0:	68f9      	ldr	r1, [r7, #12]
 80031b2:	6809      	ldr	r1, [r1, #0]
 80031b4:	431a      	orrs	r2, r3
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	3318      	adds	r3, #24
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	440b      	add	r3, r1
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	e00f      	b.n	80031e2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80031cc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80031d2:	68f9      	ldr	r1, [r7, #12]
 80031d4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80031d6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	3318      	adds	r3, #24
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	440b      	add	r3, r1
 80031e0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6819      	ldr	r1, [r3, #0]
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	691a      	ldr	r2, [r3, #16]
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	3318      	adds	r3, #24
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	440b      	add	r3, r1
 80031f2:	3304      	adds	r3, #4
 80031f4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	7d1b      	ldrb	r3, [r3, #20]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d111      	bne.n	8003222 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	3318      	adds	r3, #24
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	4413      	add	r3, r2
 800320a:	3304      	adds	r3, #4
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	6811      	ldr	r1, [r2, #0]
 8003212:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	3318      	adds	r3, #24
 800321a:	011b      	lsls	r3, r3, #4
 800321c:	440b      	add	r3, r1
 800321e:	3304      	adds	r3, #4
 8003220:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3307      	adds	r3, #7
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	061a      	lsls	r2, r3, #24
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3306      	adds	r3, #6
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	041b      	lsls	r3, r3, #16
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3305      	adds	r3, #5
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	021b      	lsls	r3, r3, #8
 800323c:	4313      	orrs	r3, r2
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	3204      	adds	r2, #4
 8003242:	7812      	ldrb	r2, [r2, #0]
 8003244:	4610      	mov	r0, r2
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	6811      	ldr	r1, [r2, #0]
 800324a:	ea43 0200 	orr.w	r2, r3, r0
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	440b      	add	r3, r1
 8003254:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003258:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	3303      	adds	r3, #3
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	061a      	lsls	r2, r3, #24
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	3302      	adds	r3, #2
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	041b      	lsls	r3, r3, #16
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3301      	adds	r3, #1
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	021b      	lsls	r3, r3, #8
 8003274:	4313      	orrs	r3, r2
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	7812      	ldrb	r2, [r2, #0]
 800327a:	4610      	mov	r0, r2
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	6811      	ldr	r1, [r2, #0]
 8003280:	ea43 0200 	orr.w	r2, r3, r0
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	440b      	add	r3, r1
 800328a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800328e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	3318      	adds	r3, #24
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	4413      	add	r3, r2
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	6811      	ldr	r1, [r2, #0]
 80032a2:	f043 0201 	orr.w	r2, r3, #1
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	3318      	adds	r3, #24
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	440b      	add	r3, r1
 80032ae:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80032b0:	2300      	movs	r3, #0
 80032b2:	e00e      	b.n	80032d2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e006      	b.n	80032d2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
  }
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3724      	adds	r7, #36	; 0x24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80032de:	b480      	push	{r7}
 80032e0:	b085      	sub	sp, #20
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
 80032e6:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032f2:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80032f4:	7afb      	ldrb	r3, [r7, #11]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d002      	beq.n	8003300 <HAL_CAN_IsTxMessagePending+0x22>
 80032fa:	7afb      	ldrb	r3, [r7, #11]
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d10b      	bne.n	8003318 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	069b      	lsls	r3, r3, #26
 800330a:	401a      	ands	r2, r3
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	069b      	lsls	r3, r3, #26
 8003310:	429a      	cmp	r2, r3
 8003312:	d001      	beq.n	8003318 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8003314:	2301      	movs	r3, #1
 8003316:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8003318:	68fb      	ldr	r3, [r7, #12]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003326:	b480      	push	{r7}
 8003328:	b087      	sub	sp, #28
 800332a:	af00      	add	r7, sp, #0
 800332c:	60f8      	str	r0, [r7, #12]
 800332e:	60b9      	str	r1, [r7, #8]
 8003330:	607a      	str	r2, [r7, #4]
 8003332:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f893 3020 	ldrb.w	r3, [r3, #32]
 800333a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800333c:	7dfb      	ldrb	r3, [r7, #23]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d003      	beq.n	800334a <HAL_CAN_GetRxMessage+0x24>
 8003342:	7dfb      	ldrb	r3, [r7, #23]
 8003344:	2b02      	cmp	r3, #2
 8003346:	f040 80f3 	bne.w	8003530 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10e      	bne.n	800336e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d116      	bne.n	800338c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e0e7      	b.n	800353e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	f003 0303 	and.w	r3, r3, #3
 8003378:	2b00      	cmp	r3, #0
 800337a:	d107      	bne.n	800338c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e0d8      	b.n	800353e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	331b      	adds	r3, #27
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	4413      	add	r3, r2
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0204 	and.w	r2, r3, #4
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10c      	bne.n	80033c4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	331b      	adds	r3, #27
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	4413      	add	r3, r2
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	0d5b      	lsrs	r3, r3, #21
 80033ba:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	e00b      	b.n	80033dc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	331b      	adds	r3, #27
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	4413      	add	r3, r2
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	08db      	lsrs	r3, r3, #3
 80033d4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	331b      	adds	r3, #27
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	4413      	add	r3, r2
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0202 	and.w	r2, r3, #2
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	331b      	adds	r3, #27
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	4413      	add	r3, r2
 80033fe:	3304      	adds	r3, #4
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 020f 	and.w	r2, r3, #15
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	331b      	adds	r3, #27
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	4413      	add	r3, r2
 8003416:	3304      	adds	r3, #4
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	0a1b      	lsrs	r3, r3, #8
 800341c:	b2da      	uxtb	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	331b      	adds	r3, #27
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	4413      	add	r3, r2
 800342e:	3304      	adds	r3, #4
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	0c1b      	lsrs	r3, r3, #16
 8003434:	b29a      	uxth	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	4413      	add	r3, r2
 8003444:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	b2da      	uxtb	r2, r3
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	4413      	add	r3, r2
 800345a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	0a1a      	lsrs	r2, r3, #8
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	3301      	adds	r3, #1
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	4413      	add	r3, r2
 8003474:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	0c1a      	lsrs	r2, r3, #16
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	3302      	adds	r3, #2
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	4413      	add	r3, r2
 800348e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	0e1a      	lsrs	r2, r3, #24
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	3303      	adds	r3, #3
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	3304      	adds	r3, #4
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	4413      	add	r3, r2
 80034c0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	0a1a      	lsrs	r2, r3, #8
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	3305      	adds	r3, #5
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	4413      	add	r3, r2
 80034da:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	0c1a      	lsrs	r2, r3, #16
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	3306      	adds	r3, #6
 80034e6:	b2d2      	uxtb	r2, r2
 80034e8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	0e1a      	lsrs	r2, r3, #24
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	3307      	adds	r3, #7
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d108      	bne.n	800351c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68da      	ldr	r2, [r3, #12]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f042 0220 	orr.w	r2, r2, #32
 8003518:	60da      	str	r2, [r3, #12]
 800351a:	e007      	b.n	800352c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691a      	ldr	r2, [r3, #16]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0220 	orr.w	r2, r2, #32
 800352a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800352c:	2300      	movs	r3, #0
 800352e:	e006      	b.n	800353e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
  }
}
 800353e:	4618      	mov	r0, r3
 8003540:	371c      	adds	r7, #28
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800354a:	b480      	push	{r7}
 800354c:	b085      	sub	sp, #20
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 3020 	ldrb.w	r3, [r3, #32]
 800355a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800355c:	7bfb      	ldrb	r3, [r7, #15]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d002      	beq.n	8003568 <HAL_CAN_ActivateNotification+0x1e>
 8003562:	7bfb      	ldrb	r3, [r7, #15]
 8003564:	2b02      	cmp	r3, #2
 8003566:	d109      	bne.n	800357c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6959      	ldr	r1, [r3, #20]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003578:	2300      	movs	r3, #0
 800357a:	e006      	b.n	800358a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
  }
}
 800358a:	4618      	mov	r0, r3
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b08a      	sub	sp, #40	; 0x28
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800359e:	2300      	movs	r3, #0
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d07c      	beq.n	80036d6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d023      	beq.n	800362e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2201      	movs	r2, #1
 80035ec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f983 	bl	8003904 <HAL_CAN_TxMailbox0CompleteCallback>
 80035fe:	e016      	b.n	800362e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	f003 0304 	and.w	r3, r3, #4
 8003606:	2b00      	cmp	r3, #0
 8003608:	d004      	beq.n	8003614 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003610:	627b      	str	r3, [r7, #36]	; 0x24
 8003612:	e00c      	b.n	800362e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d004      	beq.n	8003628 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003624:	627b      	str	r3, [r7, #36]	; 0x24
 8003626:	e002      	b.n	800362e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f989 	bl	8003940 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003634:	2b00      	cmp	r3, #0
 8003636:	d024      	beq.n	8003682 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003640:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f963 	bl	8003918 <HAL_CAN_TxMailbox1CompleteCallback>
 8003652:	e016      	b.n	8003682 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800365a:	2b00      	cmp	r3, #0
 800365c:	d004      	beq.n	8003668 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
 8003666:	e00c      	b.n	8003682 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800366e:	2b00      	cmp	r3, #0
 8003670:	d004      	beq.n	800367c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003678:	627b      	str	r3, [r7, #36]	; 0x24
 800367a:	e002      	b.n	8003682 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f969 	bl	8003954 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d024      	beq.n	80036d6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003694:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f943 	bl	800392c <HAL_CAN_TxMailbox2CompleteCallback>
 80036a6:	e016      	b.n	80036d6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d004      	beq.n	80036bc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24
 80036ba:	e00c      	b.n	80036d6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d004      	beq.n	80036d0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24
 80036ce:	e002      	b.n	80036d6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f949 	bl	8003968 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	f003 0308 	and.w	r3, r3, #8
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00c      	beq.n	80036fa <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f003 0310 	and.w	r3, r3, #16
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d007      	beq.n	80036fa <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2210      	movs	r2, #16
 80036f8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80036fa:	6a3b      	ldr	r3, [r7, #32]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00b      	beq.n	800371c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d006      	beq.n	800371c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2208      	movs	r2, #8
 8003714:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f930 	bl	800397c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d009      	beq.n	800373a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f003 0303 	and.w	r3, r3, #3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f7fd fd85 	bl	8001244 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800373a:	6a3b      	ldr	r3, [r7, #32]
 800373c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00c      	beq.n	800375e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	f003 0310 	and.w	r3, r3, #16
 800374a:	2b00      	cmp	r3, #0
 800374c:	d007      	beq.n	800375e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003750:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003754:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2210      	movs	r2, #16
 800375c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	f003 0320 	and.w	r3, r3, #32
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00b      	beq.n	8003780 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b00      	cmp	r3, #0
 8003770:	d006      	beq.n	8003780 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2208      	movs	r2, #8
 8003778:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f912 	bl	80039a4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	f003 0310 	and.w	r3, r3, #16
 8003786:	2b00      	cmp	r3, #0
 8003788:	d009      	beq.n	800379e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	f003 0303 	and.w	r3, r3, #3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d002      	beq.n	800379e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f8f9 	bl	8003990 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00b      	beq.n	80037c0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f003 0310 	and.w	r3, r3, #16
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d006      	beq.n	80037c0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2210      	movs	r2, #16
 80037b8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f8fc 	bl	80039b8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00b      	beq.n	80037e2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	f003 0308 	and.w	r3, r3, #8
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d006      	beq.n	80037e2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2208      	movs	r2, #8
 80037da:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f8f5 	bl	80039cc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d07b      	beq.n	80038e4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d072      	beq.n	80038dc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d008      	beq.n	8003812 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003818:	2b00      	cmp	r3, #0
 800381a:	d008      	beq.n	800382e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	f043 0302 	orr.w	r3, r3, #2
 800382c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800382e:	6a3b      	ldr	r3, [r7, #32]
 8003830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003834:	2b00      	cmp	r3, #0
 8003836:	d008      	beq.n	800384a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	f043 0304 	orr.w	r3, r3, #4
 8003848:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003850:	2b00      	cmp	r3, #0
 8003852:	d043      	beq.n	80038dc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800385a:	2b00      	cmp	r3, #0
 800385c:	d03e      	beq.n	80038dc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003864:	2b60      	cmp	r3, #96	; 0x60
 8003866:	d02b      	beq.n	80038c0 <HAL_CAN_IRQHandler+0x32a>
 8003868:	2b60      	cmp	r3, #96	; 0x60
 800386a:	d82e      	bhi.n	80038ca <HAL_CAN_IRQHandler+0x334>
 800386c:	2b50      	cmp	r3, #80	; 0x50
 800386e:	d022      	beq.n	80038b6 <HAL_CAN_IRQHandler+0x320>
 8003870:	2b50      	cmp	r3, #80	; 0x50
 8003872:	d82a      	bhi.n	80038ca <HAL_CAN_IRQHandler+0x334>
 8003874:	2b40      	cmp	r3, #64	; 0x40
 8003876:	d019      	beq.n	80038ac <HAL_CAN_IRQHandler+0x316>
 8003878:	2b40      	cmp	r3, #64	; 0x40
 800387a:	d826      	bhi.n	80038ca <HAL_CAN_IRQHandler+0x334>
 800387c:	2b30      	cmp	r3, #48	; 0x30
 800387e:	d010      	beq.n	80038a2 <HAL_CAN_IRQHandler+0x30c>
 8003880:	2b30      	cmp	r3, #48	; 0x30
 8003882:	d822      	bhi.n	80038ca <HAL_CAN_IRQHandler+0x334>
 8003884:	2b10      	cmp	r3, #16
 8003886:	d002      	beq.n	800388e <HAL_CAN_IRQHandler+0x2f8>
 8003888:	2b20      	cmp	r3, #32
 800388a:	d005      	beq.n	8003898 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800388c:	e01d      	b.n	80038ca <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	f043 0308 	orr.w	r3, r3, #8
 8003894:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003896:	e019      	b.n	80038cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	f043 0310 	orr.w	r3, r3, #16
 800389e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80038a0:	e014      	b.n	80038cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	f043 0320 	orr.w	r3, r3, #32
 80038a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80038aa:	e00f      	b.n	80038cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80038b4:	e00a      	b.n	80038cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80038be:	e005      	b.n	80038cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80038c8:	e000      	b.n	80038cc <HAL_CAN_IRQHandler+0x336>
            break;
 80038ca:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	699a      	ldr	r2, [r3, #24]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80038da:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2204      	movs	r2, #4
 80038e2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d008      	beq.n	80038fc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f0:	431a      	orrs	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f872 	bl	80039e0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80038fc:	bf00      	nop
 80038fe:	3728      	adds	r7, #40	; 0x28
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a04:	4b0c      	ldr	r3, [pc, #48]	; (8003a38 <__NVIC_SetPriorityGrouping+0x44>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a10:	4013      	ands	r3, r2
 8003a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a26:	4a04      	ldr	r2, [pc, #16]	; (8003a38 <__NVIC_SetPriorityGrouping+0x44>)
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	60d3      	str	r3, [r2, #12]
}
 8003a2c:	bf00      	nop
 8003a2e:	3714      	adds	r7, #20
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr
 8003a38:	e000ed00 	.word	0xe000ed00

08003a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a40:	4b04      	ldr	r3, [pc, #16]	; (8003a54 <__NVIC_GetPriorityGrouping+0x18>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	0a1b      	lsrs	r3, r3, #8
 8003a46:	f003 0307 	and.w	r3, r3, #7
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	e000ed00 	.word	0xe000ed00

08003a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	4603      	mov	r3, r0
 8003a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	db0b      	blt.n	8003a82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a6a:	79fb      	ldrb	r3, [r7, #7]
 8003a6c:	f003 021f 	and.w	r2, r3, #31
 8003a70:	4907      	ldr	r1, [pc, #28]	; (8003a90 <__NVIC_EnableIRQ+0x38>)
 8003a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a76:	095b      	lsrs	r3, r3, #5
 8003a78:	2001      	movs	r0, #1
 8003a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a82:	bf00      	nop
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	e000e100 	.word	0xe000e100

08003a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	6039      	str	r1, [r7, #0]
 8003a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	db0a      	blt.n	8003abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	490c      	ldr	r1, [pc, #48]	; (8003ae0 <__NVIC_SetPriority+0x4c>)
 8003aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab2:	0112      	lsls	r2, r2, #4
 8003ab4:	b2d2      	uxtb	r2, r2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003abc:	e00a      	b.n	8003ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	4908      	ldr	r1, [pc, #32]	; (8003ae4 <__NVIC_SetPriority+0x50>)
 8003ac4:	79fb      	ldrb	r3, [r7, #7]
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	3b04      	subs	r3, #4
 8003acc:	0112      	lsls	r2, r2, #4
 8003ace:	b2d2      	uxtb	r2, r2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	761a      	strb	r2, [r3, #24]
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	e000e100 	.word	0xe000e100
 8003ae4:	e000ed00 	.word	0xe000ed00

08003ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b089      	sub	sp, #36	; 0x24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f1c3 0307 	rsb	r3, r3, #7
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	bf28      	it	cs
 8003b06:	2304      	movcs	r3, #4
 8003b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	2b06      	cmp	r3, #6
 8003b10:	d902      	bls.n	8003b18 <NVIC_EncodePriority+0x30>
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	3b03      	subs	r3, #3
 8003b16:	e000      	b.n	8003b1a <NVIC_EncodePriority+0x32>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	43da      	mvns	r2, r3
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	401a      	ands	r2, r3
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b30:	f04f 31ff 	mov.w	r1, #4294967295
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	fa01 f303 	lsl.w	r3, r1, r3
 8003b3a:	43d9      	mvns	r1, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b40:	4313      	orrs	r3, r2
         );
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3724      	adds	r7, #36	; 0x24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
	...

08003b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b60:	d301      	bcc.n	8003b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b62:	2301      	movs	r3, #1
 8003b64:	e00f      	b.n	8003b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b66:	4a0a      	ldr	r2, [pc, #40]	; (8003b90 <SysTick_Config+0x40>)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b6e:	210f      	movs	r1, #15
 8003b70:	f04f 30ff 	mov.w	r0, #4294967295
 8003b74:	f7ff ff8e 	bl	8003a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b78:	4b05      	ldr	r3, [pc, #20]	; (8003b90 <SysTick_Config+0x40>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b7e:	4b04      	ldr	r3, [pc, #16]	; (8003b90 <SysTick_Config+0x40>)
 8003b80:	2207      	movs	r2, #7
 8003b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	e000e010 	.word	0xe000e010

08003b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7ff ff29 	bl	80039f4 <__NVIC_SetPriorityGrouping>
}
 8003ba2:	bf00      	nop
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b086      	sub	sp, #24
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	60b9      	str	r1, [r7, #8]
 8003bb4:	607a      	str	r2, [r7, #4]
 8003bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bbc:	f7ff ff3e 	bl	8003a3c <__NVIC_GetPriorityGrouping>
 8003bc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	68b9      	ldr	r1, [r7, #8]
 8003bc6:	6978      	ldr	r0, [r7, #20]
 8003bc8:	f7ff ff8e 	bl	8003ae8 <NVIC_EncodePriority>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bd2:	4611      	mov	r1, r2
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff ff5d 	bl	8003a94 <__NVIC_SetPriority>
}
 8003bda:	bf00      	nop
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b082      	sub	sp, #8
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	4603      	mov	r3, r0
 8003bea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff ff31 	bl	8003a58 <__NVIC_EnableIRQ>
}
 8003bf6:	bf00      	nop
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b082      	sub	sp, #8
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7ff ffa2 	bl	8003b50 <SysTick_Config>
 8003c0c:	4603      	mov	r3, r0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c24:	f7fe fac4 	bl	80021b0 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e099      	b.n	8003d68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0201 	bic.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c54:	e00f      	b.n	8003c76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c56:	f7fe faab 	bl	80021b0 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b05      	cmp	r3, #5
 8003c62:	d908      	bls.n	8003c76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2203      	movs	r2, #3
 8003c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e078      	b.n	8003d68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1e8      	bne.n	8003c56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	4b38      	ldr	r3, [pc, #224]	; (8003d70 <HAL_DMA_Init+0x158>)
 8003c90:	4013      	ands	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ca2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	2b04      	cmp	r3, #4
 8003cce:	d107      	bne.n	8003ce0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f023 0307 	bic.w	r3, r3, #7
 8003cf6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d117      	bne.n	8003d3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00e      	beq.n	8003d3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 fa6f 	bl	8004200 <DMA_CheckFifoParam>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d008      	beq.n	8003d3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2240      	movs	r2, #64	; 0x40
 8003d2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d36:	2301      	movs	r3, #1
 8003d38:	e016      	b.n	8003d68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 fa26 	bl	8004194 <DMA_CalcBaseAndBitshift>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d50:	223f      	movs	r2, #63	; 0x3f
 8003d52:	409a      	lsls	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	f010803f 	.word	0xf010803f

08003d74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
 8003d80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d101      	bne.n	8003d9a <HAL_DMA_Start_IT+0x26>
 8003d96:	2302      	movs	r3, #2
 8003d98:	e040      	b.n	8003e1c <HAL_DMA_Start_IT+0xa8>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d12f      	bne.n	8003e0e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2202      	movs	r2, #2
 8003db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	68b9      	ldr	r1, [r7, #8]
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 f9b8 	bl	8004138 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dcc:	223f      	movs	r2, #63	; 0x3f
 8003dce:	409a      	lsls	r2, r3
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0216 	orr.w	r2, r2, #22
 8003de2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d007      	beq.n	8003dfc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 0208 	orr.w	r2, r2, #8
 8003dfa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0201 	orr.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	e005      	b.n	8003e1a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e16:	2302      	movs	r3, #2
 8003e18:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e30:	4b92      	ldr	r3, [pc, #584]	; (800407c <HAL_DMA_IRQHandler+0x258>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a92      	ldr	r2, [pc, #584]	; (8004080 <HAL_DMA_IRQHandler+0x25c>)
 8003e36:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3a:	0a9b      	lsrs	r3, r3, #10
 8003e3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e4e:	2208      	movs	r2, #8
 8003e50:	409a      	lsls	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	4013      	ands	r3, r2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d01a      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d013      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0204 	bic.w	r2, r2, #4
 8003e76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7c:	2208      	movs	r2, #8
 8003e7e:	409a      	lsls	r2, r3
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e88:	f043 0201 	orr.w	r2, r3, #1
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e94:	2201      	movs	r2, #1
 8003e96:	409a      	lsls	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d012      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00b      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	409a      	lsls	r2, r3
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ebe:	f043 0202 	orr.w	r2, r3, #2
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eca:	2204      	movs	r2, #4
 8003ecc:	409a      	lsls	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d012      	beq.n	8003efc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00b      	beq.n	8003efc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee8:	2204      	movs	r2, #4
 8003eea:	409a      	lsls	r2, r3
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef4:	f043 0204 	orr.w	r2, r3, #4
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f00:	2210      	movs	r2, #16
 8003f02:	409a      	lsls	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4013      	ands	r3, r2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d043      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0308 	and.w	r3, r3, #8
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d03c      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1e:	2210      	movs	r2, #16
 8003f20:	409a      	lsls	r2, r3
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d018      	beq.n	8003f66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d108      	bne.n	8003f54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d024      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	4798      	blx	r3
 8003f52:	e01f      	b.n	8003f94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d01b      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	4798      	blx	r3
 8003f64:	e016      	b.n	8003f94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d107      	bne.n	8003f84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 0208 	bic.w	r2, r2, #8
 8003f82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f98:	2220      	movs	r2, #32
 8003f9a:	409a      	lsls	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 808e 	beq.w	80040c2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0310 	and.w	r3, r3, #16
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 8086 	beq.w	80040c2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fba:	2220      	movs	r2, #32
 8003fbc:	409a      	lsls	r2, r3
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b05      	cmp	r3, #5
 8003fcc:	d136      	bne.n	800403c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 0216 	bic.w	r2, r2, #22
 8003fdc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	695a      	ldr	r2, [r3, #20]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d103      	bne.n	8003ffe <HAL_DMA_IRQHandler+0x1da>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d007      	beq.n	800400e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0208 	bic.w	r2, r2, #8
 800400c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004012:	223f      	movs	r2, #63	; 0x3f
 8004014:	409a      	lsls	r2, r3
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800402e:	2b00      	cmp	r3, #0
 8004030:	d07d      	beq.n	800412e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	4798      	blx	r3
        }
        return;
 800403a:	e078      	b.n	800412e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d01c      	beq.n	8004084 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d108      	bne.n	800406a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405c:	2b00      	cmp	r3, #0
 800405e:	d030      	beq.n	80040c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	4798      	blx	r3
 8004068:	e02b      	b.n	80040c2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800406e:	2b00      	cmp	r3, #0
 8004070:	d027      	beq.n	80040c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	4798      	blx	r3
 800407a:	e022      	b.n	80040c2 <HAL_DMA_IRQHandler+0x29e>
 800407c:	20000058 	.word	0x20000058
 8004080:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10f      	bne.n	80040b2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0210 	bic.w	r2, r2, #16
 80040a0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d032      	beq.n	8004130 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d022      	beq.n	800411c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2205      	movs	r2, #5
 80040da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 0201 	bic.w	r2, r2, #1
 80040ec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	3301      	adds	r3, #1
 80040f2:	60bb      	str	r3, [r7, #8]
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d307      	bcc.n	800410a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1f2      	bne.n	80040ee <HAL_DMA_IRQHandler+0x2ca>
 8004108:	e000      	b.n	800410c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800410a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004120:	2b00      	cmp	r3, #0
 8004122:	d005      	beq.n	8004130 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	4798      	blx	r3
 800412c:	e000      	b.n	8004130 <HAL_DMA_IRQHandler+0x30c>
        return;
 800412e:	bf00      	nop
    }
  }
}
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop

08004138 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004154:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	2b40      	cmp	r3, #64	; 0x40
 8004164:	d108      	bne.n	8004178 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004176:	e007      	b.n	8004188 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	60da      	str	r2, [r3, #12]
}
 8004188:	bf00      	nop
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	3b10      	subs	r3, #16
 80041a4:	4a14      	ldr	r2, [pc, #80]	; (80041f8 <DMA_CalcBaseAndBitshift+0x64>)
 80041a6:	fba2 2303 	umull	r2, r3, r2, r3
 80041aa:	091b      	lsrs	r3, r3, #4
 80041ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041ae:	4a13      	ldr	r2, [pc, #76]	; (80041fc <DMA_CalcBaseAndBitshift+0x68>)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4413      	add	r3, r2
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	461a      	mov	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2b03      	cmp	r3, #3
 80041c0:	d909      	bls.n	80041d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041ca:	f023 0303 	bic.w	r3, r3, #3
 80041ce:	1d1a      	adds	r2, r3, #4
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	659a      	str	r2, [r3, #88]	; 0x58
 80041d4:	e007      	b.n	80041e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041de:	f023 0303 	bic.w	r3, r3, #3
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	aaaaaaab 	.word	0xaaaaaaab
 80041fc:	080067c4 	.word	0x080067c4

08004200 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004208:	2300      	movs	r3, #0
 800420a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004210:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d11f      	bne.n	800425a <DMA_CheckFifoParam+0x5a>
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2b03      	cmp	r3, #3
 800421e:	d856      	bhi.n	80042ce <DMA_CheckFifoParam+0xce>
 8004220:	a201      	add	r2, pc, #4	; (adr r2, 8004228 <DMA_CheckFifoParam+0x28>)
 8004222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004226:	bf00      	nop
 8004228:	08004239 	.word	0x08004239
 800422c:	0800424b 	.word	0x0800424b
 8004230:	08004239 	.word	0x08004239
 8004234:	080042cf 	.word	0x080042cf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d046      	beq.n	80042d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004248:	e043      	b.n	80042d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004252:	d140      	bne.n	80042d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004258:	e03d      	b.n	80042d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004262:	d121      	bne.n	80042a8 <DMA_CheckFifoParam+0xa8>
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	2b03      	cmp	r3, #3
 8004268:	d837      	bhi.n	80042da <DMA_CheckFifoParam+0xda>
 800426a:	a201      	add	r2, pc, #4	; (adr r2, 8004270 <DMA_CheckFifoParam+0x70>)
 800426c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004270:	08004281 	.word	0x08004281
 8004274:	08004287 	.word	0x08004287
 8004278:	08004281 	.word	0x08004281
 800427c:	08004299 	.word	0x08004299
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	73fb      	strb	r3, [r7, #15]
      break;
 8004284:	e030      	b.n	80042e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d025      	beq.n	80042de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004296:	e022      	b.n	80042de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042a0:	d11f      	bne.n	80042e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80042a6:	e01c      	b.n	80042e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d903      	bls.n	80042b6 <DMA_CheckFifoParam+0xb6>
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2b03      	cmp	r3, #3
 80042b2:	d003      	beq.n	80042bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042b4:	e018      	b.n	80042e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	73fb      	strb	r3, [r7, #15]
      break;
 80042ba:	e015      	b.n	80042e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00e      	beq.n	80042e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	73fb      	strb	r3, [r7, #15]
      break;
 80042cc:	e00b      	b.n	80042e6 <DMA_CheckFifoParam+0xe6>
      break;
 80042ce:	bf00      	nop
 80042d0:	e00a      	b.n	80042e8 <DMA_CheckFifoParam+0xe8>
      break;
 80042d2:	bf00      	nop
 80042d4:	e008      	b.n	80042e8 <DMA_CheckFifoParam+0xe8>
      break;
 80042d6:	bf00      	nop
 80042d8:	e006      	b.n	80042e8 <DMA_CheckFifoParam+0xe8>
      break;
 80042da:	bf00      	nop
 80042dc:	e004      	b.n	80042e8 <DMA_CheckFifoParam+0xe8>
      break;
 80042de:	bf00      	nop
 80042e0:	e002      	b.n	80042e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80042e2:	bf00      	nop
 80042e4:	e000      	b.n	80042e8 <DMA_CheckFifoParam+0xe8>
      break;
 80042e6:	bf00      	nop
    }
  } 
  
  return status; 
 80042e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3714      	adds	r7, #20
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop

080042f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b089      	sub	sp, #36	; 0x24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004302:	2300      	movs	r3, #0
 8004304:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004306:	2300      	movs	r3, #0
 8004308:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800430a:	2300      	movs	r3, #0
 800430c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800430e:	2300      	movs	r3, #0
 8004310:	61fb      	str	r3, [r7, #28]
 8004312:	e165      	b.n	80045e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004314:	2201      	movs	r2, #1
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	4013      	ands	r3, r2
 8004326:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	429a      	cmp	r2, r3
 800432e:	f040 8154 	bne.w	80045da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	2b01      	cmp	r3, #1
 800433c:	d005      	beq.n	800434a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004346:	2b02      	cmp	r3, #2
 8004348:	d130      	bne.n	80043ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	2203      	movs	r2, #3
 8004356:	fa02 f303 	lsl.w	r3, r2, r3
 800435a:	43db      	mvns	r3, r3
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	4013      	ands	r3, r2
 8004360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	fa02 f303 	lsl.w	r3, r2, r3
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	4313      	orrs	r3, r2
 8004372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004380:	2201      	movs	r2, #1
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	fa02 f303 	lsl.w	r3, r2, r3
 8004388:	43db      	mvns	r3, r3
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	4013      	ands	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	091b      	lsrs	r3, r3, #4
 8004396:	f003 0201 	and.w	r2, r3, #1
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f003 0303 	and.w	r3, r3, #3
 80043b4:	2b03      	cmp	r3, #3
 80043b6:	d017      	beq.n	80043e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	2203      	movs	r2, #3
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	43db      	mvns	r3, r3
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	4013      	ands	r3, r2
 80043ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	4313      	orrs	r3, r2
 80043e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f003 0303 	and.w	r3, r3, #3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d123      	bne.n	800443c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	08da      	lsrs	r2, r3, #3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3208      	adds	r2, #8
 80043fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004400:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	220f      	movs	r2, #15
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	43db      	mvns	r3, r3
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	4013      	ands	r3, r2
 8004416:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	691a      	ldr	r2, [r3, #16]
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	4313      	orrs	r3, r2
 800442c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	08da      	lsrs	r2, r3, #3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	3208      	adds	r2, #8
 8004436:	69b9      	ldr	r1, [r7, #24]
 8004438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	2203      	movs	r2, #3
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	43db      	mvns	r3, r3
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	4013      	ands	r3, r2
 8004452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f003 0203 	and.w	r2, r3, #3
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	fa02 f303 	lsl.w	r3, r2, r3
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	4313      	orrs	r3, r2
 8004468:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 80ae 	beq.w	80045da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800447e:	2300      	movs	r3, #0
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	4b5d      	ldr	r3, [pc, #372]	; (80045f8 <HAL_GPIO_Init+0x300>)
 8004484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004486:	4a5c      	ldr	r2, [pc, #368]	; (80045f8 <HAL_GPIO_Init+0x300>)
 8004488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800448c:	6453      	str	r3, [r2, #68]	; 0x44
 800448e:	4b5a      	ldr	r3, [pc, #360]	; (80045f8 <HAL_GPIO_Init+0x300>)
 8004490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800449a:	4a58      	ldr	r2, [pc, #352]	; (80045fc <HAL_GPIO_Init+0x304>)
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	089b      	lsrs	r3, r3, #2
 80044a0:	3302      	adds	r3, #2
 80044a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	220f      	movs	r2, #15
 80044b2:	fa02 f303 	lsl.w	r3, r2, r3
 80044b6:	43db      	mvns	r3, r3
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	4013      	ands	r3, r2
 80044bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a4f      	ldr	r2, [pc, #316]	; (8004600 <HAL_GPIO_Init+0x308>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d025      	beq.n	8004512 <HAL_GPIO_Init+0x21a>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a4e      	ldr	r2, [pc, #312]	; (8004604 <HAL_GPIO_Init+0x30c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d01f      	beq.n	800450e <HAL_GPIO_Init+0x216>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a4d      	ldr	r2, [pc, #308]	; (8004608 <HAL_GPIO_Init+0x310>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d019      	beq.n	800450a <HAL_GPIO_Init+0x212>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a4c      	ldr	r2, [pc, #304]	; (800460c <HAL_GPIO_Init+0x314>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d013      	beq.n	8004506 <HAL_GPIO_Init+0x20e>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a4b      	ldr	r2, [pc, #300]	; (8004610 <HAL_GPIO_Init+0x318>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00d      	beq.n	8004502 <HAL_GPIO_Init+0x20a>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a4a      	ldr	r2, [pc, #296]	; (8004614 <HAL_GPIO_Init+0x31c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d007      	beq.n	80044fe <HAL_GPIO_Init+0x206>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a49      	ldr	r2, [pc, #292]	; (8004618 <HAL_GPIO_Init+0x320>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d101      	bne.n	80044fa <HAL_GPIO_Init+0x202>
 80044f6:	2306      	movs	r3, #6
 80044f8:	e00c      	b.n	8004514 <HAL_GPIO_Init+0x21c>
 80044fa:	2307      	movs	r3, #7
 80044fc:	e00a      	b.n	8004514 <HAL_GPIO_Init+0x21c>
 80044fe:	2305      	movs	r3, #5
 8004500:	e008      	b.n	8004514 <HAL_GPIO_Init+0x21c>
 8004502:	2304      	movs	r3, #4
 8004504:	e006      	b.n	8004514 <HAL_GPIO_Init+0x21c>
 8004506:	2303      	movs	r3, #3
 8004508:	e004      	b.n	8004514 <HAL_GPIO_Init+0x21c>
 800450a:	2302      	movs	r3, #2
 800450c:	e002      	b.n	8004514 <HAL_GPIO_Init+0x21c>
 800450e:	2301      	movs	r3, #1
 8004510:	e000      	b.n	8004514 <HAL_GPIO_Init+0x21c>
 8004512:	2300      	movs	r3, #0
 8004514:	69fa      	ldr	r2, [r7, #28]
 8004516:	f002 0203 	and.w	r2, r2, #3
 800451a:	0092      	lsls	r2, r2, #2
 800451c:	4093      	lsls	r3, r2
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	4313      	orrs	r3, r2
 8004522:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004524:	4935      	ldr	r1, [pc, #212]	; (80045fc <HAL_GPIO_Init+0x304>)
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	089b      	lsrs	r3, r3, #2
 800452a:	3302      	adds	r3, #2
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004532:	4b3a      	ldr	r3, [pc, #232]	; (800461c <HAL_GPIO_Init+0x324>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	43db      	mvns	r3, r3
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	4013      	ands	r3, r2
 8004540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	4313      	orrs	r3, r2
 8004554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004556:	4a31      	ldr	r2, [pc, #196]	; (800461c <HAL_GPIO_Init+0x324>)
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800455c:	4b2f      	ldr	r3, [pc, #188]	; (800461c <HAL_GPIO_Init+0x324>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	43db      	mvns	r3, r3
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	4013      	ands	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	4313      	orrs	r3, r2
 800457e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004580:	4a26      	ldr	r2, [pc, #152]	; (800461c <HAL_GPIO_Init+0x324>)
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004586:	4b25      	ldr	r3, [pc, #148]	; (800461c <HAL_GPIO_Init+0x324>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	43db      	mvns	r3, r3
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	4013      	ands	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045aa:	4a1c      	ldr	r2, [pc, #112]	; (800461c <HAL_GPIO_Init+0x324>)
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045b0:	4b1a      	ldr	r3, [pc, #104]	; (800461c <HAL_GPIO_Init+0x324>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	43db      	mvns	r3, r3
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	4013      	ands	r3, r2
 80045be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045d4:	4a11      	ldr	r2, [pc, #68]	; (800461c <HAL_GPIO_Init+0x324>)
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	3301      	adds	r3, #1
 80045de:	61fb      	str	r3, [r7, #28]
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	2b0f      	cmp	r3, #15
 80045e4:	f67f ae96 	bls.w	8004314 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045e8:	bf00      	nop
 80045ea:	bf00      	nop
 80045ec:	3724      	adds	r7, #36	; 0x24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	40023800 	.word	0x40023800
 80045fc:	40013800 	.word	0x40013800
 8004600:	40020000 	.word	0x40020000
 8004604:	40020400 	.word	0x40020400
 8004608:	40020800 	.word	0x40020800
 800460c:	40020c00 	.word	0x40020c00
 8004610:	40021000 	.word	0x40021000
 8004614:	40021400 	.word	0x40021400
 8004618:	40021800 	.word	0x40021800
 800461c:	40013c00 	.word	0x40013c00

08004620 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	460b      	mov	r3, r1
 800462a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	691a      	ldr	r2, [r3, #16]
 8004630:	887b      	ldrh	r3, [r7, #2]
 8004632:	4013      	ands	r3, r2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d002      	beq.n	800463e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004638:	2301      	movs	r3, #1
 800463a:	73fb      	strb	r3, [r7, #15]
 800463c:	e001      	b.n	8004642 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800463e:	2300      	movs	r3, #0
 8004640:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004642:	7bfb      	ldrb	r3, [r7, #15]
}
 8004644:	4618      	mov	r0, r3
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	460b      	mov	r3, r1
 800465a:	807b      	strh	r3, [r7, #2]
 800465c:	4613      	mov	r3, r2
 800465e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004660:	787b      	ldrb	r3, [r7, #1]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004666:	887a      	ldrh	r2, [r7, #2]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800466c:	e003      	b.n	8004676 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800466e:	887b      	ldrh	r3, [r7, #2]
 8004670:	041a      	lsls	r2, r3, #16
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	619a      	str	r2, [r3, #24]
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004682:	b480      	push	{r7}
 8004684:	b085      	sub	sp, #20
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
 800468a:	460b      	mov	r3, r1
 800468c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004694:	887a      	ldrh	r2, [r7, #2]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	4013      	ands	r3, r2
 800469a:	041a      	lsls	r2, r3, #16
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	43d9      	mvns	r1, r3
 80046a0:	887b      	ldrh	r3, [r7, #2]
 80046a2:	400b      	ands	r3, r1
 80046a4:	431a      	orrs	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	619a      	str	r2, [r3, #24]
}
 80046aa:	bf00      	nop
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
	...

080046b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e0cc      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046cc:	4b68      	ldr	r3, [pc, #416]	; (8004870 <HAL_RCC_ClockConfig+0x1b8>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 030f 	and.w	r3, r3, #15
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d90c      	bls.n	80046f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046da:	4b65      	ldr	r3, [pc, #404]	; (8004870 <HAL_RCC_ClockConfig+0x1b8>)
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e2:	4b63      	ldr	r3, [pc, #396]	; (8004870 <HAL_RCC_ClockConfig+0x1b8>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d001      	beq.n	80046f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e0b8      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d020      	beq.n	8004742 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	2b00      	cmp	r3, #0
 800470a:	d005      	beq.n	8004718 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800470c:	4b59      	ldr	r3, [pc, #356]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	4a58      	ldr	r2, [pc, #352]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 8004712:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004716:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0308 	and.w	r3, r3, #8
 8004720:	2b00      	cmp	r3, #0
 8004722:	d005      	beq.n	8004730 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004724:	4b53      	ldr	r3, [pc, #332]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	4a52      	ldr	r2, [pc, #328]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 800472a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800472e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004730:	4b50      	ldr	r3, [pc, #320]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	494d      	ldr	r1, [pc, #308]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 800473e:	4313      	orrs	r3, r2
 8004740:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d044      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d107      	bne.n	8004766 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004756:	4b47      	ldr	r3, [pc, #284]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d119      	bne.n	8004796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e07f      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2b02      	cmp	r3, #2
 800476c:	d003      	beq.n	8004776 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004772:	2b03      	cmp	r3, #3
 8004774:	d107      	bne.n	8004786 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004776:	4b3f      	ldr	r3, [pc, #252]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d109      	bne.n	8004796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e06f      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004786:	4b3b      	ldr	r3, [pc, #236]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e067      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004796:	4b37      	ldr	r3, [pc, #220]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f023 0203 	bic.w	r2, r3, #3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	4934      	ldr	r1, [pc, #208]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047a8:	f7fd fd02 	bl	80021b0 <HAL_GetTick>
 80047ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ae:	e00a      	b.n	80047c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047b0:	f7fd fcfe 	bl	80021b0 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80047be:	4293      	cmp	r3, r2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e04f      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047c6:	4b2b      	ldr	r3, [pc, #172]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 020c 	and.w	r2, r3, #12
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d1eb      	bne.n	80047b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047d8:	4b25      	ldr	r3, [pc, #148]	; (8004870 <HAL_RCC_ClockConfig+0x1b8>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 030f 	and.w	r3, r3, #15
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d20c      	bcs.n	8004800 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047e6:	4b22      	ldr	r3, [pc, #136]	; (8004870 <HAL_RCC_ClockConfig+0x1b8>)
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	b2d2      	uxtb	r2, r2
 80047ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ee:	4b20      	ldr	r3, [pc, #128]	; (8004870 <HAL_RCC_ClockConfig+0x1b8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 030f 	and.w	r3, r3, #15
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d001      	beq.n	8004800 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e032      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0304 	and.w	r3, r3, #4
 8004808:	2b00      	cmp	r3, #0
 800480a:	d008      	beq.n	800481e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800480c:	4b19      	ldr	r3, [pc, #100]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	4916      	ldr	r1, [pc, #88]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 800481a:	4313      	orrs	r3, r2
 800481c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	2b00      	cmp	r3, #0
 8004828:	d009      	beq.n	800483e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800482a:	4b12      	ldr	r3, [pc, #72]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	00db      	lsls	r3, r3, #3
 8004838:	490e      	ldr	r1, [pc, #56]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 800483a:	4313      	orrs	r3, r2
 800483c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800483e:	f000 f855 	bl	80048ec <HAL_RCC_GetSysClockFreq>
 8004842:	4602      	mov	r2, r0
 8004844:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	091b      	lsrs	r3, r3, #4
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	490a      	ldr	r1, [pc, #40]	; (8004878 <HAL_RCC_ClockConfig+0x1c0>)
 8004850:	5ccb      	ldrb	r3, [r1, r3]
 8004852:	fa22 f303 	lsr.w	r3, r2, r3
 8004856:	4a09      	ldr	r2, [pc, #36]	; (800487c <HAL_RCC_ClockConfig+0x1c4>)
 8004858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800485a:	4b09      	ldr	r3, [pc, #36]	; (8004880 <HAL_RCC_ClockConfig+0x1c8>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f7fd fc62 	bl	8002128 <HAL_InitTick>

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	40023c00 	.word	0x40023c00
 8004874:	40023800 	.word	0x40023800
 8004878:	080067ac 	.word	0x080067ac
 800487c:	20000058 	.word	0x20000058
 8004880:	2000005c 	.word	0x2000005c

08004884 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004888:	4b03      	ldr	r3, [pc, #12]	; (8004898 <HAL_RCC_GetHCLKFreq+0x14>)
 800488a:	681b      	ldr	r3, [r3, #0]
}
 800488c:	4618      	mov	r0, r3
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	20000058 	.word	0x20000058

0800489c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048a0:	f7ff fff0 	bl	8004884 <HAL_RCC_GetHCLKFreq>
 80048a4:	4602      	mov	r2, r0
 80048a6:	4b05      	ldr	r3, [pc, #20]	; (80048bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	0a9b      	lsrs	r3, r3, #10
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	4903      	ldr	r1, [pc, #12]	; (80048c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048b2:	5ccb      	ldrb	r3, [r1, r3]
 80048b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40023800 	.word	0x40023800
 80048c0:	080067bc 	.word	0x080067bc

080048c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80048c8:	f7ff ffdc 	bl	8004884 <HAL_RCC_GetHCLKFreq>
 80048cc:	4602      	mov	r2, r0
 80048ce:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	0b5b      	lsrs	r3, r3, #13
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	4903      	ldr	r1, [pc, #12]	; (80048e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048da:	5ccb      	ldrb	r3, [r1, r3]
 80048dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40023800 	.word	0x40023800
 80048e8:	080067bc 	.word	0x080067bc

080048ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80048f0:	b087      	sub	sp, #28
 80048f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80048f4:	2600      	movs	r6, #0
 80048f6:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 80048f8:	2600      	movs	r6, #0
 80048fa:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 80048fc:	2600      	movs	r6, #0
 80048fe:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8004900:	2600      	movs	r6, #0
 8004902:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004904:	2600      	movs	r6, #0
 8004906:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004908:	4ea3      	ldr	r6, [pc, #652]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800490a:	68b6      	ldr	r6, [r6, #8]
 800490c:	f006 060c 	and.w	r6, r6, #12
 8004910:	2e0c      	cmp	r6, #12
 8004912:	f200 8137 	bhi.w	8004b84 <HAL_RCC_GetSysClockFreq+0x298>
 8004916:	f20f 0c08 	addw	ip, pc, #8
 800491a:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 800491e:	bf00      	nop
 8004920:	08004955 	.word	0x08004955
 8004924:	08004b85 	.word	0x08004b85
 8004928:	08004b85 	.word	0x08004b85
 800492c:	08004b85 	.word	0x08004b85
 8004930:	0800495b 	.word	0x0800495b
 8004934:	08004b85 	.word	0x08004b85
 8004938:	08004b85 	.word	0x08004b85
 800493c:	08004b85 	.word	0x08004b85
 8004940:	08004961 	.word	0x08004961
 8004944:	08004b85 	.word	0x08004b85
 8004948:	08004b85 	.word	0x08004b85
 800494c:	08004b85 	.word	0x08004b85
 8004950:	08004a77 	.word	0x08004a77
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004954:	4b91      	ldr	r3, [pc, #580]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x2b0>)
 8004956:	613b      	str	r3, [r7, #16]
       break;
 8004958:	e117      	b.n	8004b8a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800495a:	4b91      	ldr	r3, [pc, #580]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800495c:	613b      	str	r3, [r7, #16]
      break;
 800495e:	e114      	b.n	8004b8a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004960:	4b8d      	ldr	r3, [pc, #564]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004968:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800496a:	4b8b      	ldr	r3, [pc, #556]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d024      	beq.n	80049c0 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004976:	4b88      	ldr	r3, [pc, #544]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	099b      	lsrs	r3, r3, #6
 800497c:	461a      	mov	r2, r3
 800497e:	f04f 0300 	mov.w	r3, #0
 8004982:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004986:	f04f 0500 	mov.w	r5, #0
 800498a:	ea02 0004 	and.w	r0, r2, r4
 800498e:	ea03 0105 	and.w	r1, r3, r5
 8004992:	4b83      	ldr	r3, [pc, #524]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8004994:	fb03 f201 	mul.w	r2, r3, r1
 8004998:	2300      	movs	r3, #0
 800499a:	fb03 f300 	mul.w	r3, r3, r0
 800499e:	4413      	add	r3, r2
 80049a0:	4a7f      	ldr	r2, [pc, #508]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80049a2:	fba0 0102 	umull	r0, r1, r0, r2
 80049a6:	440b      	add	r3, r1
 80049a8:	4619      	mov	r1, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	461a      	mov	r2, r3
 80049ae:	f04f 0300 	mov.w	r3, #0
 80049b2:	f7fc f847 	bl	8000a44 <__aeabi_uldivmod>
 80049b6:	4602      	mov	r2, r0
 80049b8:	460b      	mov	r3, r1
 80049ba:	4613      	mov	r3, r2
 80049bc:	617b      	str	r3, [r7, #20]
 80049be:	e04c      	b.n	8004a5a <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049c0:	4b75      	ldr	r3, [pc, #468]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	099b      	lsrs	r3, r3, #6
 80049c6:	461a      	mov	r2, r3
 80049c8:	f04f 0300 	mov.w	r3, #0
 80049cc:	f240 10ff 	movw	r0, #511	; 0x1ff
 80049d0:	f04f 0100 	mov.w	r1, #0
 80049d4:	ea02 0800 	and.w	r8, r2, r0
 80049d8:	ea03 0901 	and.w	r9, r3, r1
 80049dc:	4640      	mov	r0, r8
 80049de:	4649      	mov	r1, r9
 80049e0:	f04f 0200 	mov.w	r2, #0
 80049e4:	f04f 0300 	mov.w	r3, #0
 80049e8:	014b      	lsls	r3, r1, #5
 80049ea:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80049ee:	0142      	lsls	r2, r0, #5
 80049f0:	4610      	mov	r0, r2
 80049f2:	4619      	mov	r1, r3
 80049f4:	ebb0 0008 	subs.w	r0, r0, r8
 80049f8:	eb61 0109 	sbc.w	r1, r1, r9
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	018b      	lsls	r3, r1, #6
 8004a06:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a0a:	0182      	lsls	r2, r0, #6
 8004a0c:	1a12      	subs	r2, r2, r0
 8004a0e:	eb63 0301 	sbc.w	r3, r3, r1
 8004a12:	f04f 0000 	mov.w	r0, #0
 8004a16:	f04f 0100 	mov.w	r1, #0
 8004a1a:	00d9      	lsls	r1, r3, #3
 8004a1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a20:	00d0      	lsls	r0, r2, #3
 8004a22:	4602      	mov	r2, r0
 8004a24:	460b      	mov	r3, r1
 8004a26:	eb12 0208 	adds.w	r2, r2, r8
 8004a2a:	eb43 0309 	adc.w	r3, r3, r9
 8004a2e:	f04f 0000 	mov.w	r0, #0
 8004a32:	f04f 0100 	mov.w	r1, #0
 8004a36:	0299      	lsls	r1, r3, #10
 8004a38:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004a3c:	0290      	lsls	r0, r2, #10
 8004a3e:	4602      	mov	r2, r0
 8004a40:	460b      	mov	r3, r1
 8004a42:	4610      	mov	r0, r2
 8004a44:	4619      	mov	r1, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	461a      	mov	r2, r3
 8004a4a:	f04f 0300 	mov.w	r3, #0
 8004a4e:	f7fb fff9 	bl	8000a44 <__aeabi_uldivmod>
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	4613      	mov	r3, r2
 8004a58:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a5a:	4b4f      	ldr	r3, [pc, #316]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	0c1b      	lsrs	r3, r3, #16
 8004a60:	f003 0303 	and.w	r3, r3, #3
 8004a64:	3301      	adds	r3, #1
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a72:	613b      	str	r3, [r7, #16]
      break;
 8004a74:	e089      	b.n	8004b8a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a76:	4948      	ldr	r1, [pc, #288]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8004a78:	6849      	ldr	r1, [r1, #4]
 8004a7a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004a7e:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a80:	4945      	ldr	r1, [pc, #276]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8004a82:	6849      	ldr	r1, [r1, #4]
 8004a84:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004a88:	2900      	cmp	r1, #0
 8004a8a:	d024      	beq.n	8004ad6 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a8c:	4942      	ldr	r1, [pc, #264]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8004a8e:	6849      	ldr	r1, [r1, #4]
 8004a90:	0989      	lsrs	r1, r1, #6
 8004a92:	4608      	mov	r0, r1
 8004a94:	f04f 0100 	mov.w	r1, #0
 8004a98:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004a9c:	f04f 0500 	mov.w	r5, #0
 8004aa0:	ea00 0204 	and.w	r2, r0, r4
 8004aa4:	ea01 0305 	and.w	r3, r1, r5
 8004aa8:	493d      	ldr	r1, [pc, #244]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8004aaa:	fb01 f003 	mul.w	r0, r1, r3
 8004aae:	2100      	movs	r1, #0
 8004ab0:	fb01 f102 	mul.w	r1, r1, r2
 8004ab4:	1844      	adds	r4, r0, r1
 8004ab6:	493a      	ldr	r1, [pc, #232]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8004ab8:	fba2 0101 	umull	r0, r1, r2, r1
 8004abc:	1863      	adds	r3, r4, r1
 8004abe:	4619      	mov	r1, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	f04f 0300 	mov.w	r3, #0
 8004ac8:	f7fb ffbc 	bl	8000a44 <__aeabi_uldivmod>
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	e04a      	b.n	8004b6c <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ad6:	4b30      	ldr	r3, [pc, #192]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	099b      	lsrs	r3, r3, #6
 8004adc:	461a      	mov	r2, r3
 8004ade:	f04f 0300 	mov.w	r3, #0
 8004ae2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004ae6:	f04f 0100 	mov.w	r1, #0
 8004aea:	ea02 0400 	and.w	r4, r2, r0
 8004aee:	ea03 0501 	and.w	r5, r3, r1
 8004af2:	4620      	mov	r0, r4
 8004af4:	4629      	mov	r1, r5
 8004af6:	f04f 0200 	mov.w	r2, #0
 8004afa:	f04f 0300 	mov.w	r3, #0
 8004afe:	014b      	lsls	r3, r1, #5
 8004b00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b04:	0142      	lsls	r2, r0, #5
 8004b06:	4610      	mov	r0, r2
 8004b08:	4619      	mov	r1, r3
 8004b0a:	1b00      	subs	r0, r0, r4
 8004b0c:	eb61 0105 	sbc.w	r1, r1, r5
 8004b10:	f04f 0200 	mov.w	r2, #0
 8004b14:	f04f 0300 	mov.w	r3, #0
 8004b18:	018b      	lsls	r3, r1, #6
 8004b1a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b1e:	0182      	lsls	r2, r0, #6
 8004b20:	1a12      	subs	r2, r2, r0
 8004b22:	eb63 0301 	sbc.w	r3, r3, r1
 8004b26:	f04f 0000 	mov.w	r0, #0
 8004b2a:	f04f 0100 	mov.w	r1, #0
 8004b2e:	00d9      	lsls	r1, r3, #3
 8004b30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b34:	00d0      	lsls	r0, r2, #3
 8004b36:	4602      	mov	r2, r0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	1912      	adds	r2, r2, r4
 8004b3c:	eb45 0303 	adc.w	r3, r5, r3
 8004b40:	f04f 0000 	mov.w	r0, #0
 8004b44:	f04f 0100 	mov.w	r1, #0
 8004b48:	0299      	lsls	r1, r3, #10
 8004b4a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004b4e:	0290      	lsls	r0, r2, #10
 8004b50:	4602      	mov	r2, r0
 8004b52:	460b      	mov	r3, r1
 8004b54:	4610      	mov	r0, r2
 8004b56:	4619      	mov	r1, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	f04f 0300 	mov.w	r3, #0
 8004b60:	f7fb ff70 	bl	8000a44 <__aeabi_uldivmod>
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	4613      	mov	r3, r2
 8004b6a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004b6c:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	0f1b      	lsrs	r3, r3, #28
 8004b72:	f003 0307 	and.w	r3, r3, #7
 8004b76:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b80:	613b      	str	r3, [r7, #16]
      break;
 8004b82:	e002      	b.n	8004b8a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b84:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x2b0>)
 8004b86:	613b      	str	r3, [r7, #16]
      break;
 8004b88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b8a:	693b      	ldr	r3, [r7, #16]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	371c      	adds	r7, #28
 8004b90:	46bd      	mov	sp, r7
 8004b92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004b96:	bf00      	nop
 8004b98:	40023800 	.word	0x40023800
 8004b9c:	00f42400 	.word	0x00f42400
 8004ba0:	017d7840 	.word	0x017d7840

08004ba4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e28d      	b.n	80050d2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 8083 	beq.w	8004cca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004bc4:	4b94      	ldr	r3, [pc, #592]	; (8004e18 <HAL_RCC_OscConfig+0x274>)
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f003 030c 	and.w	r3, r3, #12
 8004bcc:	2b04      	cmp	r3, #4
 8004bce:	d019      	beq.n	8004c04 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004bd0:	4b91      	ldr	r3, [pc, #580]	; (8004e18 <HAL_RCC_OscConfig+0x274>)
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d106      	bne.n	8004bea <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004bdc:	4b8e      	ldr	r3, [pc, #568]	; (8004e18 <HAL_RCC_OscConfig+0x274>)
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004be4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004be8:	d00c      	beq.n	8004c04 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bea:	4b8b      	ldr	r3, [pc, #556]	; (8004e18 <HAL_RCC_OscConfig+0x274>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004bf2:	2b0c      	cmp	r3, #12
 8004bf4:	d112      	bne.n	8004c1c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bf6:	4b88      	ldr	r3, [pc, #544]	; (8004e18 <HAL_RCC_OscConfig+0x274>)
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c02:	d10b      	bne.n	8004c1c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c04:	4b84      	ldr	r3, [pc, #528]	; (8004e18 <HAL_RCC_OscConfig+0x274>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d05b      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x124>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d157      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e25a      	b.n	80050d2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c24:	d106      	bne.n	8004c34 <HAL_RCC_OscConfig+0x90>
 8004c26:	4b7c      	ldr	r3, [pc, #496]	; (8004e18 <HAL_RCC_OscConfig+0x274>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a7b      	ldr	r2, [pc, #492]	; (8004e18 <HAL_RCC_OscConfig+0x274>)
 8004c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c30:	6013      	str	r3, [r2, #0]
 8004c32:	e01d      	b.n	8004c70 <HAL_RCC_OscConfig+0xcc>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c3c:	d10c      	bne.n	8004c58 <HAL_RCC_OscConfig+0xb4>
 8004c3e:	4b76      	ldr	r3, [pc, #472]	; (8004e18 <HAL_RCC_OscConfig+0x274>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a75      	ldr	r2, [pc, #468]	; (8004e18 <HAL_RCC_OscConfig+0x274>)
 8004c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c48:	6013      	str	r3, [r2, #0]
 8004c4a:	4b73      	ldr	r3, [pc, #460]	; (8004e18 <HAL_RCC_OscConfig+0x274>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a72      	ldr	r2, [pc, #456]	; (8004e18 <HAL_RCC_OscConfig+0x274>)
 8004c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c54:	6013      	str	r3, [r2, #0]
 8004c56:	e00b      	b.n	8004c70 <HAL_RCC_OscConfig+0xcc>
 8004c58:	4b6f      	ldr	r3, [pc, #444]	; (8004e18 <HAL_RCC_OscConfig+0x274>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a6e      	ldr	r2, [pc, #440]	; (8004e18 <HAL_RCC_OscConfig+0x274>)
 8004c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c62:	6013      	str	r3, [r2, #0]
 8004c64:	4b6c      	ldr	r3, [pc, #432]	; (8004e18 <HAL_RCC_OscConfig+0x274>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a6b      	ldr	r2, [pc, #428]	; (8004e18 <HAL_RCC_OscConfig+0x274>)
 8004c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d013      	beq.n	8004ca0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c78:	f7fd fa9a 	bl	80021b0 <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c80:	f7fd fa96 	bl	80021b0 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b64      	cmp	r3, #100	; 0x64
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e21f      	b.n	80050d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c92:	4b61      	ldr	r3, [pc, #388]	; (8004e18 <HAL_RCC_OscConfig+0x274>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0f0      	beq.n	8004c80 <HAL_RCC_OscConfig+0xdc>
 8004c9e:	e014      	b.n	8004cca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca0:	f7fd fa86 	bl	80021b0 <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ca6:	e008      	b.n	8004cba <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ca8:	f7fd fa82 	bl	80021b0 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b64      	cmp	r3, #100	; 0x64
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e20b      	b.n	80050d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cba:	4b57      	ldr	r3, [pc, #348]	; (8004e18 <HAL_RCC_OscConfig+0x274>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1f0      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x104>
 8004cc6:	e000      	b.n	8004cca <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d06f      	beq.n	8004db6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004cd6:	4b50      	ldr	r3, [pc, #320]	; (8004e18 <HAL_RCC_OscConfig+0x274>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f003 030c 	and.w	r3, r3, #12
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d017      	beq.n	8004d12 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004ce2:	4b4d      	ldr	r3, [pc, #308]	; (8004e18 <HAL_RCC_OscConfig+0x274>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004cea:	2b08      	cmp	r3, #8
 8004cec:	d105      	bne.n	8004cfa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004cee:	4b4a      	ldr	r3, [pc, #296]	; (8004e18 <HAL_RCC_OscConfig+0x274>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00b      	beq.n	8004d12 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cfa:	4b47      	ldr	r3, [pc, #284]	; (8004e18 <HAL_RCC_OscConfig+0x274>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d02:	2b0c      	cmp	r3, #12
 8004d04:	d11c      	bne.n	8004d40 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d06:	4b44      	ldr	r3, [pc, #272]	; (8004e18 <HAL_RCC_OscConfig+0x274>)
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d116      	bne.n	8004d40 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d12:	4b41      	ldr	r3, [pc, #260]	; (8004e18 <HAL_RCC_OscConfig+0x274>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d005      	beq.n	8004d2a <HAL_RCC_OscConfig+0x186>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d001      	beq.n	8004d2a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e1d3      	b.n	80050d2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d2a:	4b3b      	ldr	r3, [pc, #236]	; (8004e18 <HAL_RCC_OscConfig+0x274>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	4937      	ldr	r1, [pc, #220]	; (8004e18 <HAL_RCC_OscConfig+0x274>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d3e:	e03a      	b.n	8004db6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d020      	beq.n	8004d8a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d48:	4b34      	ldr	r3, [pc, #208]	; (8004e1c <HAL_RCC_OscConfig+0x278>)
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d4e:	f7fd fa2f 	bl	80021b0 <HAL_GetTick>
 8004d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d54:	e008      	b.n	8004d68 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d56:	f7fd fa2b 	bl	80021b0 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d901      	bls.n	8004d68 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e1b4      	b.n	80050d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d68:	4b2b      	ldr	r3, [pc, #172]	; (8004e18 <HAL_RCC_OscConfig+0x274>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d0f0      	beq.n	8004d56 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d74:	4b28      	ldr	r3, [pc, #160]	; (8004e18 <HAL_RCC_OscConfig+0x274>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	00db      	lsls	r3, r3, #3
 8004d82:	4925      	ldr	r1, [pc, #148]	; (8004e18 <HAL_RCC_OscConfig+0x274>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	600b      	str	r3, [r1, #0]
 8004d88:	e015      	b.n	8004db6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d8a:	4b24      	ldr	r3, [pc, #144]	; (8004e1c <HAL_RCC_OscConfig+0x278>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d90:	f7fd fa0e 	bl	80021b0 <HAL_GetTick>
 8004d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d96:	e008      	b.n	8004daa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d98:	f7fd fa0a 	bl	80021b0 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e193      	b.n	80050d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004daa:	4b1b      	ldr	r3, [pc, #108]	; (8004e18 <HAL_RCC_OscConfig+0x274>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1f0      	bne.n	8004d98 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0308 	and.w	r3, r3, #8
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d036      	beq.n	8004e30 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d016      	beq.n	8004df8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dca:	4b15      	ldr	r3, [pc, #84]	; (8004e20 <HAL_RCC_OscConfig+0x27c>)
 8004dcc:	2201      	movs	r2, #1
 8004dce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd0:	f7fd f9ee 	bl	80021b0 <HAL_GetTick>
 8004dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dd6:	e008      	b.n	8004dea <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dd8:	f7fd f9ea 	bl	80021b0 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e173      	b.n	80050d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dea:	4b0b      	ldr	r3, [pc, #44]	; (8004e18 <HAL_RCC_OscConfig+0x274>)
 8004dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d0f0      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x234>
 8004df6:	e01b      	b.n	8004e30 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004df8:	4b09      	ldr	r3, [pc, #36]	; (8004e20 <HAL_RCC_OscConfig+0x27c>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dfe:	f7fd f9d7 	bl	80021b0 <HAL_GetTick>
 8004e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e04:	e00e      	b.n	8004e24 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e06:	f7fd f9d3 	bl	80021b0 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d907      	bls.n	8004e24 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e15c      	b.n	80050d2 <HAL_RCC_OscConfig+0x52e>
 8004e18:	40023800 	.word	0x40023800
 8004e1c:	42470000 	.word	0x42470000
 8004e20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e24:	4b8a      	ldr	r3, [pc, #552]	; (8005050 <HAL_RCC_OscConfig+0x4ac>)
 8004e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1ea      	bne.n	8004e06 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0304 	and.w	r3, r3, #4
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 8097 	beq.w	8004f6c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e42:	4b83      	ldr	r3, [pc, #524]	; (8005050 <HAL_RCC_OscConfig+0x4ac>)
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10f      	bne.n	8004e6e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60bb      	str	r3, [r7, #8]
 8004e52:	4b7f      	ldr	r3, [pc, #508]	; (8005050 <HAL_RCC_OscConfig+0x4ac>)
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	4a7e      	ldr	r2, [pc, #504]	; (8005050 <HAL_RCC_OscConfig+0x4ac>)
 8004e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e5e:	4b7c      	ldr	r3, [pc, #496]	; (8005050 <HAL_RCC_OscConfig+0x4ac>)
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e66:	60bb      	str	r3, [r7, #8]
 8004e68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e6e:	4b79      	ldr	r3, [pc, #484]	; (8005054 <HAL_RCC_OscConfig+0x4b0>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d118      	bne.n	8004eac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e7a:	4b76      	ldr	r3, [pc, #472]	; (8005054 <HAL_RCC_OscConfig+0x4b0>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a75      	ldr	r2, [pc, #468]	; (8005054 <HAL_RCC_OscConfig+0x4b0>)
 8004e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e86:	f7fd f993 	bl	80021b0 <HAL_GetTick>
 8004e8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e8c:	e008      	b.n	8004ea0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e8e:	f7fd f98f 	bl	80021b0 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e118      	b.n	80050d2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ea0:	4b6c      	ldr	r3, [pc, #432]	; (8005054 <HAL_RCC_OscConfig+0x4b0>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0f0      	beq.n	8004e8e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d106      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x31e>
 8004eb4:	4b66      	ldr	r3, [pc, #408]	; (8005050 <HAL_RCC_OscConfig+0x4ac>)
 8004eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb8:	4a65      	ldr	r2, [pc, #404]	; (8005050 <HAL_RCC_OscConfig+0x4ac>)
 8004eba:	f043 0301 	orr.w	r3, r3, #1
 8004ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8004ec0:	e01c      	b.n	8004efc <HAL_RCC_OscConfig+0x358>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	2b05      	cmp	r3, #5
 8004ec8:	d10c      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x340>
 8004eca:	4b61      	ldr	r3, [pc, #388]	; (8005050 <HAL_RCC_OscConfig+0x4ac>)
 8004ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ece:	4a60      	ldr	r2, [pc, #384]	; (8005050 <HAL_RCC_OscConfig+0x4ac>)
 8004ed0:	f043 0304 	orr.w	r3, r3, #4
 8004ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ed6:	4b5e      	ldr	r3, [pc, #376]	; (8005050 <HAL_RCC_OscConfig+0x4ac>)
 8004ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eda:	4a5d      	ldr	r2, [pc, #372]	; (8005050 <HAL_RCC_OscConfig+0x4ac>)
 8004edc:	f043 0301 	orr.w	r3, r3, #1
 8004ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ee2:	e00b      	b.n	8004efc <HAL_RCC_OscConfig+0x358>
 8004ee4:	4b5a      	ldr	r3, [pc, #360]	; (8005050 <HAL_RCC_OscConfig+0x4ac>)
 8004ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee8:	4a59      	ldr	r2, [pc, #356]	; (8005050 <HAL_RCC_OscConfig+0x4ac>)
 8004eea:	f023 0301 	bic.w	r3, r3, #1
 8004eee:	6713      	str	r3, [r2, #112]	; 0x70
 8004ef0:	4b57      	ldr	r3, [pc, #348]	; (8005050 <HAL_RCC_OscConfig+0x4ac>)
 8004ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef4:	4a56      	ldr	r2, [pc, #344]	; (8005050 <HAL_RCC_OscConfig+0x4ac>)
 8004ef6:	f023 0304 	bic.w	r3, r3, #4
 8004efa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d015      	beq.n	8004f30 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f04:	f7fd f954 	bl	80021b0 <HAL_GetTick>
 8004f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f0a:	e00a      	b.n	8004f22 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f0c:	f7fd f950 	bl	80021b0 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e0d7      	b.n	80050d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f22:	4b4b      	ldr	r3, [pc, #300]	; (8005050 <HAL_RCC_OscConfig+0x4ac>)
 8004f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d0ee      	beq.n	8004f0c <HAL_RCC_OscConfig+0x368>
 8004f2e:	e014      	b.n	8004f5a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f30:	f7fd f93e 	bl	80021b0 <HAL_GetTick>
 8004f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f36:	e00a      	b.n	8004f4e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f38:	f7fd f93a 	bl	80021b0 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e0c1      	b.n	80050d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f4e:	4b40      	ldr	r3, [pc, #256]	; (8005050 <HAL_RCC_OscConfig+0x4ac>)
 8004f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1ee      	bne.n	8004f38 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f5a:	7dfb      	ldrb	r3, [r7, #23]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d105      	bne.n	8004f6c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f60:	4b3b      	ldr	r3, [pc, #236]	; (8005050 <HAL_RCC_OscConfig+0x4ac>)
 8004f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f64:	4a3a      	ldr	r2, [pc, #232]	; (8005050 <HAL_RCC_OscConfig+0x4ac>)
 8004f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 80ad 	beq.w	80050d0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f76:	4b36      	ldr	r3, [pc, #216]	; (8005050 <HAL_RCC_OscConfig+0x4ac>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f003 030c 	and.w	r3, r3, #12
 8004f7e:	2b08      	cmp	r3, #8
 8004f80:	d060      	beq.n	8005044 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d145      	bne.n	8005016 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f8a:	4b33      	ldr	r3, [pc, #204]	; (8005058 <HAL_RCC_OscConfig+0x4b4>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f90:	f7fd f90e 	bl	80021b0 <HAL_GetTick>
 8004f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f96:	e008      	b.n	8004faa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f98:	f7fd f90a 	bl	80021b0 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e093      	b.n	80050d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004faa:	4b29      	ldr	r3, [pc, #164]	; (8005050 <HAL_RCC_OscConfig+0x4ac>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1f0      	bne.n	8004f98 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	69da      	ldr	r2, [r3, #28]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc4:	019b      	lsls	r3, r3, #6
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fcc:	085b      	lsrs	r3, r3, #1
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	041b      	lsls	r3, r3, #16
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd8:	061b      	lsls	r3, r3, #24
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe0:	071b      	lsls	r3, r3, #28
 8004fe2:	491b      	ldr	r1, [pc, #108]	; (8005050 <HAL_RCC_OscConfig+0x4ac>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fe8:	4b1b      	ldr	r3, [pc, #108]	; (8005058 <HAL_RCC_OscConfig+0x4b4>)
 8004fea:	2201      	movs	r2, #1
 8004fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fee:	f7fd f8df 	bl	80021b0 <HAL_GetTick>
 8004ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ff4:	e008      	b.n	8005008 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ff6:	f7fd f8db 	bl	80021b0 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d901      	bls.n	8005008 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e064      	b.n	80050d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005008:	4b11      	ldr	r3, [pc, #68]	; (8005050 <HAL_RCC_OscConfig+0x4ac>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0f0      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x452>
 8005014:	e05c      	b.n	80050d0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005016:	4b10      	ldr	r3, [pc, #64]	; (8005058 <HAL_RCC_OscConfig+0x4b4>)
 8005018:	2200      	movs	r2, #0
 800501a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501c:	f7fd f8c8 	bl	80021b0 <HAL_GetTick>
 8005020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005022:	e008      	b.n	8005036 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005024:	f7fd f8c4 	bl	80021b0 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e04d      	b.n	80050d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005036:	4b06      	ldr	r3, [pc, #24]	; (8005050 <HAL_RCC_OscConfig+0x4ac>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1f0      	bne.n	8005024 <HAL_RCC_OscConfig+0x480>
 8005042:	e045      	b.n	80050d0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d107      	bne.n	800505c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e040      	b.n	80050d2 <HAL_RCC_OscConfig+0x52e>
 8005050:	40023800 	.word	0x40023800
 8005054:	40007000 	.word	0x40007000
 8005058:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800505c:	4b1f      	ldr	r3, [pc, #124]	; (80050dc <HAL_RCC_OscConfig+0x538>)
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d030      	beq.n	80050cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005074:	429a      	cmp	r2, r3
 8005076:	d129      	bne.n	80050cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005082:	429a      	cmp	r2, r3
 8005084:	d122      	bne.n	80050cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800508c:	4013      	ands	r3, r2
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005092:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005094:	4293      	cmp	r3, r2
 8005096:	d119      	bne.n	80050cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a2:	085b      	lsrs	r3, r3, #1
 80050a4:	3b01      	subs	r3, #1
 80050a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d10f      	bne.n	80050cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d107      	bne.n	80050cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d001      	beq.n	80050d0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e000      	b.n	80050d2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3718      	adds	r7, #24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	40023800 	.word	0x40023800

080050e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e041      	b.n	8005176 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d106      	bne.n	800510c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7fc fcc2 	bl	8001a90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3304      	adds	r3, #4
 800511c:	4619      	mov	r1, r3
 800511e:	4610      	mov	r0, r2
 8005120:	f000 fd52 	bl	8005bc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
	...

08005180 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b01      	cmp	r3, #1
 8005192:	d001      	beq.n	8005198 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e046      	b.n	8005226 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a23      	ldr	r2, [pc, #140]	; (8005234 <HAL_TIM_Base_Start+0xb4>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d022      	beq.n	80051f0 <HAL_TIM_Base_Start+0x70>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b2:	d01d      	beq.n	80051f0 <HAL_TIM_Base_Start+0x70>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a1f      	ldr	r2, [pc, #124]	; (8005238 <HAL_TIM_Base_Start+0xb8>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d018      	beq.n	80051f0 <HAL_TIM_Base_Start+0x70>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a1e      	ldr	r2, [pc, #120]	; (800523c <HAL_TIM_Base_Start+0xbc>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d013      	beq.n	80051f0 <HAL_TIM_Base_Start+0x70>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a1c      	ldr	r2, [pc, #112]	; (8005240 <HAL_TIM_Base_Start+0xc0>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d00e      	beq.n	80051f0 <HAL_TIM_Base_Start+0x70>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a1b      	ldr	r2, [pc, #108]	; (8005244 <HAL_TIM_Base_Start+0xc4>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d009      	beq.n	80051f0 <HAL_TIM_Base_Start+0x70>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a19      	ldr	r2, [pc, #100]	; (8005248 <HAL_TIM_Base_Start+0xc8>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d004      	beq.n	80051f0 <HAL_TIM_Base_Start+0x70>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a18      	ldr	r2, [pc, #96]	; (800524c <HAL_TIM_Base_Start+0xcc>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d111      	bne.n	8005214 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f003 0307 	and.w	r3, r3, #7
 80051fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2b06      	cmp	r3, #6
 8005200:	d010      	beq.n	8005224 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f042 0201 	orr.w	r2, r2, #1
 8005210:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005212:	e007      	b.n	8005224 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0201 	orr.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	40010000 	.word	0x40010000
 8005238:	40000400 	.word	0x40000400
 800523c:	40000800 	.word	0x40000800
 8005240:	40000c00 	.word	0x40000c00
 8005244:	40010400 	.word	0x40010400
 8005248:	40014000 	.word	0x40014000
 800524c:	40001800 	.word	0x40001800

08005250 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b01      	cmp	r3, #1
 8005262:	d001      	beq.n	8005268 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e04e      	b.n	8005306 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2202      	movs	r2, #2
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68da      	ldr	r2, [r3, #12]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0201 	orr.w	r2, r2, #1
 800527e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a23      	ldr	r2, [pc, #140]	; (8005314 <HAL_TIM_Base_Start_IT+0xc4>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d022      	beq.n	80052d0 <HAL_TIM_Base_Start_IT+0x80>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005292:	d01d      	beq.n	80052d0 <HAL_TIM_Base_Start_IT+0x80>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a1f      	ldr	r2, [pc, #124]	; (8005318 <HAL_TIM_Base_Start_IT+0xc8>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d018      	beq.n	80052d0 <HAL_TIM_Base_Start_IT+0x80>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a1e      	ldr	r2, [pc, #120]	; (800531c <HAL_TIM_Base_Start_IT+0xcc>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d013      	beq.n	80052d0 <HAL_TIM_Base_Start_IT+0x80>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a1c      	ldr	r2, [pc, #112]	; (8005320 <HAL_TIM_Base_Start_IT+0xd0>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d00e      	beq.n	80052d0 <HAL_TIM_Base_Start_IT+0x80>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a1b      	ldr	r2, [pc, #108]	; (8005324 <HAL_TIM_Base_Start_IT+0xd4>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d009      	beq.n	80052d0 <HAL_TIM_Base_Start_IT+0x80>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a19      	ldr	r2, [pc, #100]	; (8005328 <HAL_TIM_Base_Start_IT+0xd8>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d004      	beq.n	80052d0 <HAL_TIM_Base_Start_IT+0x80>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a18      	ldr	r2, [pc, #96]	; (800532c <HAL_TIM_Base_Start_IT+0xdc>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d111      	bne.n	80052f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f003 0307 	and.w	r3, r3, #7
 80052da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2b06      	cmp	r3, #6
 80052e0:	d010      	beq.n	8005304 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f042 0201 	orr.w	r2, r2, #1
 80052f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f2:	e007      	b.n	8005304 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f042 0201 	orr.w	r2, r2, #1
 8005302:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	40010000 	.word	0x40010000
 8005318:	40000400 	.word	0x40000400
 800531c:	40000800 	.word	0x40000800
 8005320:	40000c00 	.word	0x40000c00
 8005324:	40010400 	.word	0x40010400
 8005328:	40014000 	.word	0x40014000
 800532c:	40001800 	.word	0x40001800

08005330 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e041      	b.n	80053c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d106      	bne.n	800535c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f839 	bl	80053ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	3304      	adds	r3, #4
 800536c:	4619      	mov	r1, r3
 800536e:	4610      	mov	r0, r2
 8005370:	f000 fc2a 	bl	8005bc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3708      	adds	r7, #8
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b083      	sub	sp, #12
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80053d6:	bf00      	nop
 80053d8:	370c      	adds	r7, #12
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
	...

080053e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d109      	bne.n	8005408 <HAL_TIM_PWM_Start+0x24>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	bf14      	ite	ne
 8005400:	2301      	movne	r3, #1
 8005402:	2300      	moveq	r3, #0
 8005404:	b2db      	uxtb	r3, r3
 8005406:	e022      	b.n	800544e <HAL_TIM_PWM_Start+0x6a>
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2b04      	cmp	r3, #4
 800540c:	d109      	bne.n	8005422 <HAL_TIM_PWM_Start+0x3e>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b01      	cmp	r3, #1
 8005418:	bf14      	ite	ne
 800541a:	2301      	movne	r3, #1
 800541c:	2300      	moveq	r3, #0
 800541e:	b2db      	uxtb	r3, r3
 8005420:	e015      	b.n	800544e <HAL_TIM_PWM_Start+0x6a>
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2b08      	cmp	r3, #8
 8005426:	d109      	bne.n	800543c <HAL_TIM_PWM_Start+0x58>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b01      	cmp	r3, #1
 8005432:	bf14      	ite	ne
 8005434:	2301      	movne	r3, #1
 8005436:	2300      	moveq	r3, #0
 8005438:	b2db      	uxtb	r3, r3
 800543a:	e008      	b.n	800544e <HAL_TIM_PWM_Start+0x6a>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b01      	cmp	r3, #1
 8005446:	bf14      	ite	ne
 8005448:	2301      	movne	r3, #1
 800544a:	2300      	moveq	r3, #0
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e07c      	b.n	8005550 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d104      	bne.n	8005466 <HAL_TIM_PWM_Start+0x82>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2202      	movs	r2, #2
 8005460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005464:	e013      	b.n	800548e <HAL_TIM_PWM_Start+0xaa>
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2b04      	cmp	r3, #4
 800546a:	d104      	bne.n	8005476 <HAL_TIM_PWM_Start+0x92>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005474:	e00b      	b.n	800548e <HAL_TIM_PWM_Start+0xaa>
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	2b08      	cmp	r3, #8
 800547a:	d104      	bne.n	8005486 <HAL_TIM_PWM_Start+0xa2>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2202      	movs	r2, #2
 8005480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005484:	e003      	b.n	800548e <HAL_TIM_PWM_Start+0xaa>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2202      	movs	r2, #2
 800548a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2201      	movs	r2, #1
 8005494:	6839      	ldr	r1, [r7, #0]
 8005496:	4618      	mov	r0, r3
 8005498:	f000 fe80 	bl	800619c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a2d      	ldr	r2, [pc, #180]	; (8005558 <HAL_TIM_PWM_Start+0x174>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d004      	beq.n	80054b0 <HAL_TIM_PWM_Start+0xcc>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a2c      	ldr	r2, [pc, #176]	; (800555c <HAL_TIM_PWM_Start+0x178>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d101      	bne.n	80054b4 <HAL_TIM_PWM_Start+0xd0>
 80054b0:	2301      	movs	r3, #1
 80054b2:	e000      	b.n	80054b6 <HAL_TIM_PWM_Start+0xd2>
 80054b4:	2300      	movs	r3, #0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d007      	beq.n	80054ca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a22      	ldr	r2, [pc, #136]	; (8005558 <HAL_TIM_PWM_Start+0x174>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d022      	beq.n	800551a <HAL_TIM_PWM_Start+0x136>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054dc:	d01d      	beq.n	800551a <HAL_TIM_PWM_Start+0x136>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a1f      	ldr	r2, [pc, #124]	; (8005560 <HAL_TIM_PWM_Start+0x17c>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d018      	beq.n	800551a <HAL_TIM_PWM_Start+0x136>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a1d      	ldr	r2, [pc, #116]	; (8005564 <HAL_TIM_PWM_Start+0x180>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d013      	beq.n	800551a <HAL_TIM_PWM_Start+0x136>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a1c      	ldr	r2, [pc, #112]	; (8005568 <HAL_TIM_PWM_Start+0x184>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d00e      	beq.n	800551a <HAL_TIM_PWM_Start+0x136>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a16      	ldr	r2, [pc, #88]	; (800555c <HAL_TIM_PWM_Start+0x178>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d009      	beq.n	800551a <HAL_TIM_PWM_Start+0x136>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a18      	ldr	r2, [pc, #96]	; (800556c <HAL_TIM_PWM_Start+0x188>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d004      	beq.n	800551a <HAL_TIM_PWM_Start+0x136>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a16      	ldr	r2, [pc, #88]	; (8005570 <HAL_TIM_PWM_Start+0x18c>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d111      	bne.n	800553e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f003 0307 	and.w	r3, r3, #7
 8005524:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2b06      	cmp	r3, #6
 800552a:	d010      	beq.n	800554e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f042 0201 	orr.w	r2, r2, #1
 800553a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800553c:	e007      	b.n	800554e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f042 0201 	orr.w	r2, r2, #1
 800554c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	40010000 	.word	0x40010000
 800555c:	40010400 	.word	0x40010400
 8005560:	40000400 	.word	0x40000400
 8005564:	40000800 	.word	0x40000800
 8005568:	40000c00 	.word	0x40000c00
 800556c:	40014000 	.word	0x40014000
 8005570:	40001800 	.word	0x40001800

08005574 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2200      	movs	r2, #0
 8005584:	6839      	ldr	r1, [r7, #0]
 8005586:	4618      	mov	r0, r3
 8005588:	f000 fe08 	bl	800619c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a2e      	ldr	r2, [pc, #184]	; (800564c <HAL_TIM_PWM_Stop+0xd8>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d004      	beq.n	80055a0 <HAL_TIM_PWM_Stop+0x2c>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a2d      	ldr	r2, [pc, #180]	; (8005650 <HAL_TIM_PWM_Stop+0xdc>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d101      	bne.n	80055a4 <HAL_TIM_PWM_Stop+0x30>
 80055a0:	2301      	movs	r3, #1
 80055a2:	e000      	b.n	80055a6 <HAL_TIM_PWM_Stop+0x32>
 80055a4:	2300      	movs	r3, #0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d017      	beq.n	80055da <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6a1a      	ldr	r2, [r3, #32]
 80055b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80055b4:	4013      	ands	r3, r2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10f      	bne.n	80055da <HAL_TIM_PWM_Stop+0x66>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6a1a      	ldr	r2, [r3, #32]
 80055c0:	f240 4344 	movw	r3, #1092	; 0x444
 80055c4:	4013      	ands	r3, r2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d107      	bne.n	80055da <HAL_TIM_PWM_Stop+0x66>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6a1a      	ldr	r2, [r3, #32]
 80055e0:	f241 1311 	movw	r3, #4369	; 0x1111
 80055e4:	4013      	ands	r3, r2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10f      	bne.n	800560a <HAL_TIM_PWM_Stop+0x96>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6a1a      	ldr	r2, [r3, #32]
 80055f0:	f240 4344 	movw	r3, #1092	; 0x444
 80055f4:	4013      	ands	r3, r2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d107      	bne.n	800560a <HAL_TIM_PWM_Stop+0x96>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0201 	bic.w	r2, r2, #1
 8005608:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d104      	bne.n	800561a <HAL_TIM_PWM_Stop+0xa6>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005618:	e013      	b.n	8005642 <HAL_TIM_PWM_Stop+0xce>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b04      	cmp	r3, #4
 800561e:	d104      	bne.n	800562a <HAL_TIM_PWM_Stop+0xb6>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005628:	e00b      	b.n	8005642 <HAL_TIM_PWM_Stop+0xce>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2b08      	cmp	r3, #8
 800562e:	d104      	bne.n	800563a <HAL_TIM_PWM_Stop+0xc6>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005638:	e003      	b.n	8005642 <HAL_TIM_PWM_Stop+0xce>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	40010000 	.word	0x40010000
 8005650:	40010400 	.word	0x40010400

08005654 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b02      	cmp	r3, #2
 8005668:	d122      	bne.n	80056b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b02      	cmp	r3, #2
 8005676:	d11b      	bne.n	80056b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f06f 0202 	mvn.w	r2, #2
 8005680:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	f003 0303 	and.w	r3, r3, #3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fa77 	bl	8005b8a <HAL_TIM_IC_CaptureCallback>
 800569c:	e005      	b.n	80056aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fa69 	bl	8005b76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 fa7a 	bl	8005b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	f003 0304 	and.w	r3, r3, #4
 80056ba:	2b04      	cmp	r3, #4
 80056bc:	d122      	bne.n	8005704 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f003 0304 	and.w	r3, r3, #4
 80056c8:	2b04      	cmp	r3, #4
 80056ca:	d11b      	bne.n	8005704 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f06f 0204 	mvn.w	r2, #4
 80056d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2202      	movs	r2, #2
 80056da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 fa4d 	bl	8005b8a <HAL_TIM_IC_CaptureCallback>
 80056f0:	e005      	b.n	80056fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fa3f 	bl	8005b76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 fa50 	bl	8005b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f003 0308 	and.w	r3, r3, #8
 800570e:	2b08      	cmp	r3, #8
 8005710:	d122      	bne.n	8005758 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f003 0308 	and.w	r3, r3, #8
 800571c:	2b08      	cmp	r3, #8
 800571e:	d11b      	bne.n	8005758 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f06f 0208 	mvn.w	r2, #8
 8005728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2204      	movs	r2, #4
 800572e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	f003 0303 	and.w	r3, r3, #3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 fa23 	bl	8005b8a <HAL_TIM_IC_CaptureCallback>
 8005744:	e005      	b.n	8005752 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 fa15 	bl	8005b76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 fa26 	bl	8005b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	f003 0310 	and.w	r3, r3, #16
 8005762:	2b10      	cmp	r3, #16
 8005764:	d122      	bne.n	80057ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f003 0310 	and.w	r3, r3, #16
 8005770:	2b10      	cmp	r3, #16
 8005772:	d11b      	bne.n	80057ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f06f 0210 	mvn.w	r2, #16
 800577c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2208      	movs	r2, #8
 8005782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f9f9 	bl	8005b8a <HAL_TIM_IC_CaptureCallback>
 8005798:	e005      	b.n	80057a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f9eb 	bl	8005b76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f9fc 	bl	8005b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d10e      	bne.n	80057d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	f003 0301 	and.w	r3, r3, #1
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d107      	bne.n	80057d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f06f 0201 	mvn.w	r2, #1
 80057d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f7fb fd46 	bl	8001264 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e2:	2b80      	cmp	r3, #128	; 0x80
 80057e4:	d10e      	bne.n	8005804 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f0:	2b80      	cmp	r3, #128	; 0x80
 80057f2:	d107      	bne.n	8005804 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 fd78 	bl	80062f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580e:	2b40      	cmp	r3, #64	; 0x40
 8005810:	d10e      	bne.n	8005830 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581c:	2b40      	cmp	r3, #64	; 0x40
 800581e:	d107      	bne.n	8005830 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f9c1 	bl	8005bb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	f003 0320 	and.w	r3, r3, #32
 800583a:	2b20      	cmp	r3, #32
 800583c:	d10e      	bne.n	800585c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	f003 0320 	and.w	r3, r3, #32
 8005848:	2b20      	cmp	r3, #32
 800584a:	d107      	bne.n	800585c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f06f 0220 	mvn.w	r2, #32
 8005854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 fd42 	bl	80062e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800585c:	bf00      	nop
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005870:	2300      	movs	r3, #0
 8005872:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800587a:	2b01      	cmp	r3, #1
 800587c:	d101      	bne.n	8005882 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800587e:	2302      	movs	r3, #2
 8005880:	e0ae      	b.n	80059e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2201      	movs	r2, #1
 8005886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b0c      	cmp	r3, #12
 800588e:	f200 809f 	bhi.w	80059d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005892:	a201      	add	r2, pc, #4	; (adr r2, 8005898 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005898:	080058cd 	.word	0x080058cd
 800589c:	080059d1 	.word	0x080059d1
 80058a0:	080059d1 	.word	0x080059d1
 80058a4:	080059d1 	.word	0x080059d1
 80058a8:	0800590d 	.word	0x0800590d
 80058ac:	080059d1 	.word	0x080059d1
 80058b0:	080059d1 	.word	0x080059d1
 80058b4:	080059d1 	.word	0x080059d1
 80058b8:	0800594f 	.word	0x0800594f
 80058bc:	080059d1 	.word	0x080059d1
 80058c0:	080059d1 	.word	0x080059d1
 80058c4:	080059d1 	.word	0x080059d1
 80058c8:	0800598f 	.word	0x0800598f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68b9      	ldr	r1, [r7, #8]
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 fa18 	bl	8005d08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699a      	ldr	r2, [r3, #24]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0208 	orr.w	r2, r2, #8
 80058e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	699a      	ldr	r2, [r3, #24]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 0204 	bic.w	r2, r2, #4
 80058f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6999      	ldr	r1, [r3, #24]
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	691a      	ldr	r2, [r3, #16]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	619a      	str	r2, [r3, #24]
      break;
 800590a:	e064      	b.n	80059d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68b9      	ldr	r1, [r7, #8]
 8005912:	4618      	mov	r0, r3
 8005914:	f000 fa68 	bl	8005de8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	699a      	ldr	r2, [r3, #24]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005926:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	699a      	ldr	r2, [r3, #24]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005936:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6999      	ldr	r1, [r3, #24]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	021a      	lsls	r2, r3, #8
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	430a      	orrs	r2, r1
 800594a:	619a      	str	r2, [r3, #24]
      break;
 800594c:	e043      	b.n	80059d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68b9      	ldr	r1, [r7, #8]
 8005954:	4618      	mov	r0, r3
 8005956:	f000 fabd 	bl	8005ed4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	69da      	ldr	r2, [r3, #28]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f042 0208 	orr.w	r2, r2, #8
 8005968:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	69da      	ldr	r2, [r3, #28]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 0204 	bic.w	r2, r2, #4
 8005978:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	69d9      	ldr	r1, [r3, #28]
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	691a      	ldr	r2, [r3, #16]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	430a      	orrs	r2, r1
 800598a:	61da      	str	r2, [r3, #28]
      break;
 800598c:	e023      	b.n	80059d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68b9      	ldr	r1, [r7, #8]
 8005994:	4618      	mov	r0, r3
 8005996:	f000 fb11 	bl	8005fbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	69da      	ldr	r2, [r3, #28]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	69da      	ldr	r2, [r3, #28]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	69d9      	ldr	r1, [r3, #28]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	021a      	lsls	r2, r3, #8
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	61da      	str	r2, [r3, #28]
      break;
 80059ce:	e002      	b.n	80059d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	75fb      	strb	r3, [r7, #23]
      break;
 80059d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059de:	7dfb      	ldrb	r3, [r7, #23]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3718      	adds	r7, #24
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d101      	bne.n	8005a04 <HAL_TIM_ConfigClockSource+0x1c>
 8005a00:	2302      	movs	r3, #2
 8005a02:	e0b4      	b.n	8005b6e <HAL_TIM_ConfigClockSource+0x186>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2202      	movs	r2, #2
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a3c:	d03e      	beq.n	8005abc <HAL_TIM_ConfigClockSource+0xd4>
 8005a3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a42:	f200 8087 	bhi.w	8005b54 <HAL_TIM_ConfigClockSource+0x16c>
 8005a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a4a:	f000 8086 	beq.w	8005b5a <HAL_TIM_ConfigClockSource+0x172>
 8005a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a52:	d87f      	bhi.n	8005b54 <HAL_TIM_ConfigClockSource+0x16c>
 8005a54:	2b70      	cmp	r3, #112	; 0x70
 8005a56:	d01a      	beq.n	8005a8e <HAL_TIM_ConfigClockSource+0xa6>
 8005a58:	2b70      	cmp	r3, #112	; 0x70
 8005a5a:	d87b      	bhi.n	8005b54 <HAL_TIM_ConfigClockSource+0x16c>
 8005a5c:	2b60      	cmp	r3, #96	; 0x60
 8005a5e:	d050      	beq.n	8005b02 <HAL_TIM_ConfigClockSource+0x11a>
 8005a60:	2b60      	cmp	r3, #96	; 0x60
 8005a62:	d877      	bhi.n	8005b54 <HAL_TIM_ConfigClockSource+0x16c>
 8005a64:	2b50      	cmp	r3, #80	; 0x50
 8005a66:	d03c      	beq.n	8005ae2 <HAL_TIM_ConfigClockSource+0xfa>
 8005a68:	2b50      	cmp	r3, #80	; 0x50
 8005a6a:	d873      	bhi.n	8005b54 <HAL_TIM_ConfigClockSource+0x16c>
 8005a6c:	2b40      	cmp	r3, #64	; 0x40
 8005a6e:	d058      	beq.n	8005b22 <HAL_TIM_ConfigClockSource+0x13a>
 8005a70:	2b40      	cmp	r3, #64	; 0x40
 8005a72:	d86f      	bhi.n	8005b54 <HAL_TIM_ConfigClockSource+0x16c>
 8005a74:	2b30      	cmp	r3, #48	; 0x30
 8005a76:	d064      	beq.n	8005b42 <HAL_TIM_ConfigClockSource+0x15a>
 8005a78:	2b30      	cmp	r3, #48	; 0x30
 8005a7a:	d86b      	bhi.n	8005b54 <HAL_TIM_ConfigClockSource+0x16c>
 8005a7c:	2b20      	cmp	r3, #32
 8005a7e:	d060      	beq.n	8005b42 <HAL_TIM_ConfigClockSource+0x15a>
 8005a80:	2b20      	cmp	r3, #32
 8005a82:	d867      	bhi.n	8005b54 <HAL_TIM_ConfigClockSource+0x16c>
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d05c      	beq.n	8005b42 <HAL_TIM_ConfigClockSource+0x15a>
 8005a88:	2b10      	cmp	r3, #16
 8005a8a:	d05a      	beq.n	8005b42 <HAL_TIM_ConfigClockSource+0x15a>
 8005a8c:	e062      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6818      	ldr	r0, [r3, #0]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	6899      	ldr	r1, [r3, #8]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	f000 fb5d 	bl	800615c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ab0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	609a      	str	r2, [r3, #8]
      break;
 8005aba:	e04f      	b.n	8005b5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6818      	ldr	r0, [r3, #0]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	6899      	ldr	r1, [r3, #8]
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	f000 fb46 	bl	800615c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689a      	ldr	r2, [r3, #8]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ade:	609a      	str	r2, [r3, #8]
      break;
 8005ae0:	e03c      	b.n	8005b5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6818      	ldr	r0, [r3, #0]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	6859      	ldr	r1, [r3, #4]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	461a      	mov	r2, r3
 8005af0:	f000 faba 	bl	8006068 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2150      	movs	r1, #80	; 0x50
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 fb13 	bl	8006126 <TIM_ITRx_SetConfig>
      break;
 8005b00:	e02c      	b.n	8005b5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6818      	ldr	r0, [r3, #0]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	6859      	ldr	r1, [r3, #4]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	f000 fad9 	bl	80060c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2160      	movs	r1, #96	; 0x60
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 fb03 	bl	8006126 <TIM_ITRx_SetConfig>
      break;
 8005b20:	e01c      	b.n	8005b5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6818      	ldr	r0, [r3, #0]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	6859      	ldr	r1, [r3, #4]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	f000 fa9a 	bl	8006068 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2140      	movs	r1, #64	; 0x40
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 faf3 	bl	8006126 <TIM_ITRx_SetConfig>
      break;
 8005b40:	e00c      	b.n	8005b5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	4610      	mov	r0, r2
 8005b4e:	f000 faea 	bl	8006126 <TIM_ITRx_SetConfig>
      break;
 8005b52:	e003      	b.n	8005b5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	73fb      	strb	r3, [r7, #15]
      break;
 8005b58:	e000      	b.n	8005b5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b083      	sub	sp, #12
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b7e:	bf00      	nop
 8005b80:	370c      	adds	r7, #12
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b92:	bf00      	nop
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b083      	sub	sp, #12
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ba6:	bf00      	nop
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b083      	sub	sp, #12
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bba:	bf00      	nop
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
	...

08005bc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a40      	ldr	r2, [pc, #256]	; (8005cdc <TIM_Base_SetConfig+0x114>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d013      	beq.n	8005c08 <TIM_Base_SetConfig+0x40>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be6:	d00f      	beq.n	8005c08 <TIM_Base_SetConfig+0x40>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a3d      	ldr	r2, [pc, #244]	; (8005ce0 <TIM_Base_SetConfig+0x118>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d00b      	beq.n	8005c08 <TIM_Base_SetConfig+0x40>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a3c      	ldr	r2, [pc, #240]	; (8005ce4 <TIM_Base_SetConfig+0x11c>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d007      	beq.n	8005c08 <TIM_Base_SetConfig+0x40>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a3b      	ldr	r2, [pc, #236]	; (8005ce8 <TIM_Base_SetConfig+0x120>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d003      	beq.n	8005c08 <TIM_Base_SetConfig+0x40>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a3a      	ldr	r2, [pc, #232]	; (8005cec <TIM_Base_SetConfig+0x124>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d108      	bne.n	8005c1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a2f      	ldr	r2, [pc, #188]	; (8005cdc <TIM_Base_SetConfig+0x114>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d02b      	beq.n	8005c7a <TIM_Base_SetConfig+0xb2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c28:	d027      	beq.n	8005c7a <TIM_Base_SetConfig+0xb2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a2c      	ldr	r2, [pc, #176]	; (8005ce0 <TIM_Base_SetConfig+0x118>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d023      	beq.n	8005c7a <TIM_Base_SetConfig+0xb2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a2b      	ldr	r2, [pc, #172]	; (8005ce4 <TIM_Base_SetConfig+0x11c>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d01f      	beq.n	8005c7a <TIM_Base_SetConfig+0xb2>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a2a      	ldr	r2, [pc, #168]	; (8005ce8 <TIM_Base_SetConfig+0x120>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d01b      	beq.n	8005c7a <TIM_Base_SetConfig+0xb2>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a29      	ldr	r2, [pc, #164]	; (8005cec <TIM_Base_SetConfig+0x124>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d017      	beq.n	8005c7a <TIM_Base_SetConfig+0xb2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a28      	ldr	r2, [pc, #160]	; (8005cf0 <TIM_Base_SetConfig+0x128>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d013      	beq.n	8005c7a <TIM_Base_SetConfig+0xb2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a27      	ldr	r2, [pc, #156]	; (8005cf4 <TIM_Base_SetConfig+0x12c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d00f      	beq.n	8005c7a <TIM_Base_SetConfig+0xb2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a26      	ldr	r2, [pc, #152]	; (8005cf8 <TIM_Base_SetConfig+0x130>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d00b      	beq.n	8005c7a <TIM_Base_SetConfig+0xb2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a25      	ldr	r2, [pc, #148]	; (8005cfc <TIM_Base_SetConfig+0x134>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d007      	beq.n	8005c7a <TIM_Base_SetConfig+0xb2>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a24      	ldr	r2, [pc, #144]	; (8005d00 <TIM_Base_SetConfig+0x138>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d003      	beq.n	8005c7a <TIM_Base_SetConfig+0xb2>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a23      	ldr	r2, [pc, #140]	; (8005d04 <TIM_Base_SetConfig+0x13c>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d108      	bne.n	8005c8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	689a      	ldr	r2, [r3, #8]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a0a      	ldr	r2, [pc, #40]	; (8005cdc <TIM_Base_SetConfig+0x114>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d003      	beq.n	8005cc0 <TIM_Base_SetConfig+0xf8>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a0c      	ldr	r2, [pc, #48]	; (8005cec <TIM_Base_SetConfig+0x124>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d103      	bne.n	8005cc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	691a      	ldr	r2, [r3, #16]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	615a      	str	r2, [r3, #20]
}
 8005cce:	bf00      	nop
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	40010000 	.word	0x40010000
 8005ce0:	40000400 	.word	0x40000400
 8005ce4:	40000800 	.word	0x40000800
 8005ce8:	40000c00 	.word	0x40000c00
 8005cec:	40010400 	.word	0x40010400
 8005cf0:	40014000 	.word	0x40014000
 8005cf4:	40014400 	.word	0x40014400
 8005cf8:	40014800 	.word	0x40014800
 8005cfc:	40001800 	.word	0x40001800
 8005d00:	40001c00 	.word	0x40001c00
 8005d04:	40002000 	.word	0x40002000

08005d08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	f023 0201 	bic.w	r2, r3, #1
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f023 0303 	bic.w	r3, r3, #3
 8005d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	f023 0302 	bic.w	r3, r3, #2
 8005d50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a20      	ldr	r2, [pc, #128]	; (8005de0 <TIM_OC1_SetConfig+0xd8>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d003      	beq.n	8005d6c <TIM_OC1_SetConfig+0x64>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a1f      	ldr	r2, [pc, #124]	; (8005de4 <TIM_OC1_SetConfig+0xdc>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d10c      	bne.n	8005d86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	f023 0308 	bic.w	r3, r3, #8
 8005d72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	f023 0304 	bic.w	r3, r3, #4
 8005d84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a15      	ldr	r2, [pc, #84]	; (8005de0 <TIM_OC1_SetConfig+0xd8>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d003      	beq.n	8005d96 <TIM_OC1_SetConfig+0x8e>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a14      	ldr	r2, [pc, #80]	; (8005de4 <TIM_OC1_SetConfig+0xdc>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d111      	bne.n	8005dba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005da4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	697a      	ldr	r2, [r7, #20]
 8005dd2:	621a      	str	r2, [r3, #32]
}
 8005dd4:	bf00      	nop
 8005dd6:	371c      	adds	r7, #28
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	40010000 	.word	0x40010000
 8005de4:	40010400 	.word	0x40010400

08005de8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	f023 0210 	bic.w	r2, r3, #16
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	021b      	lsls	r3, r3, #8
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f023 0320 	bic.w	r3, r3, #32
 8005e32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	011b      	lsls	r3, r3, #4
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a22      	ldr	r2, [pc, #136]	; (8005ecc <TIM_OC2_SetConfig+0xe4>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d003      	beq.n	8005e50 <TIM_OC2_SetConfig+0x68>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a21      	ldr	r2, [pc, #132]	; (8005ed0 <TIM_OC2_SetConfig+0xe8>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d10d      	bne.n	8005e6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	011b      	lsls	r3, r3, #4
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a17      	ldr	r2, [pc, #92]	; (8005ecc <TIM_OC2_SetConfig+0xe4>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d003      	beq.n	8005e7c <TIM_OC2_SetConfig+0x94>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a16      	ldr	r2, [pc, #88]	; (8005ed0 <TIM_OC2_SetConfig+0xe8>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d113      	bne.n	8005ea4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	685a      	ldr	r2, [r3, #4]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	621a      	str	r2, [r3, #32]
}
 8005ebe:	bf00      	nop
 8005ec0:	371c      	adds	r7, #28
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	40010000 	.word	0x40010000
 8005ed0:	40010400 	.word	0x40010400

08005ed4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b087      	sub	sp, #28
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 0303 	bic.w	r3, r3, #3
 8005f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	021b      	lsls	r3, r3, #8
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a21      	ldr	r2, [pc, #132]	; (8005fb4 <TIM_OC3_SetConfig+0xe0>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d003      	beq.n	8005f3a <TIM_OC3_SetConfig+0x66>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a20      	ldr	r2, [pc, #128]	; (8005fb8 <TIM_OC3_SetConfig+0xe4>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d10d      	bne.n	8005f56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	021b      	lsls	r3, r3, #8
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a16      	ldr	r2, [pc, #88]	; (8005fb4 <TIM_OC3_SetConfig+0xe0>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d003      	beq.n	8005f66 <TIM_OC3_SetConfig+0x92>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a15      	ldr	r2, [pc, #84]	; (8005fb8 <TIM_OC3_SetConfig+0xe4>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d113      	bne.n	8005f8e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	011b      	lsls	r3, r3, #4
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	011b      	lsls	r3, r3, #4
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	685a      	ldr	r2, [r3, #4]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	621a      	str	r2, [r3, #32]
}
 8005fa8:	bf00      	nop
 8005faa:	371c      	adds	r7, #28
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr
 8005fb4:	40010000 	.word	0x40010000
 8005fb8:	40010400 	.word	0x40010400

08005fbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ff2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	021b      	lsls	r3, r3, #8
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006006:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	031b      	lsls	r3, r3, #12
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	4313      	orrs	r3, r2
 8006012:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a12      	ldr	r2, [pc, #72]	; (8006060 <TIM_OC4_SetConfig+0xa4>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d003      	beq.n	8006024 <TIM_OC4_SetConfig+0x68>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a11      	ldr	r2, [pc, #68]	; (8006064 <TIM_OC4_SetConfig+0xa8>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d109      	bne.n	8006038 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800602a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	019b      	lsls	r3, r3, #6
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	4313      	orrs	r3, r2
 8006036:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	621a      	str	r2, [r3, #32]
}
 8006052:	bf00      	nop
 8006054:	371c      	adds	r7, #28
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	40010000 	.word	0x40010000
 8006064:	40010400 	.word	0x40010400

08006068 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006068:	b480      	push	{r7}
 800606a:	b087      	sub	sp, #28
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	f023 0201 	bic.w	r2, r3, #1
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006092:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	011b      	lsls	r3, r3, #4
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	4313      	orrs	r3, r2
 800609c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	f023 030a 	bic.w	r3, r3, #10
 80060a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	621a      	str	r2, [r3, #32]
}
 80060ba:	bf00      	nop
 80060bc:	371c      	adds	r7, #28
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b087      	sub	sp, #28
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	60f8      	str	r0, [r7, #12]
 80060ce:	60b9      	str	r1, [r7, #8]
 80060d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	f023 0210 	bic.w	r2, r3, #16
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6a1b      	ldr	r3, [r3, #32]
 80060e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	031b      	lsls	r3, r3, #12
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006102:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	011b      	lsls	r3, r3, #4
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	4313      	orrs	r3, r2
 800610c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	621a      	str	r2, [r3, #32]
}
 800611a:	bf00      	nop
 800611c:	371c      	adds	r7, #28
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr

08006126 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006126:	b480      	push	{r7}
 8006128:	b085      	sub	sp, #20
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
 800612e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4313      	orrs	r3, r2
 8006144:	f043 0307 	orr.w	r3, r3, #7
 8006148:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	609a      	str	r2, [r3, #8]
}
 8006150:	bf00      	nop
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
 8006168:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006176:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	021a      	lsls	r2, r3, #8
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	431a      	orrs	r2, r3
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	4313      	orrs	r3, r2
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	4313      	orrs	r3, r2
 8006188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	609a      	str	r2, [r3, #8]
}
 8006190:	bf00      	nop
 8006192:	371c      	adds	r7, #28
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800619c:	b480      	push	{r7}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	f003 031f 	and.w	r3, r3, #31
 80061ae:	2201      	movs	r2, #1
 80061b0:	fa02 f303 	lsl.w	r3, r2, r3
 80061b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6a1a      	ldr	r2, [r3, #32]
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	43db      	mvns	r3, r3
 80061be:	401a      	ands	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6a1a      	ldr	r2, [r3, #32]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	f003 031f 	and.w	r3, r3, #31
 80061ce:	6879      	ldr	r1, [r7, #4]
 80061d0:	fa01 f303 	lsl.w	r3, r1, r3
 80061d4:	431a      	orrs	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	621a      	str	r2, [r3, #32]
}
 80061da:	bf00      	nop
 80061dc:	371c      	adds	r7, #28
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
	...

080061e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d101      	bne.n	8006200 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061fc:	2302      	movs	r3, #2
 80061fe:	e05a      	b.n	80062b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2202      	movs	r2, #2
 800620c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006226:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	4313      	orrs	r3, r2
 8006230:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a21      	ldr	r2, [pc, #132]	; (80062c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d022      	beq.n	800628a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800624c:	d01d      	beq.n	800628a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a1d      	ldr	r2, [pc, #116]	; (80062c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d018      	beq.n	800628a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a1b      	ldr	r2, [pc, #108]	; (80062cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d013      	beq.n	800628a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a1a      	ldr	r2, [pc, #104]	; (80062d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d00e      	beq.n	800628a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a18      	ldr	r2, [pc, #96]	; (80062d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d009      	beq.n	800628a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a17      	ldr	r2, [pc, #92]	; (80062d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d004      	beq.n	800628a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a15      	ldr	r2, [pc, #84]	; (80062dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d10c      	bne.n	80062a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006290:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	4313      	orrs	r3, r2
 800629a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3714      	adds	r7, #20
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	40010000 	.word	0x40010000
 80062c8:	40000400 	.word	0x40000400
 80062cc:	40000800 	.word	0x40000800
 80062d0:	40000c00 	.word	0x40000c00
 80062d4:	40010400 	.word	0x40010400
 80062d8:	40014000 	.word	0x40014000
 80062dc:	40001800 	.word	0x40001800

080062e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d101      	bne.n	800631a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e03f      	b.n	800639a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d106      	bne.n	8006334 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7fb fc14 	bl	8001b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2224      	movs	r2, #36	; 0x24
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68da      	ldr	r2, [r3, #12]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800634a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f829 	bl	80063a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	691a      	ldr	r2, [r3, #16]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006360:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	695a      	ldr	r2, [r3, #20]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006370:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68da      	ldr	r2, [r3, #12]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006380:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2220      	movs	r2, #32
 800638c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2220      	movs	r2, #32
 8006394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3708      	adds	r7, #8
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
	...

080063a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063a8:	b09f      	sub	sp, #124	; 0x7c
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80063b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ba:	68d9      	ldr	r1, [r3, #12]
 80063bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	ea40 0301 	orr.w	r3, r0, r1
 80063c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063c8:	689a      	ldr	r2, [r3, #8]
 80063ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	431a      	orrs	r2, r3
 80063d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	431a      	orrs	r2, r3
 80063d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	4313      	orrs	r3, r2
 80063dc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80063de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80063e8:	f021 010c 	bic.w	r1, r1, #12
 80063ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063f2:	430b      	orrs	r3, r1
 80063f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	695b      	ldr	r3, [r3, #20]
 80063fc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006402:	6999      	ldr	r1, [r3, #24]
 8006404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	ea40 0301 	orr.w	r3, r0, r1
 800640c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800640e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	4bc5      	ldr	r3, [pc, #788]	; (8006728 <UART_SetConfig+0x384>)
 8006414:	429a      	cmp	r2, r3
 8006416:	d004      	beq.n	8006422 <UART_SetConfig+0x7e>
 8006418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	4bc3      	ldr	r3, [pc, #780]	; (800672c <UART_SetConfig+0x388>)
 800641e:	429a      	cmp	r2, r3
 8006420:	d103      	bne.n	800642a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006422:	f7fe fa4f 	bl	80048c4 <HAL_RCC_GetPCLK2Freq>
 8006426:	6778      	str	r0, [r7, #116]	; 0x74
 8006428:	e002      	b.n	8006430 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800642a:	f7fe fa37 	bl	800489c <HAL_RCC_GetPCLK1Freq>
 800642e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006432:	69db      	ldr	r3, [r3, #28]
 8006434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006438:	f040 80b6 	bne.w	80065a8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800643c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800643e:	461c      	mov	r4, r3
 8006440:	f04f 0500 	mov.w	r5, #0
 8006444:	4622      	mov	r2, r4
 8006446:	462b      	mov	r3, r5
 8006448:	1891      	adds	r1, r2, r2
 800644a:	6439      	str	r1, [r7, #64]	; 0x40
 800644c:	415b      	adcs	r3, r3
 800644e:	647b      	str	r3, [r7, #68]	; 0x44
 8006450:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006454:	1912      	adds	r2, r2, r4
 8006456:	eb45 0303 	adc.w	r3, r5, r3
 800645a:	f04f 0000 	mov.w	r0, #0
 800645e:	f04f 0100 	mov.w	r1, #0
 8006462:	00d9      	lsls	r1, r3, #3
 8006464:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006468:	00d0      	lsls	r0, r2, #3
 800646a:	4602      	mov	r2, r0
 800646c:	460b      	mov	r3, r1
 800646e:	1911      	adds	r1, r2, r4
 8006470:	6639      	str	r1, [r7, #96]	; 0x60
 8006472:	416b      	adcs	r3, r5
 8006474:	667b      	str	r3, [r7, #100]	; 0x64
 8006476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	461a      	mov	r2, r3
 800647c:	f04f 0300 	mov.w	r3, #0
 8006480:	1891      	adds	r1, r2, r2
 8006482:	63b9      	str	r1, [r7, #56]	; 0x38
 8006484:	415b      	adcs	r3, r3
 8006486:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006488:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800648c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006490:	f7fa fad8 	bl	8000a44 <__aeabi_uldivmod>
 8006494:	4602      	mov	r2, r0
 8006496:	460b      	mov	r3, r1
 8006498:	4ba5      	ldr	r3, [pc, #660]	; (8006730 <UART_SetConfig+0x38c>)
 800649a:	fba3 2302 	umull	r2, r3, r3, r2
 800649e:	095b      	lsrs	r3, r3, #5
 80064a0:	011e      	lsls	r6, r3, #4
 80064a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064a4:	461c      	mov	r4, r3
 80064a6:	f04f 0500 	mov.w	r5, #0
 80064aa:	4622      	mov	r2, r4
 80064ac:	462b      	mov	r3, r5
 80064ae:	1891      	adds	r1, r2, r2
 80064b0:	6339      	str	r1, [r7, #48]	; 0x30
 80064b2:	415b      	adcs	r3, r3
 80064b4:	637b      	str	r3, [r7, #52]	; 0x34
 80064b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80064ba:	1912      	adds	r2, r2, r4
 80064bc:	eb45 0303 	adc.w	r3, r5, r3
 80064c0:	f04f 0000 	mov.w	r0, #0
 80064c4:	f04f 0100 	mov.w	r1, #0
 80064c8:	00d9      	lsls	r1, r3, #3
 80064ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80064ce:	00d0      	lsls	r0, r2, #3
 80064d0:	4602      	mov	r2, r0
 80064d2:	460b      	mov	r3, r1
 80064d4:	1911      	adds	r1, r2, r4
 80064d6:	65b9      	str	r1, [r7, #88]	; 0x58
 80064d8:	416b      	adcs	r3, r5
 80064da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	461a      	mov	r2, r3
 80064e2:	f04f 0300 	mov.w	r3, #0
 80064e6:	1891      	adds	r1, r2, r2
 80064e8:	62b9      	str	r1, [r7, #40]	; 0x28
 80064ea:	415b      	adcs	r3, r3
 80064ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064f2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80064f6:	f7fa faa5 	bl	8000a44 <__aeabi_uldivmod>
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	4b8c      	ldr	r3, [pc, #560]	; (8006730 <UART_SetConfig+0x38c>)
 8006500:	fba3 1302 	umull	r1, r3, r3, r2
 8006504:	095b      	lsrs	r3, r3, #5
 8006506:	2164      	movs	r1, #100	; 0x64
 8006508:	fb01 f303 	mul.w	r3, r1, r3
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	00db      	lsls	r3, r3, #3
 8006510:	3332      	adds	r3, #50	; 0x32
 8006512:	4a87      	ldr	r2, [pc, #540]	; (8006730 <UART_SetConfig+0x38c>)
 8006514:	fba2 2303 	umull	r2, r3, r2, r3
 8006518:	095b      	lsrs	r3, r3, #5
 800651a:	005b      	lsls	r3, r3, #1
 800651c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006520:	441e      	add	r6, r3
 8006522:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006524:	4618      	mov	r0, r3
 8006526:	f04f 0100 	mov.w	r1, #0
 800652a:	4602      	mov	r2, r0
 800652c:	460b      	mov	r3, r1
 800652e:	1894      	adds	r4, r2, r2
 8006530:	623c      	str	r4, [r7, #32]
 8006532:	415b      	adcs	r3, r3
 8006534:	627b      	str	r3, [r7, #36]	; 0x24
 8006536:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800653a:	1812      	adds	r2, r2, r0
 800653c:	eb41 0303 	adc.w	r3, r1, r3
 8006540:	f04f 0400 	mov.w	r4, #0
 8006544:	f04f 0500 	mov.w	r5, #0
 8006548:	00dd      	lsls	r5, r3, #3
 800654a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800654e:	00d4      	lsls	r4, r2, #3
 8006550:	4622      	mov	r2, r4
 8006552:	462b      	mov	r3, r5
 8006554:	1814      	adds	r4, r2, r0
 8006556:	653c      	str	r4, [r7, #80]	; 0x50
 8006558:	414b      	adcs	r3, r1
 800655a:	657b      	str	r3, [r7, #84]	; 0x54
 800655c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	461a      	mov	r2, r3
 8006562:	f04f 0300 	mov.w	r3, #0
 8006566:	1891      	adds	r1, r2, r2
 8006568:	61b9      	str	r1, [r7, #24]
 800656a:	415b      	adcs	r3, r3
 800656c:	61fb      	str	r3, [r7, #28]
 800656e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006572:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006576:	f7fa fa65 	bl	8000a44 <__aeabi_uldivmod>
 800657a:	4602      	mov	r2, r0
 800657c:	460b      	mov	r3, r1
 800657e:	4b6c      	ldr	r3, [pc, #432]	; (8006730 <UART_SetConfig+0x38c>)
 8006580:	fba3 1302 	umull	r1, r3, r3, r2
 8006584:	095b      	lsrs	r3, r3, #5
 8006586:	2164      	movs	r1, #100	; 0x64
 8006588:	fb01 f303 	mul.w	r3, r1, r3
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	00db      	lsls	r3, r3, #3
 8006590:	3332      	adds	r3, #50	; 0x32
 8006592:	4a67      	ldr	r2, [pc, #412]	; (8006730 <UART_SetConfig+0x38c>)
 8006594:	fba2 2303 	umull	r2, r3, r2, r3
 8006598:	095b      	lsrs	r3, r3, #5
 800659a:	f003 0207 	and.w	r2, r3, #7
 800659e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4432      	add	r2, r6
 80065a4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80065a6:	e0b9      	b.n	800671c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065aa:	461c      	mov	r4, r3
 80065ac:	f04f 0500 	mov.w	r5, #0
 80065b0:	4622      	mov	r2, r4
 80065b2:	462b      	mov	r3, r5
 80065b4:	1891      	adds	r1, r2, r2
 80065b6:	6139      	str	r1, [r7, #16]
 80065b8:	415b      	adcs	r3, r3
 80065ba:	617b      	str	r3, [r7, #20]
 80065bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80065c0:	1912      	adds	r2, r2, r4
 80065c2:	eb45 0303 	adc.w	r3, r5, r3
 80065c6:	f04f 0000 	mov.w	r0, #0
 80065ca:	f04f 0100 	mov.w	r1, #0
 80065ce:	00d9      	lsls	r1, r3, #3
 80065d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80065d4:	00d0      	lsls	r0, r2, #3
 80065d6:	4602      	mov	r2, r0
 80065d8:	460b      	mov	r3, r1
 80065da:	eb12 0804 	adds.w	r8, r2, r4
 80065de:	eb43 0905 	adc.w	r9, r3, r5
 80065e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f04f 0100 	mov.w	r1, #0
 80065ec:	f04f 0200 	mov.w	r2, #0
 80065f0:	f04f 0300 	mov.w	r3, #0
 80065f4:	008b      	lsls	r3, r1, #2
 80065f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80065fa:	0082      	lsls	r2, r0, #2
 80065fc:	4640      	mov	r0, r8
 80065fe:	4649      	mov	r1, r9
 8006600:	f7fa fa20 	bl	8000a44 <__aeabi_uldivmod>
 8006604:	4602      	mov	r2, r0
 8006606:	460b      	mov	r3, r1
 8006608:	4b49      	ldr	r3, [pc, #292]	; (8006730 <UART_SetConfig+0x38c>)
 800660a:	fba3 2302 	umull	r2, r3, r3, r2
 800660e:	095b      	lsrs	r3, r3, #5
 8006610:	011e      	lsls	r6, r3, #4
 8006612:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006614:	4618      	mov	r0, r3
 8006616:	f04f 0100 	mov.w	r1, #0
 800661a:	4602      	mov	r2, r0
 800661c:	460b      	mov	r3, r1
 800661e:	1894      	adds	r4, r2, r2
 8006620:	60bc      	str	r4, [r7, #8]
 8006622:	415b      	adcs	r3, r3
 8006624:	60fb      	str	r3, [r7, #12]
 8006626:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800662a:	1812      	adds	r2, r2, r0
 800662c:	eb41 0303 	adc.w	r3, r1, r3
 8006630:	f04f 0400 	mov.w	r4, #0
 8006634:	f04f 0500 	mov.w	r5, #0
 8006638:	00dd      	lsls	r5, r3, #3
 800663a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800663e:	00d4      	lsls	r4, r2, #3
 8006640:	4622      	mov	r2, r4
 8006642:	462b      	mov	r3, r5
 8006644:	1814      	adds	r4, r2, r0
 8006646:	64bc      	str	r4, [r7, #72]	; 0x48
 8006648:	414b      	adcs	r3, r1
 800664a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800664c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	4618      	mov	r0, r3
 8006652:	f04f 0100 	mov.w	r1, #0
 8006656:	f04f 0200 	mov.w	r2, #0
 800665a:	f04f 0300 	mov.w	r3, #0
 800665e:	008b      	lsls	r3, r1, #2
 8006660:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006664:	0082      	lsls	r2, r0, #2
 8006666:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800666a:	f7fa f9eb 	bl	8000a44 <__aeabi_uldivmod>
 800666e:	4602      	mov	r2, r0
 8006670:	460b      	mov	r3, r1
 8006672:	4b2f      	ldr	r3, [pc, #188]	; (8006730 <UART_SetConfig+0x38c>)
 8006674:	fba3 1302 	umull	r1, r3, r3, r2
 8006678:	095b      	lsrs	r3, r3, #5
 800667a:	2164      	movs	r1, #100	; 0x64
 800667c:	fb01 f303 	mul.w	r3, r1, r3
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	011b      	lsls	r3, r3, #4
 8006684:	3332      	adds	r3, #50	; 0x32
 8006686:	4a2a      	ldr	r2, [pc, #168]	; (8006730 <UART_SetConfig+0x38c>)
 8006688:	fba2 2303 	umull	r2, r3, r2, r3
 800668c:	095b      	lsrs	r3, r3, #5
 800668e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006692:	441e      	add	r6, r3
 8006694:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006696:	4618      	mov	r0, r3
 8006698:	f04f 0100 	mov.w	r1, #0
 800669c:	4602      	mov	r2, r0
 800669e:	460b      	mov	r3, r1
 80066a0:	1894      	adds	r4, r2, r2
 80066a2:	603c      	str	r4, [r7, #0]
 80066a4:	415b      	adcs	r3, r3
 80066a6:	607b      	str	r3, [r7, #4]
 80066a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066ac:	1812      	adds	r2, r2, r0
 80066ae:	eb41 0303 	adc.w	r3, r1, r3
 80066b2:	f04f 0400 	mov.w	r4, #0
 80066b6:	f04f 0500 	mov.w	r5, #0
 80066ba:	00dd      	lsls	r5, r3, #3
 80066bc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80066c0:	00d4      	lsls	r4, r2, #3
 80066c2:	4622      	mov	r2, r4
 80066c4:	462b      	mov	r3, r5
 80066c6:	eb12 0a00 	adds.w	sl, r2, r0
 80066ca:	eb43 0b01 	adc.w	fp, r3, r1
 80066ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f04f 0100 	mov.w	r1, #0
 80066d8:	f04f 0200 	mov.w	r2, #0
 80066dc:	f04f 0300 	mov.w	r3, #0
 80066e0:	008b      	lsls	r3, r1, #2
 80066e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80066e6:	0082      	lsls	r2, r0, #2
 80066e8:	4650      	mov	r0, sl
 80066ea:	4659      	mov	r1, fp
 80066ec:	f7fa f9aa 	bl	8000a44 <__aeabi_uldivmod>
 80066f0:	4602      	mov	r2, r0
 80066f2:	460b      	mov	r3, r1
 80066f4:	4b0e      	ldr	r3, [pc, #56]	; (8006730 <UART_SetConfig+0x38c>)
 80066f6:	fba3 1302 	umull	r1, r3, r3, r2
 80066fa:	095b      	lsrs	r3, r3, #5
 80066fc:	2164      	movs	r1, #100	; 0x64
 80066fe:	fb01 f303 	mul.w	r3, r1, r3
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	011b      	lsls	r3, r3, #4
 8006706:	3332      	adds	r3, #50	; 0x32
 8006708:	4a09      	ldr	r2, [pc, #36]	; (8006730 <UART_SetConfig+0x38c>)
 800670a:	fba2 2303 	umull	r2, r3, r2, r3
 800670e:	095b      	lsrs	r3, r3, #5
 8006710:	f003 020f 	and.w	r2, r3, #15
 8006714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4432      	add	r2, r6
 800671a:	609a      	str	r2, [r3, #8]
}
 800671c:	bf00      	nop
 800671e:	377c      	adds	r7, #124	; 0x7c
 8006720:	46bd      	mov	sp, r7
 8006722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006726:	bf00      	nop
 8006728:	40011000 	.word	0x40011000
 800672c:	40011400 	.word	0x40011400
 8006730:	51eb851f 	.word	0x51eb851f

08006734 <__libc_init_array>:
 8006734:	b570      	push	{r4, r5, r6, lr}
 8006736:	4d0d      	ldr	r5, [pc, #52]	; (800676c <__libc_init_array+0x38>)
 8006738:	4c0d      	ldr	r4, [pc, #52]	; (8006770 <__libc_init_array+0x3c>)
 800673a:	1b64      	subs	r4, r4, r5
 800673c:	10a4      	asrs	r4, r4, #2
 800673e:	2600      	movs	r6, #0
 8006740:	42a6      	cmp	r6, r4
 8006742:	d109      	bne.n	8006758 <__libc_init_array+0x24>
 8006744:	4d0b      	ldr	r5, [pc, #44]	; (8006774 <__libc_init_array+0x40>)
 8006746:	4c0c      	ldr	r4, [pc, #48]	; (8006778 <__libc_init_array+0x44>)
 8006748:	f000 f820 	bl	800678c <_init>
 800674c:	1b64      	subs	r4, r4, r5
 800674e:	10a4      	asrs	r4, r4, #2
 8006750:	2600      	movs	r6, #0
 8006752:	42a6      	cmp	r6, r4
 8006754:	d105      	bne.n	8006762 <__libc_init_array+0x2e>
 8006756:	bd70      	pop	{r4, r5, r6, pc}
 8006758:	f855 3b04 	ldr.w	r3, [r5], #4
 800675c:	4798      	blx	r3
 800675e:	3601      	adds	r6, #1
 8006760:	e7ee      	b.n	8006740 <__libc_init_array+0xc>
 8006762:	f855 3b04 	ldr.w	r3, [r5], #4
 8006766:	4798      	blx	r3
 8006768:	3601      	adds	r6, #1
 800676a:	e7f2      	b.n	8006752 <__libc_init_array+0x1e>
 800676c:	080067d4 	.word	0x080067d4
 8006770:	080067d4 	.word	0x080067d4
 8006774:	080067d4 	.word	0x080067d4
 8006778:	080067d8 	.word	0x080067d8

0800677c <memset>:
 800677c:	4402      	add	r2, r0
 800677e:	4603      	mov	r3, r0
 8006780:	4293      	cmp	r3, r2
 8006782:	d100      	bne.n	8006786 <memset+0xa>
 8006784:	4770      	bx	lr
 8006786:	f803 1b01 	strb.w	r1, [r3], #1
 800678a:	e7f9      	b.n	8006780 <memset+0x4>

0800678c <_init>:
 800678c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800678e:	bf00      	nop
 8006790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006792:	bc08      	pop	{r3}
 8006794:	469e      	mov	lr, r3
 8006796:	4770      	bx	lr

08006798 <_fini>:
 8006798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800679a:	bf00      	nop
 800679c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800679e:	bc08      	pop	{r3}
 80067a0:	469e      	mov	lr, r3
 80067a2:	4770      	bx	lr
