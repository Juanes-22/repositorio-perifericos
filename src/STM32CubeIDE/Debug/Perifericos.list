
Perifericos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078e0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08007ab0  08007ab0  00017ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c0c  08007c0c  000200c0  2**0
                  CONTENTS
  4 .ARM          00000008  08007c0c  08007c0c  00017c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c14  08007c14  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c14  08007c14  00017c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c18  08007c18  00017c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08007c1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  200000c0  08007cdc  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  08007cdc  000203b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022860  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004afc  00000000  00000000  00042950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  00047450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001110  00000000  00000000  000487b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028207  00000000  00000000  000498c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f691  00000000  00000000  00071ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e29d5  00000000  00000000  00091158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00173b2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ff8  00000000  00000000  00173b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c0 	.word	0x200000c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007a98 	.word	0x08007a98

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c4 	.word	0x200000c4
 800020c:	08007a98 	.word	0x08007a98

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b96e 	b.w	8000da0 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	468c      	mov	ip, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f040 8083 	bne.w	8000bf2 <__udivmoddi4+0x116>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4617      	mov	r7, r2
 8000af0:	d947      	bls.n	8000b82 <__udivmoddi4+0xa6>
 8000af2:	fab2 f282 	clz	r2, r2
 8000af6:	b142      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af8:	f1c2 0020 	rsb	r0, r2, #32
 8000afc:	fa24 f000 	lsr.w	r0, r4, r0
 8000b00:	4091      	lsls	r1, r2
 8000b02:	4097      	lsls	r7, r2
 8000b04:	ea40 0c01 	orr.w	ip, r0, r1
 8000b08:	4094      	lsls	r4, r2
 8000b0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b0e:	0c23      	lsrs	r3, r4, #16
 8000b10:	fbbc f6f8 	udiv	r6, ip, r8
 8000b14:	fa1f fe87 	uxth.w	lr, r7
 8000b18:	fb08 c116 	mls	r1, r8, r6, ip
 8000b1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b20:	fb06 f10e 	mul.w	r1, r6, lr
 8000b24:	4299      	cmp	r1, r3
 8000b26:	d909      	bls.n	8000b3c <__udivmoddi4+0x60>
 8000b28:	18fb      	adds	r3, r7, r3
 8000b2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b2e:	f080 8119 	bcs.w	8000d64 <__udivmoddi4+0x288>
 8000b32:	4299      	cmp	r1, r3
 8000b34:	f240 8116 	bls.w	8000d64 <__udivmoddi4+0x288>
 8000b38:	3e02      	subs	r6, #2
 8000b3a:	443b      	add	r3, r7
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b44:	fb08 3310 	mls	r3, r8, r0, r3
 8000b48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b50:	45a6      	cmp	lr, r4
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x8c>
 8000b54:	193c      	adds	r4, r7, r4
 8000b56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b5a:	f080 8105 	bcs.w	8000d68 <__udivmoddi4+0x28c>
 8000b5e:	45a6      	cmp	lr, r4
 8000b60:	f240 8102 	bls.w	8000d68 <__udivmoddi4+0x28c>
 8000b64:	3802      	subs	r0, #2
 8000b66:	443c      	add	r4, r7
 8000b68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b6c:	eba4 040e 	sub.w	r4, r4, lr
 8000b70:	2600      	movs	r6, #0
 8000b72:	b11d      	cbz	r5, 8000b7c <__udivmoddi4+0xa0>
 8000b74:	40d4      	lsrs	r4, r2
 8000b76:	2300      	movs	r3, #0
 8000b78:	e9c5 4300 	strd	r4, r3, [r5]
 8000b7c:	4631      	mov	r1, r6
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	b902      	cbnz	r2, 8000b86 <__udivmoddi4+0xaa>
 8000b84:	deff      	udf	#255	; 0xff
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	2a00      	cmp	r2, #0
 8000b8c:	d150      	bne.n	8000c30 <__udivmoddi4+0x154>
 8000b8e:	1bcb      	subs	r3, r1, r7
 8000b90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b94:	fa1f f887 	uxth.w	r8, r7
 8000b98:	2601      	movs	r6, #1
 8000b9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b9e:	0c21      	lsrs	r1, r4, #16
 8000ba0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ba4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ba8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bac:	428b      	cmp	r3, r1
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0xe4>
 8000bb0:	1879      	adds	r1, r7, r1
 8000bb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0xe2>
 8000bb8:	428b      	cmp	r3, r1
 8000bba:	f200 80e9 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bbe:	4684      	mov	ip, r0
 8000bc0:	1ac9      	subs	r1, r1, r3
 8000bc2:	b2a3      	uxth	r3, r4
 8000bc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bcc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bd0:	fb08 f800 	mul.w	r8, r8, r0
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x10c>
 8000bd8:	193c      	adds	r4, r7, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x10a>
 8000be0:	45a0      	cmp	r8, r4
 8000be2:	f200 80d9 	bhi.w	8000d98 <__udivmoddi4+0x2bc>
 8000be6:	4618      	mov	r0, r3
 8000be8:	eba4 0408 	sub.w	r4, r4, r8
 8000bec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bf0:	e7bf      	b.n	8000b72 <__udivmoddi4+0x96>
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d909      	bls.n	8000c0a <__udivmoddi4+0x12e>
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	f000 80b1 	beq.w	8000d5e <__udivmoddi4+0x282>
 8000bfc:	2600      	movs	r6, #0
 8000bfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000c02:	4630      	mov	r0, r6
 8000c04:	4631      	mov	r1, r6
 8000c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0a:	fab3 f683 	clz	r6, r3
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	d14a      	bne.n	8000ca8 <__udivmoddi4+0x1cc>
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d302      	bcc.n	8000c1c <__udivmoddi4+0x140>
 8000c16:	4282      	cmp	r2, r0
 8000c18:	f200 80b8 	bhi.w	8000d8c <__udivmoddi4+0x2b0>
 8000c1c:	1a84      	subs	r4, r0, r2
 8000c1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c22:	2001      	movs	r0, #1
 8000c24:	468c      	mov	ip, r1
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	d0a8      	beq.n	8000b7c <__udivmoddi4+0xa0>
 8000c2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c2e:	e7a5      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000c30:	f1c2 0320 	rsb	r3, r2, #32
 8000c34:	fa20 f603 	lsr.w	r6, r0, r3
 8000c38:	4097      	lsls	r7, r2
 8000c3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c42:	40d9      	lsrs	r1, r3
 8000c44:	4330      	orrs	r0, r6
 8000c46:	0c03      	lsrs	r3, r0, #16
 8000c48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c4c:	fa1f f887 	uxth.w	r8, r7
 8000c50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c58:	fb06 f108 	mul.w	r1, r6, r8
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x19c>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c6a:	f080 808d 	bcs.w	8000d88 <__udivmoddi4+0x2ac>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 808a 	bls.w	8000d88 <__udivmoddi4+0x2ac>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b281      	uxth	r1, r0
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c88:	fb00 f308 	mul.w	r3, r0, r8
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	d907      	bls.n	8000ca0 <__udivmoddi4+0x1c4>
 8000c90:	1879      	adds	r1, r7, r1
 8000c92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c96:	d273      	bcs.n	8000d80 <__udivmoddi4+0x2a4>
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d971      	bls.n	8000d80 <__udivmoddi4+0x2a4>
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	4439      	add	r1, r7
 8000ca0:	1acb      	subs	r3, r1, r3
 8000ca2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ca6:	e778      	b.n	8000b9a <__udivmoddi4+0xbe>
 8000ca8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cac:	fa03 f406 	lsl.w	r4, r3, r6
 8000cb0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cb4:	431c      	orrs	r4, r3
 8000cb6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cba:	fa01 f306 	lsl.w	r3, r1, r6
 8000cbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cc6:	431f      	orrs	r7, r3
 8000cc8:	0c3b      	lsrs	r3, r7, #16
 8000cca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cce:	fa1f f884 	uxth.w	r8, r4
 8000cd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cda:	fb09 fa08 	mul.w	sl, r9, r8
 8000cde:	458a      	cmp	sl, r1
 8000ce0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ce4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x220>
 8000cea:	1861      	adds	r1, r4, r1
 8000cec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cf0:	d248      	bcs.n	8000d84 <__udivmoddi4+0x2a8>
 8000cf2:	458a      	cmp	sl, r1
 8000cf4:	d946      	bls.n	8000d84 <__udivmoddi4+0x2a8>
 8000cf6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cfa:	4421      	add	r1, r4
 8000cfc:	eba1 010a 	sub.w	r1, r1, sl
 8000d00:	b2bf      	uxth	r7, r7
 8000d02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d0e:	fb00 f808 	mul.w	r8, r0, r8
 8000d12:	45b8      	cmp	r8, r7
 8000d14:	d907      	bls.n	8000d26 <__udivmoddi4+0x24a>
 8000d16:	19e7      	adds	r7, r4, r7
 8000d18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1c:	d22e      	bcs.n	8000d7c <__udivmoddi4+0x2a0>
 8000d1e:	45b8      	cmp	r8, r7
 8000d20:	d92c      	bls.n	8000d7c <__udivmoddi4+0x2a0>
 8000d22:	3802      	subs	r0, #2
 8000d24:	4427      	add	r7, r4
 8000d26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d2a:	eba7 0708 	sub.w	r7, r7, r8
 8000d2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d32:	454f      	cmp	r7, r9
 8000d34:	46c6      	mov	lr, r8
 8000d36:	4649      	mov	r1, r9
 8000d38:	d31a      	bcc.n	8000d70 <__udivmoddi4+0x294>
 8000d3a:	d017      	beq.n	8000d6c <__udivmoddi4+0x290>
 8000d3c:	b15d      	cbz	r5, 8000d56 <__udivmoddi4+0x27a>
 8000d3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d42:	eb67 0701 	sbc.w	r7, r7, r1
 8000d46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d4a:	40f2      	lsrs	r2, r6
 8000d4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d50:	40f7      	lsrs	r7, r6
 8000d52:	e9c5 2700 	strd	r2, r7, [r5]
 8000d56:	2600      	movs	r6, #0
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	462e      	mov	r6, r5
 8000d60:	4628      	mov	r0, r5
 8000d62:	e70b      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000d64:	4606      	mov	r6, r0
 8000d66:	e6e9      	b.n	8000b3c <__udivmoddi4+0x60>
 8000d68:	4618      	mov	r0, r3
 8000d6a:	e6fd      	b.n	8000b68 <__udivmoddi4+0x8c>
 8000d6c:	4543      	cmp	r3, r8
 8000d6e:	d2e5      	bcs.n	8000d3c <__udivmoddi4+0x260>
 8000d70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d74:	eb69 0104 	sbc.w	r1, r9, r4
 8000d78:	3801      	subs	r0, #1
 8000d7a:	e7df      	b.n	8000d3c <__udivmoddi4+0x260>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	e7d2      	b.n	8000d26 <__udivmoddi4+0x24a>
 8000d80:	4660      	mov	r0, ip
 8000d82:	e78d      	b.n	8000ca0 <__udivmoddi4+0x1c4>
 8000d84:	4681      	mov	r9, r0
 8000d86:	e7b9      	b.n	8000cfc <__udivmoddi4+0x220>
 8000d88:	4666      	mov	r6, ip
 8000d8a:	e775      	b.n	8000c78 <__udivmoddi4+0x19c>
 8000d8c:	4630      	mov	r0, r6
 8000d8e:	e74a      	b.n	8000c26 <__udivmoddi4+0x14a>
 8000d90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d94:	4439      	add	r1, r7
 8000d96:	e713      	b.n	8000bc0 <__udivmoddi4+0xe4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	443c      	add	r4, r7
 8000d9c:	e724      	b.n	8000be8 <__udivmoddi4+0x10c>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_idiv0>:
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000daa:	463b      	mov	r3, r7
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000db6:	4b22      	ldr	r3, [pc, #136]	; (8000e40 <MX_ADC1_Init+0x9c>)
 8000db8:	4a22      	ldr	r2, [pc, #136]	; (8000e44 <MX_ADC1_Init+0xa0>)
 8000dba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dbc:	4b20      	ldr	r3, [pc, #128]	; (8000e40 <MX_ADC1_Init+0x9c>)
 8000dbe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dc2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dc4:	4b1e      	ldr	r3, [pc, #120]	; (8000e40 <MX_ADC1_Init+0x9c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000dca:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <MX_ADC1_Init+0x9c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dd0:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <MX_ADC1_Init+0x9c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <MX_ADC1_Init+0x9c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000dde:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <MX_ADC1_Init+0x9c>)
 8000de0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000de4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000de6:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <MX_ADC1_Init+0x9c>)
 8000de8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000dec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dee:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <MX_ADC1_Init+0x9c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <MX_ADC1_Init+0x9c>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dfa:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <MX_ADC1_Init+0x9c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e02:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <MX_ADC1_Init+0x9c>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e08:	480d      	ldr	r0, [pc, #52]	; (8000e40 <MX_ADC1_Init+0x9c>)
 8000e0a:	f001 fdfd 	bl	8002a08 <HAL_ADC_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000e14:	f000 fdc0 	bl	8001998 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e20:	2300      	movs	r3, #0
 8000e22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e24:	463b      	mov	r3, r7
 8000e26:	4619      	mov	r1, r3
 8000e28:	4805      	ldr	r0, [pc, #20]	; (8000e40 <MX_ADC1_Init+0x9c>)
 8000e2a:	f002 f89f 	bl	8002f6c <HAL_ADC_ConfigChannel>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000e34:	f000 fdb0 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e38:	bf00      	nop
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	200001c4 	.word	0x200001c4
 8000e44:	40012000 	.word	0x40012000

08000e48 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a32      	ldr	r2, [pc, #200]	; (8000f30 <HAL_ADC_MspInit+0xe8>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d15e      	bne.n	8000f28 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	4b31      	ldr	r3, [pc, #196]	; (8000f34 <HAL_ADC_MspInit+0xec>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e72:	4a30      	ldr	r2, [pc, #192]	; (8000f34 <HAL_ADC_MspInit+0xec>)
 8000e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e78:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7a:	4b2e      	ldr	r3, [pc, #184]	; (8000f34 <HAL_ADC_MspInit+0xec>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b2a      	ldr	r3, [pc, #168]	; (8000f34 <HAL_ADC_MspInit+0xec>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a29      	ldr	r2, [pc, #164]	; (8000f34 <HAL_ADC_MspInit+0xec>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b27      	ldr	r3, [pc, #156]	; (8000f34 <HAL_ADC_MspInit+0xec>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4820      	ldr	r0, [pc, #128]	; (8000f38 <HAL_ADC_MspInit+0xf0>)
 8000eb6:	f003 fe1b 	bl	8004af0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000eba:	4b20      	ldr	r3, [pc, #128]	; (8000f3c <HAL_ADC_MspInit+0xf4>)
 8000ebc:	4a20      	ldr	r2, [pc, #128]	; (8000f40 <HAL_ADC_MspInit+0xf8>)
 8000ebe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ec0:	4b1e      	ldr	r3, [pc, #120]	; (8000f3c <HAL_ADC_MspInit+0xf4>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ec6:	4b1d      	ldr	r3, [pc, #116]	; (8000f3c <HAL_ADC_MspInit+0xf4>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <HAL_ADC_MspInit+0xf4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <HAL_ADC_MspInit+0xf4>)
 8000ed4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ed8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000eda:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <HAL_ADC_MspInit+0xf4>)
 8000edc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ee0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ee2:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <HAL_ADC_MspInit+0xf4>)
 8000ee4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ee8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000eea:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <HAL_ADC_MspInit+0xf4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_ADC_MspInit+0xf4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ef6:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <HAL_ADC_MspInit+0xf4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000efc:	480f      	ldr	r0, [pc, #60]	; (8000f3c <HAL_ADC_MspInit+0xf4>)
 8000efe:	f003 fa87 	bl	8004410 <HAL_DMA_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000f08:	f000 fd46 	bl	8001998 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a0b      	ldr	r2, [pc, #44]	; (8000f3c <HAL_ADC_MspInit+0xf4>)
 8000f10:	639a      	str	r2, [r3, #56]	; 0x38
 8000f12:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <HAL_ADC_MspInit+0xf4>)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	2012      	movs	r0, #18
 8000f1e:	f003 fa40 	bl	80043a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000f22:	2012      	movs	r0, #18
 8000f24:	f003 fa59 	bl	80043da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f28:	bf00      	nop
 8000f2a:	3728      	adds	r7, #40	; 0x28
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40012000 	.word	0x40012000
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40020000 	.word	0x40020000
 8000f3c:	2000020c 	.word	0x2000020c
 8000f40:	40026410 	.word	0x40026410

08000f44 <MX_APP_Init>:
/***********************************************************************************************************************
 * Public functions implementation
 **********************************************************************************************************************/

void MX_APP_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
    /* Initialize board LEDs */
    BSP_LED_Init(LED1);
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f001 fadc 	bl	8002508 <BSP_LED_Init>
    BSP_LED_Init(LED2);
 8000f50:	2001      	movs	r0, #1
 8000f52:	f001 fad9 	bl	8002508 <BSP_LED_Init>
    BSP_LED_Init(LED3);
 8000f56:	2002      	movs	r0, #2
 8000f58:	f001 fad6 	bl	8002508 <BSP_LED_Init>

    /* Initialize board buzzer */
    BSP_BUZZER_Init();
 8000f5c:	f001 fa34 	bl	80023c8 <BSP_BUZZER_Init>

    /* Initialize hardware */
    BOTONES_HW_Init();
 8000f60:	f000 f914 	bl	800118c <BOTONES_HW_Init>
    PEDAL_HW_Init();
 8000f64:	f000 fff4 	bl	8001f50 <PEDAL_HW_Init>
    PANTALLA_HW_Init();
 8000f68:	f000 ff72 	bl	8001e50 <PANTALLA_HW_Init>
    CAN_HW_Init();
 8000f6c:	f000 fa8a 	bl	8001484 <CAN_HW_Init>

    /* Indicate that initialization was completed */
    for(int i=0; i<3; i++)
 8000f70:	2300      	movs	r3, #0
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	e01a      	b.n	8000fac <MX_APP_Init+0x68>
    {
    	BSP_LED_On(LED1);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f001 fb0e 	bl	8002598 <BSP_LED_On>
    	BSP_LED_On(LED2);
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	f001 fb0b 	bl	8002598 <BSP_LED_On>
    	BSP_LED_On(LED3);
 8000f82:	2002      	movs	r0, #2
 8000f84:	f001 fb08 	bl	8002598 <BSP_LED_On>

    	HAL_Delay(200);
 8000f88:	20c8      	movs	r0, #200	; 0xc8
 8000f8a:	f001 fd19 	bl	80029c0 <HAL_Delay>

    	BSP_LED_Off(LED1);
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f001 fb1c 	bl	80025cc <BSP_LED_Off>
    	BSP_LED_Off(LED2);
 8000f94:	2001      	movs	r0, #1
 8000f96:	f001 fb19 	bl	80025cc <BSP_LED_Off>
    	BSP_LED_Off(LED3);
 8000f9a:	2002      	movs	r0, #2
 8000f9c:	f001 fb16 	bl	80025cc <BSP_LED_Off>

    	HAL_Delay(200);
 8000fa0:	20c8      	movs	r0, #200	; 0xc8
 8000fa2:	f001 fd0d 	bl	80029c0 <HAL_Delay>
    for(int i=0; i<3; i++)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	dde1      	ble.n	8000f76 <MX_APP_Init+0x32>
    }
}
 8000fb2:	bf00      	nop
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <MX_APP_Process>:

void MX_APP_Process(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
	switch (app_state)
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <MX_APP_Process+0x7c>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d002      	beq.n	8000fce <MX_APP_Process+0x12>
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d026      	beq.n	800101a <MX_APP_Process+0x5e>
	    CAN_APP_Process();

		break;

	default:
		break;
 8000fcc:	e032      	b.n	8001034 <MX_APP_Process+0x78>
		blink_tickstart = HAL_GetTick();
 8000fce:	f001 fceb 	bl	80029a8 <HAL_GetTick>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	4a19      	ldr	r2, [pc, #100]	; (800103c <MX_APP_Process+0x80>)
 8000fd6:	6013      	str	r3, [r2, #0]
			if( (HAL_GetTick() - blink_tickstart) > BLINK_TIME )
 8000fd8:	f001 fce6 	bl	80029a8 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	4b17      	ldr	r3, [pc, #92]	; (800103c <MX_APP_Process+0x80>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	2bfa      	cmp	r3, #250	; 0xfa
 8000fe6:	d907      	bls.n	8000ff8 <MX_APP_Process+0x3c>
				BSP_LED_Toggle(LED1);
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f001 fb09 	bl	8002600 <BSP_LED_Toggle>
				blink_tickstart = HAL_GetTick();
 8000fee:	f001 fcdb 	bl	80029a8 <HAL_GetTick>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	4a11      	ldr	r2, [pc, #68]	; (800103c <MX_APP_Process+0x80>)
 8000ff6:	6013      	str	r3, [r2, #0]
			if (bus_can_input.control_ok == CAN_VALUE_MODULE_OK)
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <MX_APP_Process+0x84>)
 8000ffa:	789b      	ldrb	r3, [r3, #2]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d1eb      	bne.n	8000fd8 <MX_APP_Process+0x1c>
				HAL_Delay(500);
 8001000:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001004:	f001 fcdc 	bl	80029c0 <HAL_Delay>
				CAN_APP_Send_BusData(&bus_can_output);
 8001008:	480e      	ldr	r0, [pc, #56]	; (8001044 <MX_APP_Process+0x88>)
 800100a:	f000 f945 	bl	8001298 <CAN_APP_Send_BusData>
				INDICATORS_Finish_StartUp();
 800100e:	f000 fbfd 	bl	800180c <INDICATORS_Finish_StartUp>
				app_state = kRUNNING;
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_APP_Process+0x7c>)
 8001014:	2201      	movs	r2, #1
 8001016:	701a      	strb	r2, [r3, #0]
			if( (HAL_GetTick() - blink_tickstart) > BLINK_TIME )
 8001018:	e7de      	b.n	8000fd8 <MX_APP_Process+0x1c>
	    BOTONES_Process();
 800101a:	f000 f815 	bl	8001048 <BOTONES_Process>
	    PEDAL_Process();
 800101e:	f000 ff1d 	bl	8001e5c <PEDAL_Process>
	    PANTALLA_Process();
 8001022:	f000 fcbe 	bl	80019a2 <PANTALLA_Process>
	    INDICATORS_Process();
 8001026:	f000 fc38 	bl	800189a <INDICATORS_Process>
	    DECODE_DATA_Process();
 800102a:	f000 fa77 	bl	800151c <DECODE_DATA_Process>
	    CAN_APP_Process();
 800102e:	f000 f911 	bl	8001254 <CAN_APP_Process>
		break;
 8001032:	bf00      	nop
	}
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	200000dc 	.word	0x200000dc
 800103c:	2000026c 	.word	0x2000026c
 8001040:	200000e0 	.word	0x200000e0
 8001044:	2000002c 	.word	0x2000002c

08001048 <BOTONES_Process>:
 *
 * @param   None
 * @retval  None
 */
void BOTONES_Process(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	BOTONES_Update_HM_Btns();									// actualice pulsadores de hombre muerto en bus de datos
 800104c:	f000 f814 	bl	8001078 <BOTONES_Update_HM_Btns>

	BOTONES_Update_HM_State();									// actualice estado de hombre muerto en bus de datos
 8001050:	f000 f836 	bl	80010c0 <BOTONES_Update_HM_State>

	BOTONES_Send_HM_State( bus_data.hm_state, 
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <BOTONES_Process+0x28>)
 8001056:	78db      	ldrb	r3, [r3, #3]
 8001058:	4906      	ldr	r1, [pc, #24]	; (8001074 <BOTONES_Process+0x2c>)
 800105a:	4618      	mov	r0, r3
 800105c:	f000 f850 	bl	8001100 <BOTONES_Send_HM_State>
							&bus_can_output);					// envie estado hombre muerto a bus de salida CAN

	BOTONES_Send_DrivingMode_Btn( bus_data.btn_modo_manejo, 
 8001060:	4b03      	ldr	r3, [pc, #12]	; (8001070 <BOTONES_Process+0x28>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	4903      	ldr	r1, [pc, #12]	; (8001074 <BOTONES_Process+0x2c>)
 8001066:	4618      	mov	r0, r3
 8001068:	f000 f864 	bl	8001134 <BOTONES_Send_DrivingMode_Btn>
									&bus_can_output);			// envie modo de manejo presionado a bus de salida CAN
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000000 	.word	0x20000000
 8001074:	2000002c 	.word	0x2000002c

08001078 <BOTONES_Update_HM_Btns>:
 *
 * @param None
 * @retval None
 */
static void BOTONES_Update_HM_Btns(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	/* Pulsador 1 hombre muerto */
	if(HAL_GPIO_ReadPin(BTN_HM1_GPIO_Port, BTN_HM1_Pin) == GPIO_PIN_RESET)
 800107c:	2108      	movs	r1, #8
 800107e:	480e      	ldr	r0, [pc, #56]	; (80010b8 <BOTONES_Update_HM_Btns+0x40>)
 8001080:	f003 feca 	bl	8004e18 <HAL_GPIO_ReadPin>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d103      	bne.n	8001092 <BOTONES_Update_HM_Btns+0x1a>
	{
		bus_data.btn_hm1 = kBTN_PRESSED;
 800108a:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <BOTONES_Update_HM_Btns+0x44>)
 800108c:	2201      	movs	r2, #1
 800108e:	705a      	strb	r2, [r3, #1]
 8001090:	e002      	b.n	8001098 <BOTONES_Update_HM_Btns+0x20>
	}
	else
	{
		bus_data.btn_hm1 = kBTN_NOT_PRESSED;
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <BOTONES_Update_HM_Btns+0x44>)
 8001094:	2200      	movs	r2, #0
 8001096:	705a      	strb	r2, [r3, #1]
	}

	/* Pulsador 2 hombre muerto */
	if(HAL_GPIO_ReadPin(BTN_HM2_GPIO_Port, BTN_HM2_Pin) == GPIO_PIN_RESET)
 8001098:	2110      	movs	r1, #16
 800109a:	4807      	ldr	r0, [pc, #28]	; (80010b8 <BOTONES_Update_HM_Btns+0x40>)
 800109c:	f003 febc 	bl	8004e18 <HAL_GPIO_ReadPin>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d103      	bne.n	80010ae <BOTONES_Update_HM_Btns+0x36>
	{
		bus_data.btn_hm2 = kBTN_PRESSED;
 80010a6:	4b05      	ldr	r3, [pc, #20]	; (80010bc <BOTONES_Update_HM_Btns+0x44>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	709a      	strb	r2, [r3, #2]
	}
	else
	{
		bus_data.btn_hm2 = kBTN_NOT_PRESSED;
	}
}
 80010ac:	e002      	b.n	80010b4 <BOTONES_Update_HM_Btns+0x3c>
		bus_data.btn_hm2 = kBTN_NOT_PRESSED;
 80010ae:	4b03      	ldr	r3, [pc, #12]	; (80010bc <BOTONES_Update_HM_Btns+0x44>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	709a      	strb	r2, [r3, #2]
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40021000 	.word	0x40021000
 80010bc:	20000000 	.word	0x20000000

080010c0 <BOTONES_Update_HM_State>:
 *
 * @param None
 * @retval None
 */
static void BOTONES_Update_HM_State(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
	/* Ambos pulsadores de hombre muerto no presionados */
	if(bus_data.btn_hm1 == kBTN_NOT_PRESSED && bus_data.btn_hm2 == kBTN_NOT_PRESSED)
 80010c4:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <BOTONES_Update_HM_State+0x3c>)
 80010c6:	785b      	ldrb	r3, [r3, #1]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d107      	bne.n	80010dc <BOTONES_Update_HM_State+0x1c>
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <BOTONES_Update_HM_State+0x3c>)
 80010ce:	789b      	ldrb	r3, [r3, #2]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d103      	bne.n	80010dc <BOTONES_Update_HM_State+0x1c>
	{
		bus_data.hm_state = kHOMBRE_MUERTO_OFF;
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <BOTONES_Update_HM_State+0x3c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	70da      	strb	r2, [r3, #3]
	/* Cualquiera de los pulsadores de hombre muerto presionados */
	else if(bus_data.btn_hm1 == kBTN_PRESSED || bus_data.btn_hm2 == kBTN_PRESSED)
	{
		bus_data.hm_state = kHOMBRE_MUERTO_ON;
	}
}
 80010da:	e00a      	b.n	80010f2 <BOTONES_Update_HM_State+0x32>
	else if(bus_data.btn_hm1 == kBTN_PRESSED || bus_data.btn_hm2 == kBTN_PRESSED)
 80010dc:	4b07      	ldr	r3, [pc, #28]	; (80010fc <BOTONES_Update_HM_State+0x3c>)
 80010de:	785b      	ldrb	r3, [r3, #1]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d003      	beq.n	80010ec <BOTONES_Update_HM_State+0x2c>
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <BOTONES_Update_HM_State+0x3c>)
 80010e6:	789b      	ldrb	r3, [r3, #2]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d102      	bne.n	80010f2 <BOTONES_Update_HM_State+0x32>
		bus_data.hm_state = kHOMBRE_MUERTO_ON;
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <BOTONES_Update_HM_State+0x3c>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	70da      	strb	r2, [r3, #3]
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	20000000 	.word	0x20000000

08001100 <BOTONES_Send_HM_State>:
 *
 * @param to_send           Estado de hombre muerto a enviar
 * @param bus_can_output    Puntero a estructura de tipo typedef_bus2_t (bus de salida CAN)
 */
static void BOTONES_Send_HM_State(hm_state_t to_send, typedef_bus2_t* bus_can_output)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	71fb      	strb	r3, [r7, #7]
    /* Envío a bus de salida CAN */
    switch (to_send)
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d005      	beq.n	800111e <BOTONES_Send_HM_State+0x1e>
 8001112:	2b01      	cmp	r3, #1
 8001114:	d107      	bne.n	8001126 <BOTONES_Send_HM_State+0x26>
    {
    case kHOMBRE_MUERTO_ON:
        bus_can_output->hombre_muerto = CAN_VALUE_HM_PRESSED;
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	2201      	movs	r2, #1
 800111a:	705a      	strb	r2, [r3, #1]
        break;
 800111c:	e004      	b.n	8001128 <BOTONES_Send_HM_State+0x28>
    case kHOMBRE_MUERTO_OFF:
        bus_can_output->hombre_muerto = CAN_VALUE_HM_NOT_PRESSED;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	2202      	movs	r2, #2
 8001122:	705a      	strb	r2, [r3, #1]
        break;
 8001124:	e000      	b.n	8001128 <BOTONES_Send_HM_State+0x28>
    default:
        break;
 8001126:	bf00      	nop
    }
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <BOTONES_Send_DrivingMode_Btn>:
 *
 * @param to_send           Modo de manejo presionado a enviar
 * @param bus_can_output    Puntero a estructura de tipo typedef_bus2_t (bus de salida CAN)
 */
static void BOTONES_Send_DrivingMode_Btn(btn_modo_manejo_t to_send, typedef_bus2_t* bus_can_output)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
    /* Envío a bus de salida CAN */
    switch (to_send)
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	2b03      	cmp	r3, #3
 8001144:	d81a      	bhi.n	800117c <BOTONES_Send_DrivingMode_Btn+0x48>
 8001146:	a201      	add	r2, pc, #4	; (adr r2, 800114c <BOTONES_Send_DrivingMode_Btn+0x18>)
 8001148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800114c:	0800115d 	.word	0x0800115d
 8001150:	08001165 	.word	0x08001165
 8001154:	0800116d 	.word	0x0800116d
 8001158:	08001175 	.word	0x08001175
    {
    case kBTN_NONE:
        bus_can_output->botones_cambio_estado = CAN_VALUE_BTN_NONE;
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	2204      	movs	r2, #4
 8001160:	709a      	strb	r2, [r3, #2]
        break;
 8001162:	e00c      	b.n	800117e <BOTONES_Send_DrivingMode_Btn+0x4a>
    case kBTN_ECO:
        bus_can_output->botones_cambio_estado = CAN_VALUE_BTN_ECO;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	2202      	movs	r2, #2
 8001168:	709a      	strb	r2, [r3, #2]
        break;
 800116a:	e008      	b.n	800117e <BOTONES_Send_DrivingMode_Btn+0x4a>
    case kBTN_NORMAL:
        bus_can_output->botones_cambio_estado = CAN_VALUE_BTN_NORMAL;
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	2201      	movs	r2, #1
 8001170:	709a      	strb	r2, [r3, #2]
        break;
 8001172:	e004      	b.n	800117e <BOTONES_Send_DrivingMode_Btn+0x4a>
    case kBTN_SPORT:
        bus_can_output->botones_cambio_estado = CAN_VALUE_BTN_SPORT;
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	2203      	movs	r2, #3
 8001178:	709a      	strb	r2, [r3, #2]
        break;
 800117a:	e000      	b.n	800117e <BOTONES_Send_DrivingMode_Btn+0x4a>
    default:
        break;
 800117c:	bf00      	nop
    }
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop

0800118c <BOTONES_HW_Init>:
/***********************************************************************************************************************
 * Public functions implementation
 **********************************************************************************************************************/

void BOTONES_HW_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
    MX_GPIO_Init();
 8001190:	f000 fa9a 	bl	80016c8 <MX_GPIO_Init>
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_CAN_MspInit>:
  /* USER CODE END CAN2_Init 2 */

}

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN2)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a24      	ldr	r2, [pc, #144]	; (8001248 <HAL_CAN_MspInit+0xb0>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d142      	bne.n	8001240 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* CAN2 clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	4b23      	ldr	r3, [pc, #140]	; (800124c <HAL_CAN_MspInit+0xb4>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	4a22      	ldr	r2, [pc, #136]	; (800124c <HAL_CAN_MspInit+0xb4>)
 80011c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011c8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ca:	4b20      	ldr	r3, [pc, #128]	; (800124c <HAL_CAN_MspInit+0xb4>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	4b1c      	ldr	r3, [pc, #112]	; (800124c <HAL_CAN_MspInit+0xb4>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	4a1b      	ldr	r2, [pc, #108]	; (800124c <HAL_CAN_MspInit+0xb4>)
 80011e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011e4:	6413      	str	r3, [r2, #64]	; 0x40
 80011e6:	4b19      	ldr	r3, [pc, #100]	; (800124c <HAL_CAN_MspInit+0xb4>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <HAL_CAN_MspInit+0xb4>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a14      	ldr	r2, [pc, #80]	; (800124c <HAL_CAN_MspInit+0xb4>)
 80011fc:	f043 0302 	orr.w	r3, r3, #2
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_CAN_MspInit+0xb4>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800120e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121c:	2303      	movs	r3, #3
 800121e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001220:	2309      	movs	r3, #9
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	4809      	ldr	r0, [pc, #36]	; (8001250 <HAL_CAN_MspInit+0xb8>)
 800122c:	f003 fc60 	bl	8004af0 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	2100      	movs	r1, #0
 8001234:	2040      	movs	r0, #64	; 0x40
 8001236:	f003 f8b4 	bl	80043a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800123a:	2040      	movs	r0, #64	; 0x40
 800123c:	f003 f8cd 	bl	80043da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001240:	bf00      	nop
 8001242:	3728      	adds	r7, #40	; 0x28
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40006800 	.word	0x40006800
 800124c:	40023800 	.word	0x40023800
 8001250:	40020400 	.word	0x40020400

08001254 <CAN_APP_Process>:
 *
 * @param None
 * @retval None
 */
void CAN_APP_Process(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	/* Recibió mensaje CAN */
	if(flag_rx_can == CAN_MSG_RECEIVED)
 8001258:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <CAN_APP_Process+0x34>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d107      	bne.n	8001270 <CAN_APP_Process+0x1c>
	{
		/* Guarda mensaje CAN recibido en bus de entrada CAN */
		CAN_APP_Store_ReceivedMessage();
 8001260:	f000 f86c 	bl	800133c <CAN_APP_Store_ReceivedMessage>

		/* Clear CAN received message flag */
		flag_rx_can = CAN_MSG_NOT_RECEIVED;
 8001264:	4b08      	ldr	r3, [pc, #32]	; (8001288 <CAN_APP_Process+0x34>)
 8001266:	2201      	movs	r2, #1
 8001268:	701a      	strb	r2, [r3, #0]

		/* Activa bandera para decodificar */
		flag_decodificar = DECODIFICA;
 800126a:	4b08      	ldr	r3, [pc, #32]	; (800128c <CAN_APP_Process+0x38>)
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]
	}

	/* Hubo trigger para transmisión mensaje CAN */
	if(flag_tx_can == CAN_TX_READY)
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <CAN_APP_Process+0x3c>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d105      	bne.n	8001284 <CAN_APP_Process+0x30>
	{
		/* Envío de datos del bus de salida CAN a módulo CAN */
		CAN_APP_Send_BusData(&bus_can_output);
 8001278:	4806      	ldr	r0, [pc, #24]	; (8001294 <CAN_APP_Process+0x40>)
 800127a:	f000 f80d 	bl	8001298 <CAN_APP_Send_BusData>

		/* Clear CAN TX ready flag */
		flag_rx_can = CAN_TX_NOT_READY;
 800127e:	4b02      	ldr	r3, [pc, #8]	; (8001288 <CAN_APP_Process+0x34>)
 8001280:	2201      	movs	r2, #1
 8001282:	701a      	strb	r2, [r3, #0]
	}
}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000030 	.word	0x20000030
 800128c:	20000031 	.word	0x20000031
 8001290:	200000e8 	.word	0x200000e8
 8001294:	2000002c 	.word	0x2000002c

08001298 <CAN_APP_Send_BusData>:
 *
 * @param bus_can_output Puntero a estructura de tipo typedef_bus2_t (bus de salida CAN)
 * @retval None
 */
void CAN_APP_Send_BusData(typedef_bus2_t *bus_can_output)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	/* ---------------- Send pedal ----------------- */

	can_obj.Frame.id = CAN_ID_PEDAL;
 80012a0:	4b25      	ldr	r3, [pc, #148]	; (8001338 <CAN_APP_Send_BusData+0xa0>)
 80012a2:	2202      	movs	r2, #2
 80012a4:	601a      	str	r2, [r3, #0]
	can_obj.Frame.payload_length = 1;
 80012a6:	4b24      	ldr	r3, [pc, #144]	; (8001338 <CAN_APP_Send_BusData+0xa0>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	73da      	strb	r2, [r3, #15]
	can_obj.Frame.payload_buff[0] = bus_can_output->pedal;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	781a      	ldrb	r2, [r3, #0]
 80012b0:	4b21      	ldr	r3, [pc, #132]	; (8001338 <CAN_APP_Send_BusData+0xa0>)
 80012b2:	71da      	strb	r2, [r3, #7]

	if( CAN_API_Send_Message(&can_obj) != CAN_STATUS_OK )
 80012b4:	4820      	ldr	r0, [pc, #128]	; (8001338 <CAN_APP_Send_BusData+0xa0>)
 80012b6:	f001 f9e5 	bl	8002684 <CAN_API_Send_Message>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <CAN_APP_Send_BusData+0x2c>
	{
		Error_Handler();
 80012c0:	f000 fb6a 	bl	8001998 <Error_Handler>
	}

	/* ------------- Send hombre_muerto ------------- */

	can_obj.Frame.id = CAN_ID_HOMBRE_MUERTO;
 80012c4:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <CAN_APP_Send_BusData+0xa0>)
 80012c6:	2203      	movs	r2, #3
 80012c8:	601a      	str	r2, [r3, #0]
	can_obj.Frame.payload_length = 1;
 80012ca:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <CAN_APP_Send_BusData+0xa0>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	73da      	strb	r2, [r3, #15]
	can_obj.Frame.payload_buff[0] = bus_can_output->hombre_muerto;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	785a      	ldrb	r2, [r3, #1]
 80012d4:	4b18      	ldr	r3, [pc, #96]	; (8001338 <CAN_APP_Send_BusData+0xa0>)
 80012d6:	71da      	strb	r2, [r3, #7]

	if( CAN_API_Send_Message(&can_obj) != CAN_STATUS_OK )
 80012d8:	4817      	ldr	r0, [pc, #92]	; (8001338 <CAN_APP_Send_BusData+0xa0>)
 80012da:	f001 f9d3 	bl	8002684 <CAN_API_Send_Message>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <CAN_APP_Send_BusData+0x50>
	{
		Error_Handler();
 80012e4:	f000 fb58 	bl	8001998 <Error_Handler>
	}

	/* --------- Send botones_cambio_estado --------- */

	can_obj.Frame.id = CAN_ID_BOTONES_CAMBIO_ESTADO;
 80012e8:	4b13      	ldr	r3, [pc, #76]	; (8001338 <CAN_APP_Send_BusData+0xa0>)
 80012ea:	2204      	movs	r2, #4
 80012ec:	601a      	str	r2, [r3, #0]
	can_obj.Frame.payload_length = 1;
 80012ee:	4b12      	ldr	r3, [pc, #72]	; (8001338 <CAN_APP_Send_BusData+0xa0>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	73da      	strb	r2, [r3, #15]
	can_obj.Frame.payload_buff[0] = bus_can_output->botones_cambio_estado;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	789a      	ldrb	r2, [r3, #2]
 80012f8:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <CAN_APP_Send_BusData+0xa0>)
 80012fa:	71da      	strb	r2, [r3, #7]

	if( CAN_API_Send_Message(&can_obj) != CAN_STATUS_OK )
 80012fc:	480e      	ldr	r0, [pc, #56]	; (8001338 <CAN_APP_Send_BusData+0xa0>)
 80012fe:	f001 f9c1 	bl	8002684 <CAN_API_Send_Message>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <CAN_APP_Send_BusData+0x74>
	{
		Error_Handler();
 8001308:	f000 fb46 	bl	8001998 <Error_Handler>
	}

	/* ------------ Send perifericos_ok ------------ */

	can_obj.Frame.id = CAN_ID_PERIFERICOS_OK;
 800130c:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <CAN_APP_Send_BusData+0xa0>)
 800130e:	2205      	movs	r2, #5
 8001310:	601a      	str	r2, [r3, #0]
	can_obj.Frame.payload_length = 1;
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <CAN_APP_Send_BusData+0xa0>)
 8001314:	2201      	movs	r2, #1
 8001316:	73da      	strb	r2, [r3, #15]
	can_obj.Frame.payload_buff[0] = bus_can_output->perifericos_ok;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	78da      	ldrb	r2, [r3, #3]
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <CAN_APP_Send_BusData+0xa0>)
 800131e:	71da      	strb	r2, [r3, #7]

	if( CAN_API_Send_Message(&can_obj) != CAN_STATUS_OK )
 8001320:	4805      	ldr	r0, [pc, #20]	; (8001338 <CAN_APP_Send_BusData+0xa0>)
 8001322:	f001 f9af 	bl	8002684 <CAN_API_Send_Message>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <CAN_APP_Send_BusData+0x98>
	{
		Error_Handler();
 800132c:	f000 fb34 	bl	8001998 <Error_Handler>
	}
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000298 	.word	0x20000298

0800133c <CAN_APP_Store_ReceivedMessage>:
 * Private functions implementation
 **********************************************************************************************************************/

/* Guardar mensaje CAN recibido en bus de entrada CAN */
static void CAN_APP_Store_ReceivedMessage(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
	if(CAN_API_Read_Message(&can_obj) != CAN_STATUS_OK)
 8001340:	484e      	ldr	r0, [pc, #312]	; (800147c <CAN_APP_Store_ReceivedMessage+0x140>)
 8001342:	f001 f9c6 	bl	80026d2 <CAN_API_Read_Message>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <CAN_APP_Store_ReceivedMessage+0x14>
	{
		Error_Handler();
 800134c:	f000 fb24 	bl	8001998 <Error_Handler>
	}

	/* Según standard identifier que se recibió, guarda dato en variables de bus de recepción CAN */
	switch(can_obj.Frame.id)
 8001350:	4b4a      	ldr	r3, [pc, #296]	; (800147c <CAN_APP_Store_ReceivedMessage+0x140>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	3b10      	subs	r3, #16
 8001356:	2b30      	cmp	r3, #48	; 0x30
 8001358:	f200 808e 	bhi.w	8001478 <CAN_APP_Store_ReceivedMessage+0x13c>
 800135c:	a201      	add	r2, pc, #4	; (adr r2, 8001364 <CAN_APP_Store_ReceivedMessage+0x28>)
 800135e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001362:	bf00      	nop
 8001364:	08001429 	.word	0x08001429
 8001368:	08001433 	.word	0x08001433
 800136c:	08001479 	.word	0x08001479
 8001370:	08001479 	.word	0x08001479
 8001374:	0800143d 	.word	0x0800143d
 8001378:	08001479 	.word	0x08001479
 800137c:	08001479 	.word	0x08001479
 8001380:	08001479 	.word	0x08001479
 8001384:	08001479 	.word	0x08001479
 8001388:	08001479 	.word	0x08001479
 800138c:	08001479 	.word	0x08001479
 8001390:	08001479 	.word	0x08001479
 8001394:	08001479 	.word	0x08001479
 8001398:	08001479 	.word	0x08001479
 800139c:	08001479 	.word	0x08001479
 80013a0:	08001479 	.word	0x08001479
 80013a4:	08001447 	.word	0x08001447
 80013a8:	08001451 	.word	0x08001451
 80013ac:	08001479 	.word	0x08001479
 80013b0:	0800145b 	.word	0x0800145b
 80013b4:	08001479 	.word	0x08001479
 80013b8:	08001465 	.word	0x08001465
 80013bc:	08001479 	.word	0x08001479
 80013c0:	08001479 	.word	0x08001479
 80013c4:	08001479 	.word	0x08001479
 80013c8:	08001479 	.word	0x08001479
 80013cc:	08001479 	.word	0x08001479
 80013d0:	08001479 	.word	0x08001479
 80013d4:	08001479 	.word	0x08001479
 80013d8:	08001479 	.word	0x08001479
 80013dc:	08001479 	.word	0x08001479
 80013e0:	08001479 	.word	0x08001479
 80013e4:	08001479 	.word	0x08001479
 80013e8:	08001479 	.word	0x08001479
 80013ec:	08001479 	.word	0x08001479
 80013f0:	08001479 	.word	0x08001479
 80013f4:	08001479 	.word	0x08001479
 80013f8:	08001479 	.word	0x08001479
 80013fc:	08001479 	.word	0x08001479
 8001400:	08001479 	.word	0x08001479
 8001404:	08001479 	.word	0x08001479
 8001408:	08001479 	.word	0x08001479
 800140c:	08001479 	.word	0x08001479
 8001410:	08001479 	.word	0x08001479
 8001414:	08001479 	.word	0x08001479
 8001418:	08001479 	.word	0x08001479
 800141c:	08001479 	.word	0x08001479
 8001420:	08001479 	.word	0x08001479
 8001424:	0800146f 	.word	0x0800146f
	{

	/* ------------------------ Control ----------------------- */

	case CAN_ID_ESTADO_MANEJO:
		bus_can_input.estado_manejo = can_obj.Frame.payload_buff[0];
 8001428:	4b14      	ldr	r3, [pc, #80]	; (800147c <CAN_APP_Store_ReceivedMessage+0x140>)
 800142a:	79da      	ldrb	r2, [r3, #7]
 800142c:	4b14      	ldr	r3, [pc, #80]	; (8001480 <CAN_APP_Store_ReceivedMessage+0x144>)
 800142e:	701a      	strb	r2, [r3, #0]
		break;
 8001430:	e022      	b.n	8001478 <CAN_APP_Store_ReceivedMessage+0x13c>
	case CAN_ID_ESTADO_FALLA:
		bus_can_input.estado_falla = can_obj.Frame.payload_buff[0];
 8001432:	4b12      	ldr	r3, [pc, #72]	; (800147c <CAN_APP_Store_ReceivedMessage+0x140>)
 8001434:	79da      	ldrb	r2, [r3, #7]
 8001436:	4b12      	ldr	r3, [pc, #72]	; (8001480 <CAN_APP_Store_ReceivedMessage+0x144>)
 8001438:	705a      	strb	r2, [r3, #1]
		break;
 800143a:	e01d      	b.n	8001478 <CAN_APP_Store_ReceivedMessage+0x13c>
	case CAN_ID_CONTROL_OK:
		bus_can_input.control_ok = can_obj.Frame.payload_buff[0];
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <CAN_APP_Store_ReceivedMessage+0x140>)
 800143e:	79da      	ldrb	r2, [r3, #7]
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <CAN_APP_Store_ReceivedMessage+0x144>)
 8001442:	709a      	strb	r2, [r3, #2]
		break;
 8001444:	e018      	b.n	8001478 <CAN_APP_Store_ReceivedMessage+0x13c>

	/* ------------------------- BMS -------------------------- */

	case CAN_ID_VOLTAJE_BMS:
		bus_can_input.voltaje_bms = can_obj.Frame.payload_buff[0];
 8001446:	4b0d      	ldr	r3, [pc, #52]	; (800147c <CAN_APP_Store_ReceivedMessage+0x140>)
 8001448:	79da      	ldrb	r2, [r3, #7]
 800144a:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <CAN_APP_Store_ReceivedMessage+0x144>)
 800144c:	70da      	strb	r2, [r3, #3]
		break;
 800144e:	e013      	b.n	8001478 <CAN_APP_Store_ReceivedMessage+0x13c>
	case CAN_ID_CORRIENTE_BMS:
		bus_can_input.corriente_bms = can_obj.Frame.payload_buff[0];
 8001450:	4b0a      	ldr	r3, [pc, #40]	; (800147c <CAN_APP_Store_ReceivedMessage+0x140>)
 8001452:	79da      	ldrb	r2, [r3, #7]
 8001454:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <CAN_APP_Store_ReceivedMessage+0x144>)
 8001456:	711a      	strb	r2, [r3, #4]
		break;
 8001458:	e00e      	b.n	8001478 <CAN_APP_Store_ReceivedMessage+0x13c>
	case CAN_ID_POTENCIA_BMS:
		bus_can_input.potencia_bms = can_obj.Frame.payload_buff[0];
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <CAN_APP_Store_ReceivedMessage+0x140>)
 800145c:	79da      	ldrb	r2, [r3, #7]
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <CAN_APP_Store_ReceivedMessage+0x144>)
 8001460:	715a      	strb	r2, [r3, #5]
		break;
 8001462:	e009      	b.n	8001478 <CAN_APP_Store_ReceivedMessage+0x13c>
	case CAN_ID_NIVEL_BATERIA_BMS:
		bus_can_input.nivel_bateria_bms = can_obj.Frame.payload_buff[0];
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <CAN_APP_Store_ReceivedMessage+0x140>)
 8001466:	79da      	ldrb	r2, [r3, #7]
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <CAN_APP_Store_ReceivedMessage+0x144>)
 800146a:	719a      	strb	r2, [r3, #6]
		break;
 800146c:	e004      	b.n	8001478 <CAN_APP_Store_ReceivedMessage+0x13c>

	/* ----------------------- Inversor ----------------------- */

	case CAN_ID_VELOCIDAD_INVERSOR:
		bus_can_input.velocidad_inv = can_obj.Frame.payload_buff[0];
 800146e:	4b03      	ldr	r3, [pc, #12]	; (800147c <CAN_APP_Store_ReceivedMessage+0x140>)
 8001470:	79da      	ldrb	r2, [r3, #7]
 8001472:	4b03      	ldr	r3, [pc, #12]	; (8001480 <CAN_APP_Store_ReceivedMessage+0x144>)
 8001474:	71da      	strb	r2, [r3, #7]
		break;
 8001476:	bf00      	nop
	}
}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000298 	.word	0x20000298
 8001480:	200000e0 	.word	0x200000e0

08001484 <CAN_HW_Init>:
/***********************************************************************************************************************
 * Public functions implementation
 **********************************************************************************************************************/

void CAN_HW_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af04      	add	r7, sp, #16
  /* Initialize time base timer for CAN triggering */
  MX_TIM7_Init();
 800148a:	f000 fe8f 	bl	80021ac <MX_TIM7_Init>

  /* Inicializa CAN usando driver */
  CAN_API_Init( &can_obj,
 800148e:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <CAN_HW_Init+0x3c>)
 8001490:	9302      	str	r3, [sp, #8]
 8001492:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <CAN_HW_Init+0x40>)
 8001494:	9301      	str	r3, [sp, #4]
 8001496:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <CAN_HW_Init+0x44>)
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <CAN_HW_Init+0x48>)
 800149c:	2200      	movs	r2, #0
 800149e:	2100      	movs	r1, #0
 80014a0:	480b      	ldr	r0, [pc, #44]	; (80014d0 <CAN_HW_Init+0x4c>)
 80014a2:	f001 f8c7 	bl	8002634 <CAN_API_Init>

  /* Initialize CAN2 */
  //MX_CAN2_Init();

  /* Start CAN module */
  HAL_CAN_Start(&hcan2);
 80014a6:	480b      	ldr	r0, [pc, #44]	; (80014d4 <CAN_HW_Init+0x50>)
 80014a8:	f002 f9f6 	bl	8003898 <HAL_CAN_Start>

  /* Activate CAN notification (enable interrupts) */
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80014ac:	2102      	movs	r1, #2
 80014ae:	4809      	ldr	r0, [pc, #36]	; (80014d4 <CAN_HW_Init+0x50>)
 80014b0:	f002 fc47 	bl	8003d42 <HAL_CAN_ActivateNotification>

  /* Start time base trigger CAN timer */
  HAL_TIM_Base_Start_IT(&htim7);
 80014b4:	4808      	ldr	r0, [pc, #32]	; (80014d8 <CAN_HW_Init+0x54>)
 80014b6:	f004 fb1d 	bl	8005af4 <HAL_TIM_Base_Start_IT>
}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	080027a9 	.word	0x080027a9
 80014c4:	08002779 	.word	0x08002779
 80014c8:	08002711 	.word	0x08002711
 80014cc:	080026f7 	.word	0x080026f7
 80014d0:	20000298 	.word	0x20000298
 80014d4:	20000270 	.word	0x20000270
 80014d8:	20000314 	.word	0x20000314

080014dc <HAL_CAN_RxFifo0MsgPendingCallback>:
 * Exported functions implementation
 **********************************************************************************************************************/

/* Callback mensaje CAN recibido */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
    /* The flag indicates that the callback was called */
    flag_rx_can = CAN_MSG_RECEIVED;
 80014e4:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000030 	.word	0x20000030

080014fc <HAL_TIM_PeriodElapsedCallback>:

/* Callback timer trigger de transmisión de datos de bus de salida CAN a módulo CAN */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Toggle LED 1 (Red LED) */
  BSP_LED_Toggle(LED1);
 8001504:	2000      	movs	r0, #0
 8001506:	f001 f87b 	bl	8002600 <BSP_LED_Toggle>

  /* The flag indicates that the callback was called */
  flag_tx_can = CAN_TX_READY;
 800150a:	4b03      	ldr	r3, [pc, #12]	; (8001518 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800150c:	2200      	movs	r2, #0
 800150e:	701a      	strb	r2, [r3, #0]
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	200000e8 	.word	0x200000e8

0800151c <DECODE_DATA_Process>:
 *
 * @param None
 * @retval None
 */
void DECODE_DATA_Process(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
    if (flag_decodificar == DECODIFICA)
 8001520:	4b07      	ldr	r3, [pc, #28]	; (8001540 <DECODE_DATA_Process+0x24>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d108      	bne.n	800153a <DECODE_DATA_Process+0x1e>
    {
    	DECODE_DATA_Decode_Control();
 8001528:	f000 f80c 	bl	8001544 <DECODE_DATA_Decode_Control>

    	DECODE_DATA_Decode_Bms();
 800152c:	f000 f862 	bl	80015f4 <DECODE_DATA_Decode_Bms>

    	DECODE_DATA_Decode_Inversor();
 8001530:	f000 f894 	bl	800165c <DECODE_DATA_Decode_Inversor>

        flag_decodificar = NO_DECODIFICA;
 8001534:	4b02      	ldr	r3, [pc, #8]	; (8001540 <DECODE_DATA_Process+0x24>)
 8001536:	2201      	movs	r2, #1
 8001538:	701a      	strb	r2, [r3, #0]
    }
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000031 	.word	0x20000031

08001544 <DECODE_DATA_Decode_Control>:
 * los datos en la estructura Rx_Control del tipo rx_control_vars_t y que
 * se encuentra en el bus_data.
 *
 */
static void DECODE_DATA_Decode_Control(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
    /* Decodifica info de Control */
    switch (bus_can_input.control_ok)
 8001548:	4b28      	ldr	r3, [pc, #160]	; (80015ec <DECODE_DATA_Decode_Control+0xa8>)
 800154a:	789b      	ldrb	r3, [r3, #2]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d002      	beq.n	8001556 <DECODE_DATA_Decode_Control+0x12>
 8001550:	2b02      	cmp	r3, #2
 8001552:	d005      	beq.n	8001560 <DECODE_DATA_Decode_Control+0x1c>
 8001554:	e009      	b.n	800156a <DECODE_DATA_Decode_Control+0x26>
    {
    case CAN_VALUE_MODULE_OK:
        Rx_Control->control_ok = kMODULE_INFO_OK;
 8001556:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <DECODE_DATA_Decode_Control+0xac>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2200      	movs	r2, #0
 800155c:	709a      	strb	r2, [r3, #2]
        break;
 800155e:	e004      	b.n	800156a <DECODE_DATA_Decode_Control+0x26>
    case CAN_VALUE_MODULE_ERROR:
        Rx_Control->control_ok = kMODULE_INFO_ERROR;
 8001560:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <DECODE_DATA_Decode_Control+0xac>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2201      	movs	r2, #1
 8001566:	709a      	strb	r2, [r3, #2]
        break;
 8001568:	bf00      	nop
    }

	/* Decodifica modos de manejo de Control */
    switch (bus_can_input.estado_manejo)
 800156a:	4b20      	ldr	r3, [pc, #128]	; (80015ec <DECODE_DATA_Decode_Control+0xa8>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b04      	cmp	r3, #4
 8001570:	d00f      	beq.n	8001592 <DECODE_DATA_Decode_Control+0x4e>
 8001572:	2b04      	cmp	r3, #4
 8001574:	dc12      	bgt.n	800159c <DECODE_DATA_Decode_Control+0x58>
 8001576:	2b02      	cmp	r3, #2
 8001578:	d006      	beq.n	8001588 <DECODE_DATA_Decode_Control+0x44>
 800157a:	2b03      	cmp	r3, #3
 800157c:	d10e      	bne.n	800159c <DECODE_DATA_Decode_Control+0x58>
    {
    case CAN_VALUE_DRIVING_MODE_ECO:
    	Rx_Control->driving_mode = kDRIVING_MODE_ECO;
 800157e:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <DECODE_DATA_Decode_Control+0xac>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2200      	movs	r2, #0
 8001584:	701a      	strb	r2, [r3, #0]
        break;
 8001586:	e009      	b.n	800159c <DECODE_DATA_Decode_Control+0x58>
    case CAN_VALUE_DRIVING_MODE_NORMAL:
    	Rx_Control->driving_mode = kDRIVING_MODE_NORMAL;
 8001588:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <DECODE_DATA_Decode_Control+0xac>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2201      	movs	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]
        break;
 8001590:	e004      	b.n	800159c <DECODE_DATA_Decode_Control+0x58>
    case CAN_VALUE_DRIVING_MODE_SPORT:
    	Rx_Control->driving_mode = kDRIVING_MODE_SPORT;
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <DECODE_DATA_Decode_Control+0xac>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2202      	movs	r2, #2
 8001598:	701a      	strb	r2, [r3, #0]
        break;
 800159a:	bf00      	nop
    }

    /* Decodifica fallas de Control */
    switch (bus_can_input.estado_falla)
 800159c:	4b13      	ldr	r3, [pc, #76]	; (80015ec <DECODE_DATA_Decode_Control+0xa8>)
 800159e:	785b      	ldrb	r3, [r3, #1]
 80015a0:	2b03      	cmp	r3, #3
 80015a2:	d81e      	bhi.n	80015e2 <DECODE_DATA_Decode_Control+0x9e>
 80015a4:	a201      	add	r2, pc, #4	; (adr r2, 80015ac <DECODE_DATA_Decode_Control+0x68>)
 80015a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015aa:	bf00      	nop
 80015ac:	080015bd 	.word	0x080015bd
 80015b0:	080015c7 	.word	0x080015c7
 80015b4:	080015d1 	.word	0x080015d1
 80015b8:	080015d9 	.word	0x080015d9
    {
    case CAN_VALUE_FAILURE_OK:
    	Rx_Control->failure = kFAILURE_OK;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <DECODE_DATA_Decode_Control+0xac>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2200      	movs	r2, #0
 80015c2:	705a      	strb	r2, [r3, #1]
        break;
 80015c4:	e00d      	b.n	80015e2 <DECODE_DATA_Decode_Control+0x9e>
    case CAN_VALUE_FAILURE_CAUTION1:
    	Rx_Control->failure = kFAILURE_CAUTION1;
 80015c6:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <DECODE_DATA_Decode_Control+0xac>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2201      	movs	r2, #1
 80015cc:	705a      	strb	r2, [r3, #1]
        break;
 80015ce:	e008      	b.n	80015e2 <DECODE_DATA_Decode_Control+0x9e>
    case CAN_VALUE_FAILURE_CAUTION2:
    	Rx_Control->failure = kFAILURE_CAUTION2;
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <DECODE_DATA_Decode_Control+0xac>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2202      	movs	r2, #2
 80015d6:	705a      	strb	r2, [r3, #1]
    case CAN_VALUE_FAILURE_AUTOKILL:
    	Rx_Control->failure = kFAILURE_AUTOKILL;
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <DECODE_DATA_Decode_Control+0xac>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2203      	movs	r2, #3
 80015de:	705a      	strb	r2, [r3, #1]
        break;
 80015e0:	bf00      	nop
    }
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	200000e0 	.word	0x200000e0
 80015f0:	20000034 	.word	0x20000034

080015f4 <DECODE_DATA_Decode_Bms>:
 * los datos en la estructura Rx_Bms del tipo rx_bms_vars_t y que
 * se encuentra en el bus_data.
 *
 */
static void DECODE_DATA_Decode_Bms(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
	/* Decodifica las variables analógicas de BMS */
    Rx_Bms->voltaje = (rx_var_t)bus_can_input.voltaje_bms;
 80015f8:	4b16      	ldr	r3, [pc, #88]	; (8001654 <DECODE_DATA_Decode_Bms+0x60>)
 80015fa:	78da      	ldrb	r2, [r3, #3]
 80015fc:	4b16      	ldr	r3, [pc, #88]	; (8001658 <DECODE_DATA_Decode_Bms+0x64>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	ee07 2a90 	vmov	s15, r2
 8001604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001608:	edc3 7a00 	vstr	s15, [r3]

    Rx_Bms->corriente = (rx_var_t)bus_can_input.corriente_bms;
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <DECODE_DATA_Decode_Bms+0x60>)
 800160e:	791a      	ldrb	r2, [r3, #4]
 8001610:	4b11      	ldr	r3, [pc, #68]	; (8001658 <DECODE_DATA_Decode_Bms+0x64>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	ee07 2a90 	vmov	s15, r2
 8001618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800161c:	edc3 7a01 	vstr	s15, [r3, #4]

    Rx_Bms->potencia = (rx_var_t)bus_can_input.potencia_bms;
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <DECODE_DATA_Decode_Bms+0x60>)
 8001622:	795a      	ldrb	r2, [r3, #5]
 8001624:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <DECODE_DATA_Decode_Bms+0x64>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	ee07 2a90 	vmov	s15, r2
 800162c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001630:	edc3 7a03 	vstr	s15, [r3, #12]

    Rx_Bms->nivel_bateria = (rx_var_t)bus_can_input.nivel_bateria_bms;
 8001634:	4b07      	ldr	r3, [pc, #28]	; (8001654 <DECODE_DATA_Decode_Bms+0x60>)
 8001636:	799a      	ldrb	r2, [r3, #6]
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <DECODE_DATA_Decode_Bms+0x64>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	ee07 2a90 	vmov	s15, r2
 8001640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001644:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	200000e0 	.word	0x200000e0
 8001658:	20000038 	.word	0x20000038

0800165c <DECODE_DATA_Decode_Inversor>:
 * los datos en la estructura Rx_Inversor del tipo rx_inversor_vars_t y
 * que se encuentra en el bus_data.
 *
 */
static void DECODE_DATA_Decode_Inversor(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
	/* Decodifica las variables analógicas de Inversor */
    Rx_Inversor->velocidad = (rx_var_t)bus_can_input.velocidad_inv;
 8001660:	4b07      	ldr	r3, [pc, #28]	; (8001680 <DECODE_DATA_Decode_Inversor+0x24>)
 8001662:	79da      	ldrb	r2, [r3, #7]
 8001664:	4b07      	ldr	r3, [pc, #28]	; (8001684 <DECODE_DATA_Decode_Inversor+0x28>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	ee07 2a90 	vmov	s15, r2
 800166c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001670:	edc3 7a00 	vstr	s15, [r3]
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	200000e0 	.word	0x200000e0
 8001684:	2000003c 	.word	0x2000003c

08001688 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	607b      	str	r3, [r7, #4]
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <MX_DMA_Init+0x3c>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <MX_DMA_Init+0x3c>)
 8001698:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <MX_DMA_Init+0x3c>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2100      	movs	r1, #0
 80016ae:	2038      	movs	r0, #56	; 0x38
 80016b0:	f002 fe77 	bl	80043a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80016b4:	2038      	movs	r0, #56	; 0x38
 80016b6:	f002 fe90 	bl	80043da <HAL_NVIC_EnableIRQ>

}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800

080016c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	; 0x28
 80016cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
 80016dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	4b46      	ldr	r3, [pc, #280]	; (80017fc <MX_GPIO_Init+0x134>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a45      	ldr	r2, [pc, #276]	; (80017fc <MX_GPIO_Init+0x134>)
 80016e8:	f043 0310 	orr.w	r3, r3, #16
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b43      	ldr	r3, [pc, #268]	; (80017fc <MX_GPIO_Init+0x134>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0310 	and.w	r3, r3, #16
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	4b3f      	ldr	r3, [pc, #252]	; (80017fc <MX_GPIO_Init+0x134>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	4a3e      	ldr	r2, [pc, #248]	; (80017fc <MX_GPIO_Init+0x134>)
 8001704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001708:	6313      	str	r3, [r2, #48]	; 0x30
 800170a:	4b3c      	ldr	r3, [pc, #240]	; (80017fc <MX_GPIO_Init+0x134>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	4b38      	ldr	r3, [pc, #224]	; (80017fc <MX_GPIO_Init+0x134>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a37      	ldr	r2, [pc, #220]	; (80017fc <MX_GPIO_Init+0x134>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b35      	ldr	r3, [pc, #212]	; (80017fc <MX_GPIO_Init+0x134>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	607b      	str	r3, [r7, #4]
 8001736:	4b31      	ldr	r3, [pc, #196]	; (80017fc <MX_GPIO_Init+0x134>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a30      	ldr	r2, [pc, #192]	; (80017fc <MX_GPIO_Init+0x134>)
 800173c:	f043 0302 	orr.w	r3, r3, #2
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b2e      	ldr	r3, [pc, #184]	; (80017fc <MX_GPIO_Init+0x134>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	603b      	str	r3, [r7, #0]
 8001752:	4b2a      	ldr	r3, [pc, #168]	; (80017fc <MX_GPIO_Init+0x134>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a29      	ldr	r2, [pc, #164]	; (80017fc <MX_GPIO_Init+0x134>)
 8001758:	f043 0304 	orr.w	r3, r3, #4
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b27      	ldr	r3, [pc, #156]	; (80017fc <MX_GPIO_Init+0x134>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0304 	and.w	r3, r3, #4
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ECO_GPIO_Port, LED_ECO_Pin, GPIO_PIN_RESET);
 800176a:	2200      	movs	r2, #0
 800176c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001770:	4823      	ldr	r0, [pc, #140]	; (8001800 <MX_GPIO_Init+0x138>)
 8001772:	f003 fb69 	bl	8004e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_NORMAL_Pin|LED_SPORT_Pin, GPIO_PIN_RESET);
 8001776:	2200      	movs	r2, #0
 8001778:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 800177c:	4821      	ldr	r0, [pc, #132]	; (8001804 <MX_GPIO_Init+0x13c>)
 800177e:	f003 fb63 	bl	8004e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BTN_HM1_Pin|BTN_HM2_Pin;
 8001782:	2318      	movs	r3, #24
 8001784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800178e:	f107 0314 	add.w	r3, r7, #20
 8001792:	4619      	mov	r1, r3
 8001794:	481c      	ldr	r0, [pc, #112]	; (8001808 <MX_GPIO_Init+0x140>)
 8001796:	f003 f9ab 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_ECO_Pin;
 800179a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800179e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a0:	2301      	movs	r3, #1
 80017a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2300      	movs	r3, #0
 80017aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_ECO_GPIO_Port, &GPIO_InitStruct);
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	4619      	mov	r1, r3
 80017b2:	4813      	ldr	r0, [pc, #76]	; (8001800 <MX_GPIO_Init+0x138>)
 80017b4:	f003 f99c 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BTN_ECO_Pin|BTN_NORMAL_Pin|BTN_SPORT_Pin;
 80017b8:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 80017bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	4619      	mov	r1, r3
 80017ce:	480d      	ldr	r0, [pc, #52]	; (8001804 <MX_GPIO_Init+0x13c>)
 80017d0:	f003 f98e 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_NORMAL_Pin|LED_SPORT_Pin;
 80017d4:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80017d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017da:	2301      	movs	r3, #1
 80017dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e2:	2300      	movs	r3, #0
 80017e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	4619      	mov	r1, r3
 80017ec:	4805      	ldr	r0, [pc, #20]	; (8001804 <MX_GPIO_Init+0x13c>)
 80017ee:	f003 f97f 	bl	8004af0 <HAL_GPIO_Init>

}
 80017f2:	bf00      	nop
 80017f4:	3728      	adds	r7, #40	; 0x28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800
 8001800:	40020800 	.word	0x40020800
 8001804:	40020000 	.word	0x40020000
 8001808:	40021000 	.word	0x40021000

0800180c <INDICATORS_Finish_StartUp>:
 *
 * @param None
 * @retval None
 */
void INDICATORS_Finish_StartUp(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
    uint32_t tickstart;

    uint32_t blink_tickstart;

    BSP_BUZZER_On();
 8001812:	f000 fe61 	bl	80024d8 <BSP_BUZZER_On>

    tickstart = HAL_GetTick();      // get ticks for the turn off time of LEDs and buzzer
 8001816:	f001 f8c7 	bl	80029a8 <HAL_GetTick>
 800181a:	6038      	str	r0, [r7, #0]

    blink_tickstart = tickstart;    // ticks for the blinking of the LEDs
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	607b      	str	r3, [r7, #4]

    BSP_LED_Off(LED1);
 8001820:	2000      	movs	r0, #0
 8001822:	f000 fed3 	bl	80025cc <BSP_LED_Off>
    BSP_LED_Off(LED2);
 8001826:	2001      	movs	r0, #1
 8001828:	f000 fed0 	bl	80025cc <BSP_LED_Off>
    BSP_LED_Off(LED3);
 800182c:	2002      	movs	r0, #2
 800182e:	f000 fecd 	bl	80025cc <BSP_LED_Off>

    while(1)
    {
        if( (HAL_GetTick() - blink_tickstart) > BLINK_TIME )  		// 250ms
 8001832:	f001 f8b9 	bl	80029a8 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2bfa      	cmp	r3, #250	; 0xfa
 800183e:	d90b      	bls.n	8001858 <INDICATORS_Finish_StartUp+0x4c>
        {
            BSP_LED_Toggle(LED1);
 8001840:	2000      	movs	r0, #0
 8001842:	f000 fedd 	bl	8002600 <BSP_LED_Toggle>
            BSP_LED_Toggle(LED2);
 8001846:	2001      	movs	r0, #1
 8001848:	f000 feda 	bl	8002600 <BSP_LED_Toggle>
            BSP_LED_Toggle(LED3);
 800184c:	2002      	movs	r0, #2
 800184e:	f000 fed7 	bl	8002600 <BSP_LED_Toggle>

            blink_tickstart = HAL_GetTick();
 8001852:	f001 f8a9 	bl	80029a8 <HAL_GetTick>
 8001856:	6078      	str	r0, [r7, #4]
        }

        if( (HAL_GetTick() - tickstart) > BUZZER_TURNOFF_TIME )   	// 2s
 8001858:	f001 f8a6 	bl	80029a8 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001866:	d901      	bls.n	800186c <INDICATORS_Finish_StartUp+0x60>
        {
            BSP_BUZZER_Off();
 8001868:	f000 fe42 	bl	80024f0 <BSP_BUZZER_Off>
        }

        if( (HAL_GetTick() - tickstart) > LEDS_TURNOFF_TIME )   	// 3s
 800186c:	f001 f89c 	bl	80029a8 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800187a:	4293      	cmp	r3, r2
 800187c:	d9d9      	bls.n	8001832 <INDICATORS_Finish_StartUp+0x26>
        {
            BSP_LED_Off(LED1);
 800187e:	2000      	movs	r0, #0
 8001880:	f000 fea4 	bl	80025cc <BSP_LED_Off>
            BSP_LED_Off(LED2);
 8001884:	2001      	movs	r0, #1
 8001886:	f000 fea1 	bl	80025cc <BSP_LED_Off>
            BSP_LED_Off(LED3);
 800188a:	2002      	movs	r0, #2
 800188c:	f000 fe9e 	bl	80025cc <BSP_LED_Off>

            break;  // startup is completed
 8001890:	bf00      	nop
        }
    }
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <INDICATORS_Process>:
 *
 * @param None
 * @retval None
 */
void INDICATORS_Process(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0
	//BSP_LED_Off(LED1);
	//BSP_LED_Off(LED2);
	//BSP_LED_Off(LED3);
}
 800189e:	bf00      	nop
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018ac:	f001 f816 	bl	80028dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018b0:	f000 f806 	bl	80018c0 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* USER CODE BEGIN 2 */
  
  /* Initialize application */
  MX_APP_Init();
 80018b4:	f7ff fb46 	bl	8000f44 <MX_APP_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    MX_APP_Process();
 80018b8:	f7ff fb80 	bl	8000fbc <MX_APP_Process>
 80018bc:	e7fc      	b.n	80018b8 <main+0x10>
	...

080018c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b094      	sub	sp, #80	; 0x50
 80018c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018c6:	f107 031c 	add.w	r3, r7, #28
 80018ca:	2234      	movs	r2, #52	; 0x34
 80018cc:	2100      	movs	r1, #0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f005 fcac 	bl	800722c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018d4:	f107 0308 	add.w	r3, r7, #8
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e4:	2300      	movs	r3, #0
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	4b29      	ldr	r3, [pc, #164]	; (8001990 <SystemClock_Config+0xd0>)
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	4a28      	ldr	r2, [pc, #160]	; (8001990 <SystemClock_Config+0xd0>)
 80018ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f2:	6413      	str	r3, [r2, #64]	; 0x40
 80018f4:	4b26      	ldr	r3, [pc, #152]	; (8001990 <SystemClock_Config+0xd0>)
 80018f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001900:	2300      	movs	r3, #0
 8001902:	603b      	str	r3, [r7, #0]
 8001904:	4b23      	ldr	r3, [pc, #140]	; (8001994 <SystemClock_Config+0xd4>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800190c:	4a21      	ldr	r2, [pc, #132]	; (8001994 <SystemClock_Config+0xd4>)
 800190e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001912:	6013      	str	r3, [r2, #0]
 8001914:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <SystemClock_Config+0xd4>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800191c:	603b      	str	r3, [r7, #0]
 800191e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001920:	2302      	movs	r3, #2
 8001922:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001924:	2301      	movs	r3, #1
 8001926:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001928:	2310      	movs	r3, #16
 800192a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800192c:	2302      	movs	r3, #2
 800192e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001930:	2300      	movs	r3, #0
 8001932:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001934:	2308      	movs	r3, #8
 8001936:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001938:	2350      	movs	r3, #80	; 0x50
 800193a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800193c:	2302      	movs	r3, #2
 800193e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001940:	2302      	movs	r3, #2
 8001942:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001944:	2302      	movs	r3, #2
 8001946:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001948:	f107 031c 	add.w	r3, r7, #28
 800194c:	4618      	mov	r0, r3
 800194e:	f003 fd7b 	bl	8005448 <HAL_RCC_OscConfig>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001958:	f000 f81e 	bl	8001998 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800195c:	230f      	movs	r3, #15
 800195e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001960:	2302      	movs	r3, #2
 8001962:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001964:	2300      	movs	r3, #0
 8001966:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800196c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800196e:	2300      	movs	r3, #0
 8001970:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001972:	f107 0308 	add.w	r3, r7, #8
 8001976:	2102      	movs	r1, #2
 8001978:	4618      	mov	r0, r3
 800197a:	f003 fa99 	bl	8004eb0 <HAL_RCC_ClockConfig>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001984:	f000 f808 	bl	8001998 <Error_Handler>
  }
}
 8001988:	bf00      	nop
 800198a:	3750      	adds	r7, #80	; 0x50
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40023800 	.word	0x40023800
 8001994:	40007000 	.word	0x40007000

08001998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800199c:	b672      	cpsid	i
}
 800199e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <Error_Handler+0x8>

080019a2 <PANTALLA_Process>:
 *
 * @param None
 * @retval None
 */
void PANTALLA_Process(void)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	af00      	add	r7, sp, #0
    PANTALLA_Demo();
 80019a6:	f000 f803 	bl	80019b0 <PANTALLA_Demo>
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <PANTALLA_Demo>:
/***********************************************************************************************************************
 * Private functions implementation
 **********************************************************************************************************************/

static void PANTALLA_Demo(void)
{
 80019b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019b2:	b093      	sub	sp, #76	; 0x4c
 80019b4:	af10      	add	r7, sp, #64	; 0x40
    int value = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]
    int img;

    for (value = 0; value >= 100; value++)
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]
 80019be:	e0d7      	b.n	8001b70 <PANTALLA_Demo+0x1c0>
    {
        if (value >= 0 && value <= 33)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	db05      	blt.n	80019d2 <PANTALLA_Demo+0x22>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b21      	cmp	r3, #33	; 0x21
 80019ca:	dc02      	bgt.n	80019d2 <PANTALLA_Demo+0x22>
        {
            img = 1;
 80019cc:	2301      	movs	r3, #1
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	e010      	b.n	80019f4 <PANTALLA_Demo+0x44>
        }
        else if (value > 33 && value <= 66)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b21      	cmp	r3, #33	; 0x21
 80019d6:	dd05      	ble.n	80019e4 <PANTALLA_Demo+0x34>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b42      	cmp	r3, #66	; 0x42
 80019dc:	dc02      	bgt.n	80019e4 <PANTALLA_Demo+0x34>
        {
            img = 2;
 80019de:	2302      	movs	r3, #2
 80019e0:	603b      	str	r3, [r7, #0]
 80019e2:	e007      	b.n	80019f4 <PANTALLA_Demo+0x44>
        }
        else if (value > 66 && value <= 100)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b42      	cmp	r3, #66	; 0x42
 80019e8:	dd04      	ble.n	80019f4 <PANTALLA_Demo+0x44>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b64      	cmp	r3, #100	; 0x64
 80019ee:	dc01      	bgt.n	80019f4 <PANTALLA_Demo+0x44>
        {
            img = 3;
 80019f0:	2303      	movs	r3, #3
 80019f2:	603b      	str	r3, [r7, #0]
        }

        PANTALLA_API_SendtoImage("bat_icon.pic", value, huart6);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	fa1f fc83 	uxth.w	ip, r3
 80019fa:	4e62      	ldr	r6, [pc, #392]	; (8001b84 <PANTALLA_Demo+0x1d4>)
 80019fc:	466d      	mov	r5, sp
 80019fe:	f106 0408 	add.w	r4, r6, #8
 8001a02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a0e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001a12:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001a16:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001a1a:	4661      	mov	r1, ip
 8001a1c:	485a      	ldr	r0, [pc, #360]	; (8001b88 <PANTALLA_Demo+0x1d8>)
 8001a1e:	f000 f95f 	bl	8001ce0 <PANTALLA_API_SendtoImage>
        PANTALLA_API_SendtoImage("driving_mode.pic", img, huart6);
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	fa1f fc83 	uxth.w	ip, r3
 8001a28:	4e56      	ldr	r6, [pc, #344]	; (8001b84 <PANTALLA_Demo+0x1d4>)
 8001a2a:	466d      	mov	r5, sp
 8001a2c:	f106 0408 	add.w	r4, r6, #8
 8001a30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a3c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001a40:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001a44:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001a48:	4661      	mov	r1, ip
 8001a4a:	4850      	ldr	r0, [pc, #320]	; (8001b8c <PANTALLA_Demo+0x1dc>)
 8001a4c:	f000 f948 	bl	8001ce0 <PANTALLA_API_SendtoImage>
        PANTALLA_API_SendtoImage("warning.pic", img, huart6);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	fa1f fc83 	uxth.w	ip, r3
 8001a56:	4e4b      	ldr	r6, [pc, #300]	; (8001b84 <PANTALLA_Demo+0x1d4>)
 8001a58:	466d      	mov	r5, sp
 8001a5a:	f106 0408 	add.w	r4, r6, #8
 8001a5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a6a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001a6e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001a72:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001a76:	4661      	mov	r1, ip
 8001a78:	4845      	ldr	r0, [pc, #276]	; (8001b90 <PANTALLA_Demo+0x1e0>)
 8001a7a:	f000 f931 	bl	8001ce0 <PANTALLA_API_SendtoImage>

        PANTALLA_API_SendtoTxt("bat_level.txt", value, huart6);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	fa1f fc83 	uxth.w	ip, r3
 8001a84:	4e3f      	ldr	r6, [pc, #252]	; (8001b84 <PANTALLA_Demo+0x1d4>)
 8001a86:	466d      	mov	r5, sp
 8001a88:	f106 0408 	add.w	r4, r6, #8
 8001a8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a98:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001a9c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001aa0:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001aa4:	4661      	mov	r1, ip
 8001aa6:	483b      	ldr	r0, [pc, #236]	; (8001b94 <PANTALLA_Demo+0x1e4>)
 8001aa8:	f000 f87e 	bl	8001ba8 <PANTALLA_API_SendtoTxt>
        PANTALLA_API_SendtoTxt("bat_voltage.txt", value, huart6);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	fa1f fc83 	uxth.w	ip, r3
 8001ab2:	4e34      	ldr	r6, [pc, #208]	; (8001b84 <PANTALLA_Demo+0x1d4>)
 8001ab4:	466d      	mov	r5, sp
 8001ab6:	f106 0408 	add.w	r4, r6, #8
 8001aba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001abc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001abe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ac0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ac4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ac6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001aca:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001ace:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001ad2:	4661      	mov	r1, ip
 8001ad4:	4830      	ldr	r0, [pc, #192]	; (8001b98 <PANTALLA_Demo+0x1e8>)
 8001ad6:	f000 f867 	bl	8001ba8 <PANTALLA_API_SendtoTxt>
        PANTALLA_API_SendtoTxt("power.txt", value, huart6);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	fa1f fc83 	uxth.w	ip, r3
 8001ae0:	4e28      	ldr	r6, [pc, #160]	; (8001b84 <PANTALLA_Demo+0x1d4>)
 8001ae2:	466d      	mov	r5, sp
 8001ae4:	f106 0408 	add.w	r4, r6, #8
 8001ae8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001af0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001af2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001af4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001af8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001afc:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001b00:	4661      	mov	r1, ip
 8001b02:	4826      	ldr	r0, [pc, #152]	; (8001b9c <PANTALLA_Demo+0x1ec>)
 8001b04:	f000 f850 	bl	8001ba8 <PANTALLA_API_SendtoTxt>
        PANTALLA_API_SendtoTxt("speed.txt", value, huart6);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	fa1f fc83 	uxth.w	ip, r3
 8001b0e:	4e1d      	ldr	r6, [pc, #116]	; (8001b84 <PANTALLA_Demo+0x1d4>)
 8001b10:	466d      	mov	r5, sp
 8001b12:	f106 0408 	add.w	r4, r6, #8
 8001b16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b22:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001b26:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001b2a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001b2e:	4661      	mov	r1, ip
 8001b30:	481b      	ldr	r0, [pc, #108]	; (8001ba0 <PANTALLA_Demo+0x1f0>)
 8001b32:	f000 f839 	bl	8001ba8 <PANTALLA_API_SendtoTxt>

        PANTALLA_API_SendtoPB("speed_bar", value, huart6);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	fa1f fc83 	uxth.w	ip, r3
 8001b3c:	4e11      	ldr	r6, [pc, #68]	; (8001b84 <PANTALLA_Demo+0x1d4>)
 8001b3e:	466d      	mov	r5, sp
 8001b40:	f106 0408 	add.w	r4, r6, #8
 8001b44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b50:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001b54:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001b58:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001b5c:	4661      	mov	r1, ip
 8001b5e:	4811      	ldr	r0, [pc, #68]	; (8001ba4 <PANTALLA_Demo+0x1f4>)
 8001b60:	f000 f88e 	bl	8001c80 <PANTALLA_API_SendtoPB>

        HAL_Delay(40);
 8001b64:	2028      	movs	r0, #40	; 0x28
 8001b66:	f000 ff2b 	bl	80029c0 <HAL_Delay>
    for (value = 0; value >= 100; value++)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	607b      	str	r3, [r7, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b63      	cmp	r3, #99	; 0x63
 8001b74:	f73f af24 	bgt.w	80019c0 <PANTALLA_Demo+0x10>
    }
}
 8001b78:	bf00      	nop
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b82:	bf00      	nop
 8001b84:	2000035c 	.word	0x2000035c
 8001b88:	08007ab0 	.word	0x08007ab0
 8001b8c:	08007ac0 	.word	0x08007ac0
 8001b90:	08007ad4 	.word	0x08007ad4
 8001b94:	08007ae0 	.word	0x08007ae0
 8001b98:	08007af0 	.word	0x08007af0
 8001b9c:	08007b00 	.word	0x08007b00
 8001ba0:	08007b0c 	.word	0x08007b0c
 8001ba4:	08007b18 	.word	0x08007b18

08001ba8 <PANTALLA_API_SendtoTxt>:
    HAL_UART_Transmit(&huart, (uint8_t *)buf, len, 1000);
    HAL_UART_Transmit(&huart, Cmd_End, 3, 3000);
}

void PANTALLA_API_SendtoTxt(char *obj, uint16_t value,UART_HandleTypeDef huart)
{
 8001ba8:	b082      	sub	sp, #8
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b08c      	sub	sp, #48	; 0x30
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001bb6:	e880 000c 	stmia.w	r0, {r2, r3}
 8001bba:	460b      	mov	r3, r1
 8001bbc:	807b      	strh	r3, [r7, #2]
    char buf[30];
    int len;

    if (strcmp(obj, "bat_level.txt") == 0)
 8001bbe:	4928      	ldr	r1, [pc, #160]	; (8001c60 <PANTALLA_API_SendtoTxt+0xb8>)
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7fe fb25 	bl	8000210 <strcmp>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d108      	bne.n	8001bde <PANTALLA_API_SendtoTxt+0x36>
    {
        len = sprintf(buf, "%s=\"%u\"%%", obj, value);
 8001bcc:	887b      	ldrh	r3, [r7, #2]
 8001bce:	f107 000c 	add.w	r0, r7, #12
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	4923      	ldr	r1, [pc, #140]	; (8001c64 <PANTALLA_API_SendtoTxt+0xbc>)
 8001bd6:	f005 fb31 	bl	800723c <siprintf>
 8001bda:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001bdc:	e027      	b.n	8001c2e <PANTALLA_API_SendtoTxt+0x86>
    }
    else if (strcmp(obj, "power.txt") == 0)
 8001bde:	4922      	ldr	r1, [pc, #136]	; (8001c68 <PANTALLA_API_SendtoTxt+0xc0>)
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7fe fb15 	bl	8000210 <strcmp>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d108      	bne.n	8001bfe <PANTALLA_API_SendtoTxt+0x56>
    {
        len = sprintf(buf, "%s=\"%u\"W", obj, value);
 8001bec:	887b      	ldrh	r3, [r7, #2]
 8001bee:	f107 000c 	add.w	r0, r7, #12
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	491d      	ldr	r1, [pc, #116]	; (8001c6c <PANTALLA_API_SendtoTxt+0xc4>)
 8001bf6:	f005 fb21 	bl	800723c <siprintf>
 8001bfa:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001bfc:	e017      	b.n	8001c2e <PANTALLA_API_SendtoTxt+0x86>
    }
    else if (strcmp(obj, "bat_voltage") == 0)
 8001bfe:	491c      	ldr	r1, [pc, #112]	; (8001c70 <PANTALLA_API_SendtoTxt+0xc8>)
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7fe fb05 	bl	8000210 <strcmp>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d108      	bne.n	8001c1e <PANTALLA_API_SendtoTxt+0x76>
    {
        len = sprintf(buf, "%s=\"%u\"V", obj, value);
 8001c0c:	887b      	ldrh	r3, [r7, #2]
 8001c0e:	f107 000c 	add.w	r0, r7, #12
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	4917      	ldr	r1, [pc, #92]	; (8001c74 <PANTALLA_API_SendtoTxt+0xcc>)
 8001c16:	f005 fb11 	bl	800723c <siprintf>
 8001c1a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001c1c:	e007      	b.n	8001c2e <PANTALLA_API_SendtoTxt+0x86>
    }
    else
    {
        len = sprintf(buf, "%s=\"%u\"", obj, value);
 8001c1e:	887b      	ldrh	r3, [r7, #2]
 8001c20:	f107 000c 	add.w	r0, r7, #12
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	4914      	ldr	r1, [pc, #80]	; (8001c78 <PANTALLA_API_SendtoTxt+0xd0>)
 8001c28:	f005 fb08 	bl	800723c <siprintf>
 8001c2c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }

    HAL_UART_Transmit(&huart, (uint8_t *)buf, len, 1000);
 8001c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	f107 010c 	add.w	r1, r7, #12
 8001c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c3a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001c3e:	f005 f802 	bl	8006c46 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart, Cmd_End, 3, 3000);
 8001c42:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001c46:	2203      	movs	r2, #3
 8001c48:	490c      	ldr	r1, [pc, #48]	; (8001c7c <PANTALLA_API_SendtoTxt+0xd4>)
 8001c4a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001c4e:	f004 fffa 	bl	8006c46 <HAL_UART_Transmit>
}
 8001c52:	bf00      	nop
 8001c54:	3730      	adds	r7, #48	; 0x30
 8001c56:	46bd      	mov	sp, r7
 8001c58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c5c:	b002      	add	sp, #8
 8001c5e:	4770      	bx	lr
 8001c60:	08007b2c 	.word	0x08007b2c
 8001c64:	08007b3c 	.word	0x08007b3c
 8001c68:	08007b48 	.word	0x08007b48
 8001c6c:	08007b54 	.word	0x08007b54
 8001c70:	08007b60 	.word	0x08007b60
 8001c74:	08007b6c 	.word	0x08007b6c
 8001c78:	08007b78 	.word	0x08007b78
 8001c7c:	20000040 	.word	0x20000040

08001c80 <PANTALLA_API_SendtoPB>:

void PANTALLA_API_SendtoPB(char *obj, uint16_t value,UART_HandleTypeDef huart)
{
 8001c80:	b082      	sub	sp, #8
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b08c      	sub	sp, #48	; 0x30
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
 8001c8a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001c8e:	e880 000c 	stmia.w	r0, {r2, r3}
 8001c92:	460b      	mov	r3, r1
 8001c94:	807b      	strh	r3, [r7, #2]
    char buf[30];

    int len = sprintf(buf, "%s=%u", obj, value);
 8001c96:	887b      	ldrh	r3, [r7, #2]
 8001c98:	f107 000c 	add.w	r0, r7, #12
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	490e      	ldr	r1, [pc, #56]	; (8001cd8 <PANTALLA_API_SendtoPB+0x58>)
 8001ca0:	f005 facc 	bl	800723c <siprintf>
 8001ca4:	62f8      	str	r0, [r7, #44]	; 0x2c

    HAL_UART_Transmit(&huart, (uint8_t *)buf, len, 1000);
 8001ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	f107 010c 	add.w	r1, r7, #12
 8001cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cb2:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001cb6:	f004 ffc6 	bl	8006c46 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart, Cmd_End, 3, 3000);
 8001cba:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001cbe:	2203      	movs	r2, #3
 8001cc0:	4906      	ldr	r1, [pc, #24]	; (8001cdc <PANTALLA_API_SendtoPB+0x5c>)
 8001cc2:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001cc6:	f004 ffbe 	bl	8006c46 <HAL_UART_Transmit>
}
 8001cca:	bf00      	nop
 8001ccc:	3730      	adds	r7, #48	; 0x30
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001cd4:	b002      	add	sp, #8
 8001cd6:	4770      	bx	lr
 8001cd8:	08007b24 	.word	0x08007b24
 8001cdc:	20000040 	.word	0x20000040

08001ce0 <PANTALLA_API_SendtoImage>:

void PANTALLA_API_SendtoImage(char *obj, uint16_t value,UART_HandleTypeDef huart){
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b08c      	sub	sp, #48	; 0x30
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001cee:	e880 000c 	stmia.w	r0, {r2, r3}
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	807b      	strh	r3, [r7, #2]

    char buf[30];
    int len;
    int pic;

    if (strcmp(obj, "bat_icon.pic") == 0)
 8001cf6:	4951      	ldr	r1, [pc, #324]	; (8001e3c <PANTALLA_API_SendtoImage+0x15c>)
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7fe fa89 	bl	8000210 <strcmp>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d12f      	bne.n	8001d64 <PANTALLA_API_SendtoImage+0x84>
    {
        if (value >= 0 && value <= 33)
 8001d04:	887b      	ldrh	r3, [r7, #2]
 8001d06:	2b21      	cmp	r3, #33	; 0x21
 8001d08:	d80a      	bhi.n	8001d20 <PANTALLA_API_SendtoImage+0x40>
        {
            pic = 28; // una barra
 8001d0a:	231c      	movs	r3, #28
 8001d0c:	62bb      	str	r3, [r7, #40]	; 0x28
            len = sprintf(buf, "%s=%u", obj, pic);
 8001d0e:	f107 0008 	add.w	r0, r7, #8
 8001d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	494a      	ldr	r1, [pc, #296]	; (8001e40 <PANTALLA_API_SendtoImage+0x160>)
 8001d18:	f005 fa90 	bl	800723c <siprintf>
 8001d1c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001d1e:	e074      	b.n	8001e0a <PANTALLA_API_SendtoImage+0x12a>
        }
        else if (value > 33 && value <= 66)
 8001d20:	887b      	ldrh	r3, [r7, #2]
 8001d22:	2b21      	cmp	r3, #33	; 0x21
 8001d24:	d90d      	bls.n	8001d42 <PANTALLA_API_SendtoImage+0x62>
 8001d26:	887b      	ldrh	r3, [r7, #2]
 8001d28:	2b42      	cmp	r3, #66	; 0x42
 8001d2a:	d80a      	bhi.n	8001d42 <PANTALLA_API_SendtoImage+0x62>
        {
            pic = 29; // dos barras
 8001d2c:	231d      	movs	r3, #29
 8001d2e:	62bb      	str	r3, [r7, #40]	; 0x28
            len = sprintf(buf, "%s=%u", obj, pic);
 8001d30:	f107 0008 	add.w	r0, r7, #8
 8001d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	4941      	ldr	r1, [pc, #260]	; (8001e40 <PANTALLA_API_SendtoImage+0x160>)
 8001d3a:	f005 fa7f 	bl	800723c <siprintf>
 8001d3e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001d40:	e063      	b.n	8001e0a <PANTALLA_API_SendtoImage+0x12a>
        }
        else if (value > 66 && value <= 100)
 8001d42:	887b      	ldrh	r3, [r7, #2]
 8001d44:	2b42      	cmp	r3, #66	; 0x42
 8001d46:	d960      	bls.n	8001e0a <PANTALLA_API_SendtoImage+0x12a>
 8001d48:	887b      	ldrh	r3, [r7, #2]
 8001d4a:	2b64      	cmp	r3, #100	; 0x64
 8001d4c:	d85d      	bhi.n	8001e0a <PANTALLA_API_SendtoImage+0x12a>
        {
            pic = 27; // tres barras
 8001d4e:	231b      	movs	r3, #27
 8001d50:	62bb      	str	r3, [r7, #40]	; 0x28
            len = sprintf(buf, "%s=%u", obj, pic);
 8001d52:	f107 0008 	add.w	r0, r7, #8
 8001d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	4939      	ldr	r1, [pc, #228]	; (8001e40 <PANTALLA_API_SendtoImage+0x160>)
 8001d5c:	f005 fa6e 	bl	800723c <siprintf>
 8001d60:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001d62:	e052      	b.n	8001e0a <PANTALLA_API_SendtoImage+0x12a>
        }
    }
    else if (strcmp(obj, "driving_mode.pic") == 0)
 8001d64:	4937      	ldr	r1, [pc, #220]	; (8001e44 <PANTALLA_API_SendtoImage+0x164>)
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7fe fa52 	bl	8000210 <strcmp>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d129      	bne.n	8001dc6 <PANTALLA_API_SendtoImage+0xe6>
    {
        if (value == 1)
 8001d72:	887b      	ldrh	r3, [r7, #2]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d10a      	bne.n	8001d8e <PANTALLA_API_SendtoImage+0xae>
        {
            pic = 23; // eco
 8001d78:	2317      	movs	r3, #23
 8001d7a:	62bb      	str	r3, [r7, #40]	; 0x28
            len = sprintf(buf, "%s=%u", obj, pic);
 8001d7c:	f107 0008 	add.w	r0, r7, #8
 8001d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	492e      	ldr	r1, [pc, #184]	; (8001e40 <PANTALLA_API_SendtoImage+0x160>)
 8001d86:	f005 fa59 	bl	800723c <siprintf>
 8001d8a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001d8c:	e03d      	b.n	8001e0a <PANTALLA_API_SendtoImage+0x12a>
        }
        else if (value == 2)
 8001d8e:	887b      	ldrh	r3, [r7, #2]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d10a      	bne.n	8001daa <PANTALLA_API_SendtoImage+0xca>
        {
            pic = 24; // normal
 8001d94:	2318      	movs	r3, #24
 8001d96:	62bb      	str	r3, [r7, #40]	; 0x28
            len = sprintf(buf, "%s=%u", obj, pic);
 8001d98:	f107 0008 	add.w	r0, r7, #8
 8001d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	4927      	ldr	r1, [pc, #156]	; (8001e40 <PANTALLA_API_SendtoImage+0x160>)
 8001da2:	f005 fa4b 	bl	800723c <siprintf>
 8001da6:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001da8:	e02f      	b.n	8001e0a <PANTALLA_API_SendtoImage+0x12a>
        }
        else if (value == 3)
 8001daa:	887b      	ldrh	r3, [r7, #2]
 8001dac:	2b03      	cmp	r3, #3
 8001dae:	d12c      	bne.n	8001e0a <PANTALLA_API_SendtoImage+0x12a>
        {
            pic = 25; // sport
 8001db0:	2319      	movs	r3, #25
 8001db2:	62bb      	str	r3, [r7, #40]	; 0x28
            len = sprintf(buf, "%s=%u", obj, pic);
 8001db4:	f107 0008 	add.w	r0, r7, #8
 8001db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	4920      	ldr	r1, [pc, #128]	; (8001e40 <PANTALLA_API_SendtoImage+0x160>)
 8001dbe:	f005 fa3d 	bl	800723c <siprintf>
 8001dc2:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001dc4:	e021      	b.n	8001e0a <PANTALLA_API_SendtoImage+0x12a>
        }
    }
    else if (strcmp(obj, "warning.pic") == 0)
 8001dc6:	4920      	ldr	r1, [pc, #128]	; (8001e48 <PANTALLA_API_SendtoImage+0x168>)
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7fe fa21 	bl	8000210 <strcmp>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d11a      	bne.n	8001e0a <PANTALLA_API_SendtoImage+0x12a>
    {
        if (value == 1)
 8001dd4:	887b      	ldrh	r3, [r7, #2]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d10a      	bne.n	8001df0 <PANTALLA_API_SendtoImage+0x110>
        {
            pic = 33; // warning
 8001dda:	2321      	movs	r3, #33	; 0x21
 8001ddc:	62bb      	str	r3, [r7, #40]	; 0x28
            len = sprintf(buf, "%s=%u", obj, pic);
 8001dde:	f107 0008 	add.w	r0, r7, #8
 8001de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	4916      	ldr	r1, [pc, #88]	; (8001e40 <PANTALLA_API_SendtoImage+0x160>)
 8001de8:	f005 fa28 	bl	800723c <siprintf>
 8001dec:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001dee:	e00c      	b.n	8001e0a <PANTALLA_API_SendtoImage+0x12a>
        }
        else if (value == 2)
 8001df0:	887b      	ldrh	r3, [r7, #2]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d109      	bne.n	8001e0a <PANTALLA_API_SendtoImage+0x12a>
        {
            pic = 32; // no warning
 8001df6:	2320      	movs	r3, #32
 8001df8:	62bb      	str	r3, [r7, #40]	; 0x28
            len = sprintf(buf, "%s=%u", obj, pic);
 8001dfa:	f107 0008 	add.w	r0, r7, #8
 8001dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	490f      	ldr	r1, [pc, #60]	; (8001e40 <PANTALLA_API_SendtoImage+0x160>)
 8001e04:	f005 fa1a 	bl	800723c <siprintf>
 8001e08:	62f8      	str	r0, [r7, #44]	; 0x2c
        }
    }

    HAL_UART_Transmit(&huart, (uint8_t *)buf, len, 1000);
 8001e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	f107 0108 	add.w	r1, r7, #8
 8001e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e16:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001e1a:	f004 ff14 	bl	8006c46 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart, Cmd_End, 3, 3000);
 8001e1e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001e22:	2203      	movs	r2, #3
 8001e24:	4909      	ldr	r1, [pc, #36]	; (8001e4c <PANTALLA_API_SendtoImage+0x16c>)
 8001e26:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001e2a:	f004 ff0c 	bl	8006c46 <HAL_UART_Transmit>
}
 8001e2e:	bf00      	nop
 8001e30:	3730      	adds	r7, #48	; 0x30
 8001e32:	46bd      	mov	sp, r7
 8001e34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e38:	b002      	add	sp, #8
 8001e3a:	4770      	bx	lr
 8001e3c:	08007b80 	.word	0x08007b80
 8001e40:	08007b24 	.word	0x08007b24
 8001e44:	08007b90 	.word	0x08007b90
 8001e48:	08007ba4 	.word	0x08007ba4
 8001e4c:	20000040 	.word	0x20000040

08001e50 <PANTALLA_HW_Init>:
/***********************************************************************************************************************
 * Public functions implementation
 **********************************************************************************************************************/

void PANTALLA_HW_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
    MX_USART6_UART_Init();
 8001e54:	f000 fa1c 	bl	8002290 <MX_USART6_UART_Init>
}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <PEDAL_Process>:
 *
 * @param   None
 * @retval  None
 */
void PEDAL_Process(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
	/* Mapeo de lectura ADC pedal */
	PEDAL_Map_ADC_Reading();
 8001e60:	f000 f80e 	bl	8001e80 <PEDAL_Map_ADC_Reading>

	/* Envío de valor de pedal mapeado a bus de salida CAN */
	PEDAL_Send_Pedal_Value(bus_data.pedal, &bus_can_output);
 8001e64:	4b03      	ldr	r3, [pc, #12]	; (8001e74 <PEDAL_Process+0x18>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	4903      	ldr	r1, [pc, #12]	; (8001e78 <PEDAL_Process+0x1c>)
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 f860 	bl	8001f30 <PEDAL_Send_Pedal_Value>
}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000000 	.word	0x20000000
 8001e78:	2000002c 	.word	0x2000002c
 8001e7c:	00000000 	.word	0x00000000

08001e80 <PEDAL_Map_ADC_Reading>:
 *
 * @param None
 * @retval None
 */
static void PEDAL_Map_ADC_Reading(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
	if(flag_adc == ADC_CONV_COMPLETED)
 8001e84:	4b26      	ldr	r3, [pc, #152]	; (8001f20 <PEDAL_Map_ADC_Reading+0xa0>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d13f      	bne.n	8001f0c <PEDAL_Map_ADC_Reading+0x8c>
	{
		/* Guarda lectura de ADC en bus de datos */
		bus_data.adc_reading = adc_buf[0];
 8001e8c:	4b25      	ldr	r3, [pc, #148]	; (8001f24 <PEDAL_Map_ADC_Reading+0xa4>)
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b25      	ldr	r3, [pc, #148]	; (8001f28 <PEDAL_Map_ADC_Reading+0xa8>)
 8001e94:	605a      	str	r2, [r3, #4]

		/* ADC reading mapping */
		if(bus_data.adc_reading < MIN_ADC_VAL)
 8001e96:	4b24      	ldr	r3, [pc, #144]	; (8001f28 <PEDAL_Map_ADC_Reading+0xa8>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001e9e:	d203      	bcs.n	8001ea8 <PEDAL_Map_ADC_Reading+0x28>
		{
			bus_data.pedal = 0U;
 8001ea0:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <PEDAL_Map_ADC_Reading+0xa8>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	e02e      	b.n	8001f06 <PEDAL_Map_ADC_Reading+0x86>
		}
		else if(bus_data.adc_reading > MAX_ADC_VAL)
 8001ea8:	4b1f      	ldr	r3, [pc, #124]	; (8001f28 <PEDAL_Map_ADC_Reading+0xa8>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f640 62d8 	movw	r2, #3800	; 0xed8
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d903      	bls.n	8001ebc <PEDAL_Map_ADC_Reading+0x3c>
		{
			bus_data.pedal = 100;
 8001eb4:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <PEDAL_Map_ADC_Reading+0xa8>)
 8001eb6:	2264      	movs	r2, #100	; 0x64
 8001eb8:	609a      	str	r2, [r3, #8]
 8001eba:	e024      	b.n	8001f06 <PEDAL_Map_ADC_Reading+0x86>
		}
		else
		{
			bus_data.pedal = ((bus_data.adc_reading - MIN_ADC_VAL) / (MAX_ADC_VAL - MIN_ADC_VAL)) * 100;
 8001ebc:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <PEDAL_Map_ADC_Reading+0xa8>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7fe fb47 	bl	8000554 <__aeabi_ui2d>
 8001ec6:	a312      	add	r3, pc, #72	; (adr r3, 8001f10 <PEDAL_Map_ADC_Reading+0x90>)
 8001ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ecc:	f7fe fa04 	bl	80002d8 <__aeabi_dsub>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	a30f      	add	r3, pc, #60	; (adr r3, 8001f18 <PEDAL_Map_ADC_Reading+0x98>)
 8001eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ede:	f7fe fcdd 	bl	800089c <__aeabi_ddiv>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f04f 0200 	mov.w	r2, #0
 8001eee:	4b0f      	ldr	r3, [pc, #60]	; (8001f2c <PEDAL_Map_ADC_Reading+0xac>)
 8001ef0:	f7fe fbaa 	bl	8000648 <__aeabi_dmul>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4610      	mov	r0, r2
 8001efa:	4619      	mov	r1, r3
 8001efc:	f7fe fdb6 	bl	8000a6c <__aeabi_d2uiz>
 8001f00:	4603      	mov	r3, r0
 8001f02:	4a09      	ldr	r2, [pc, #36]	; (8001f28 <PEDAL_Map_ADC_Reading+0xa8>)
 8001f04:	6093      	str	r3, [r2, #8]
		}

		/* Clear ADC conversion flag */
		flag_adc = ADC_CONV_NOT_COMPLETED;
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <PEDAL_Map_ADC_Reading+0xa0>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	701a      	strb	r2, [r3, #0]
	}
}
 8001f0c:	bf00      	nop
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	00000000 	.word	0x00000000
 8001f14:	4072c000 	.word	0x4072c000
 8001f18:	00000000 	.word	0x00000000
 8001f1c:	40ab5800 	.word	0x40ab5800
 8001f20:	20000043 	.word	0x20000043
 8001f24:	200002b8 	.word	0x200002b8
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	40590000 	.word	0x40590000

08001f30 <PEDAL_Send_Pedal_Value>:
 *
 * @param to_send           Valor de pedal a enviar
 * @param bus_can_output    Puntero a estructura de tipo typedef_bus2_t (bus de salida can)
 */
static void PEDAL_Send_Pedal_Value(uint32_t to_send, typedef_bus2_t* bus_can_output)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
	bus_can_output->pedal = (uint8_t) to_send;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	701a      	strb	r2, [r3, #0]
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
	...

08001f50 <PEDAL_HW_Init>:
/***********************************************************************************************************************
 * Public functions implementation
 **********************************************************************************************************************/

void PEDAL_HW_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
	/* Initialize DMA */
	MX_DMA_Init();
 8001f54:	f7ff fb98 	bl	8001688 <MX_DMA_Init>

	/* Initialize ADC1 */
	MX_ADC1_Init();
 8001f58:	f7fe ff24 	bl	8000da4 <MX_ADC1_Init>

	/* Initialize time base timer for ADC triggering */
	MX_TIM2_Init();
 8001f5c:	f000 f8d8 	bl	8002110 <MX_TIM2_Init>

	/* Start ADC with DMA */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8001f60:	220a      	movs	r2, #10
 8001f62:	4904      	ldr	r1, [pc, #16]	; (8001f74 <PEDAL_HW_Init+0x24>)
 8001f64:	4804      	ldr	r0, [pc, #16]	; (8001f78 <PEDAL_HW_Init+0x28>)
 8001f66:	f000 fed3 	bl	8002d10 <HAL_ADC_Start_DMA>

	/* Start time base trigger ADC timer */
	HAL_TIM_Base_Start(&htim2);
 8001f6a:	4804      	ldr	r0, [pc, #16]	; (8001f7c <PEDAL_HW_Init+0x2c>)
 8001f6c:	f003 fd5a 	bl	8005a24 <HAL_TIM_Base_Start>
}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	200002b8 	.word	0x200002b8
 8001f78:	200001c4 	.word	0x200001c4
 8001f7c:	200002cc 	.word	0x200002cc

08001f80 <HAL_ADC_ConvCpltCallback>:
 * Exported functions implementation
 **********************************************************************************************************************/

/* Called when buffer is completely filled */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
	/* Turn on LED 3 (yellow LED) */
	BSP_LED_Toggle(LED3);
 8001f88:	2002      	movs	r0, #2
 8001f8a:	f000 fb39 	bl	8002600 <BSP_LED_Toggle>

	/* Start ADC DMA again */
	HAL_ADC_Start_DMA(hadc, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8001f8e:	220a      	movs	r2, #10
 8001f90:	4905      	ldr	r1, [pc, #20]	; (8001fa8 <HAL_ADC_ConvCpltCallback+0x28>)
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 febc 	bl	8002d10 <HAL_ADC_Start_DMA>

	/* The flag indicates that the callback was called */
	flag_adc = ADC_CONV_COMPLETED;
 8001f98:	4b04      	ldr	r3, [pc, #16]	; (8001fac <HAL_ADC_ConvCpltCallback+0x2c>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	200002b8 	.word	0x200002b8
 8001fac:	20000043 	.word	0x20000043

08001fb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	607b      	str	r3, [r7, #4]
 8001fba:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <HAL_MspInit+0x4c>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	4a0f      	ldr	r2, [pc, #60]	; (8001ffc <HAL_MspInit+0x4c>)
 8001fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc6:	4b0d      	ldr	r3, [pc, #52]	; (8001ffc <HAL_MspInit+0x4c>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fce:	607b      	str	r3, [r7, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	603b      	str	r3, [r7, #0]
 8001fd6:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <HAL_MspInit+0x4c>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	4a08      	ldr	r2, [pc, #32]	; (8001ffc <HAL_MspInit+0x4c>)
 8001fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe2:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <HAL_MspInit+0x4c>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	40023800 	.word	0x40023800

08002000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002004:	e7fe      	b.n	8002004 <NMI_Handler+0x4>

08002006 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800200a:	e7fe      	b.n	800200a <HardFault_Handler+0x4>

0800200c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002010:	e7fe      	b.n	8002010 <MemManage_Handler+0x4>

08002012 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002016:	e7fe      	b.n	8002016 <BusFault_Handler+0x4>

08002018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800201c:	e7fe      	b.n	800201c <UsageFault_Handler+0x4>

0800201e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800203a:	b480      	push	{r7}
 800203c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800204c:	f000 fc98 	bl	8002980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002050:	bf00      	nop
 8002052:	bd80      	pop	{r7, pc}

08002054 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002058:	4802      	ldr	r0, [pc, #8]	; (8002064 <ADC_IRQHandler+0x10>)
 800205a:	f000 fd18 	bl	8002a8e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	200001c4 	.word	0x200001c4

08002068 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800206c:	4802      	ldr	r0, [pc, #8]	; (8002078 <TIM7_IRQHandler+0x10>)
 800206e:	f003 ff43 	bl	8005ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000314 	.word	0x20000314

0800207c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002080:	4802      	ldr	r0, [pc, #8]	; (800208c <DMA2_Stream0_IRQHandler+0x10>)
 8002082:	f002 facb 	bl	800461c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	2000020c 	.word	0x2000020c

08002090 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002094:	4802      	ldr	r0, [pc, #8]	; (80020a0 <CAN2_RX0_IRQHandler+0x10>)
 8002096:	f001 fe7a 	bl	8003d8e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000270 	.word	0x20000270

080020a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020ac:	4a14      	ldr	r2, [pc, #80]	; (8002100 <_sbrk+0x5c>)
 80020ae:	4b15      	ldr	r3, [pc, #84]	; (8002104 <_sbrk+0x60>)
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020b8:	4b13      	ldr	r3, [pc, #76]	; (8002108 <_sbrk+0x64>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d102      	bne.n	80020c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <_sbrk+0x64>)
 80020c2:	4a12      	ldr	r2, [pc, #72]	; (800210c <_sbrk+0x68>)
 80020c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <_sbrk+0x64>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4413      	add	r3, r2
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d207      	bcs.n	80020e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020d4:	f005 f880 	bl	80071d8 <__errno>
 80020d8:	4603      	mov	r3, r0
 80020da:	220c      	movs	r2, #12
 80020dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020de:	f04f 33ff 	mov.w	r3, #4294967295
 80020e2:	e009      	b.n	80020f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020e4:	4b08      	ldr	r3, [pc, #32]	; (8002108 <_sbrk+0x64>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ea:	4b07      	ldr	r3, [pc, #28]	; (8002108 <_sbrk+0x64>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4413      	add	r3, r2
 80020f2:	4a05      	ldr	r2, [pc, #20]	; (8002108 <_sbrk+0x64>)
 80020f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020f6:	68fb      	ldr	r3, [r7, #12]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20020000 	.word	0x20020000
 8002104:	00000400 	.word	0x00000400
 8002108:	200000ec 	.word	0x200000ec
 800210c:	200003b8 	.word	0x200003b8

08002110 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002116:	f107 0308 	add.w	r3, r7, #8
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]
 8002120:	609a      	str	r2, [r3, #8]
 8002122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002124:	463b      	mov	r3, r7
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800212c:	4b1e      	ldr	r3, [pc, #120]	; (80021a8 <MX_TIM2_Init+0x98>)
 800212e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002132:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8002134:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <MX_TIM2_Init+0x98>)
 8002136:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800213a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800213c:	4b1a      	ldr	r3, [pc, #104]	; (80021a8 <MX_TIM2_Init+0x98>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8002142:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <MX_TIM2_Init+0x98>)
 8002144:	f242 720f 	movw	r2, #9999	; 0x270f
 8002148:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800214a:	4b17      	ldr	r3, [pc, #92]	; (80021a8 <MX_TIM2_Init+0x98>)
 800214c:	2200      	movs	r2, #0
 800214e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002150:	4b15      	ldr	r3, [pc, #84]	; (80021a8 <MX_TIM2_Init+0x98>)
 8002152:	2200      	movs	r2, #0
 8002154:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002156:	4814      	ldr	r0, [pc, #80]	; (80021a8 <MX_TIM2_Init+0x98>)
 8002158:	f003 fc14 	bl	8005984 <HAL_TIM_Base_Init>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002162:	f7ff fc19 	bl	8001998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002166:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800216a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800216c:	f107 0308 	add.w	r3, r7, #8
 8002170:	4619      	mov	r1, r3
 8002172:	480d      	ldr	r0, [pc, #52]	; (80021a8 <MX_TIM2_Init+0x98>)
 8002174:	f004 f88a 	bl	800628c <HAL_TIM_ConfigClockSource>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800217e:	f7ff fc0b 	bl	8001998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002182:	2320      	movs	r3, #32
 8002184:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002186:	2380      	movs	r3, #128	; 0x80
 8002188:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800218a:	463b      	mov	r3, r7
 800218c:	4619      	mov	r1, r3
 800218e:	4806      	ldr	r0, [pc, #24]	; (80021a8 <MX_TIM2_Init+0x98>)
 8002190:	f004 fc7c 	bl	8006a8c <HAL_TIMEx_MasterConfigSynchronization>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800219a:	f7ff fbfd 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800219e:	bf00      	nop
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	200002cc 	.word	0x200002cc

080021ac <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b2:	463b      	mov	r3, r7
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80021ba:	4b15      	ldr	r3, [pc, #84]	; (8002210 <MX_TIM7_Init+0x64>)
 80021bc:	4a15      	ldr	r2, [pc, #84]	; (8002214 <MX_TIM7_Init+0x68>)
 80021be:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8000-1;
 80021c0:	4b13      	ldr	r3, [pc, #76]	; (8002210 <MX_TIM7_Init+0x64>)
 80021c2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80021c6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c8:	4b11      	ldr	r3, [pc, #68]	; (8002210 <MX_TIM7_Init+0x64>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 80021ce:	4b10      	ldr	r3, [pc, #64]	; (8002210 <MX_TIM7_Init+0x64>)
 80021d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021d4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d6:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <MX_TIM7_Init+0x64>)
 80021d8:	2200      	movs	r2, #0
 80021da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80021dc:	480c      	ldr	r0, [pc, #48]	; (8002210 <MX_TIM7_Init+0x64>)
 80021de:	f003 fbd1 	bl	8005984 <HAL_TIM_Base_Init>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80021e8:	f7ff fbd6 	bl	8001998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ec:	2300      	movs	r3, #0
 80021ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021f0:	2300      	movs	r3, #0
 80021f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80021f4:	463b      	mov	r3, r7
 80021f6:	4619      	mov	r1, r3
 80021f8:	4805      	ldr	r0, [pc, #20]	; (8002210 <MX_TIM7_Init+0x64>)
 80021fa:	f004 fc47 	bl	8006a8c <HAL_TIMEx_MasterConfigSynchronization>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002204:	f7ff fbc8 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002208:	bf00      	nop
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20000314 	.word	0x20000314
 8002214:	40001400 	.word	0x40001400

08002218 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002228:	d10e      	bne.n	8002248 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	4b16      	ldr	r3, [pc, #88]	; (8002288 <HAL_TIM_Base_MspInit+0x70>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	4a15      	ldr	r2, [pc, #84]	; (8002288 <HAL_TIM_Base_MspInit+0x70>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6413      	str	r3, [r2, #64]	; 0x40
 800223a:	4b13      	ldr	r3, [pc, #76]	; (8002288 <HAL_TIM_Base_MspInit+0x70>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002246:	e01a      	b.n	800227e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM7)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a0f      	ldr	r2, [pc, #60]	; (800228c <HAL_TIM_Base_MspInit+0x74>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d115      	bne.n	800227e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	60bb      	str	r3, [r7, #8]
 8002256:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <HAL_TIM_Base_MspInit+0x70>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <HAL_TIM_Base_MspInit+0x70>)
 800225c:	f043 0320 	orr.w	r3, r3, #32
 8002260:	6413      	str	r3, [r2, #64]	; 0x40
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <HAL_TIM_Base_MspInit+0x70>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f003 0320 	and.w	r3, r3, #32
 800226a:	60bb      	str	r3, [r7, #8]
 800226c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800226e:	2200      	movs	r2, #0
 8002270:	2100      	movs	r1, #0
 8002272:	2037      	movs	r0, #55	; 0x37
 8002274:	f002 f895 	bl	80043a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002278:	2037      	movs	r0, #55	; 0x37
 800227a:	f002 f8ae 	bl	80043da <HAL_NVIC_EnableIRQ>
}
 800227e:	bf00      	nop
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40023800 	.word	0x40023800
 800228c:	40001400 	.word	0x40001400

08002290 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002294:	4b11      	ldr	r3, [pc, #68]	; (80022dc <MX_USART6_UART_Init+0x4c>)
 8002296:	4a12      	ldr	r2, [pc, #72]	; (80022e0 <MX_USART6_UART_Init+0x50>)
 8002298:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800229a:	4b10      	ldr	r3, [pc, #64]	; (80022dc <MX_USART6_UART_Init+0x4c>)
 800229c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022a0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80022a2:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <MX_USART6_UART_Init+0x4c>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <MX_USART6_UART_Init+0x4c>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80022ae:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <MX_USART6_UART_Init+0x4c>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80022b4:	4b09      	ldr	r3, [pc, #36]	; (80022dc <MX_USART6_UART_Init+0x4c>)
 80022b6:	220c      	movs	r2, #12
 80022b8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ba:	4b08      	ldr	r3, [pc, #32]	; (80022dc <MX_USART6_UART_Init+0x4c>)
 80022bc:	2200      	movs	r2, #0
 80022be:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80022c0:	4b06      	ldr	r3, [pc, #24]	; (80022dc <MX_USART6_UART_Init+0x4c>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80022c6:	4805      	ldr	r0, [pc, #20]	; (80022dc <MX_USART6_UART_Init+0x4c>)
 80022c8:	f004 fc70 	bl	8006bac <HAL_UART_Init>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80022d2:	f7ff fb61 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	2000035c 	.word	0x2000035c
 80022e0:	40011400 	.word	0x40011400

080022e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08a      	sub	sp, #40	; 0x28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ec:	f107 0314 	add.w	r3, r7, #20
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	60da      	str	r2, [r3, #12]
 80022fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a19      	ldr	r2, [pc, #100]	; (8002368 <HAL_UART_MspInit+0x84>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d12b      	bne.n	800235e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	4b18      	ldr	r3, [pc, #96]	; (800236c <HAL_UART_MspInit+0x88>)
 800230c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230e:	4a17      	ldr	r2, [pc, #92]	; (800236c <HAL_UART_MspInit+0x88>)
 8002310:	f043 0320 	orr.w	r3, r3, #32
 8002314:	6453      	str	r3, [r2, #68]	; 0x44
 8002316:	4b15      	ldr	r3, [pc, #84]	; (800236c <HAL_UART_MspInit+0x88>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231a:	f003 0320 	and.w	r3, r3, #32
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	4b11      	ldr	r3, [pc, #68]	; (800236c <HAL_UART_MspInit+0x88>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	4a10      	ldr	r2, [pc, #64]	; (800236c <HAL_UART_MspInit+0x88>)
 800232c:	f043 0304 	orr.w	r3, r3, #4
 8002330:	6313      	str	r3, [r2, #48]	; 0x30
 8002332:	4b0e      	ldr	r3, [pc, #56]	; (800236c <HAL_UART_MspInit+0x88>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	f003 0304 	and.w	r3, r3, #4
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800233e:	23c0      	movs	r3, #192	; 0xc0
 8002340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002342:	2302      	movs	r3, #2
 8002344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234a:	2303      	movs	r3, #3
 800234c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800234e:	2308      	movs	r3, #8
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002352:	f107 0314 	add.w	r3, r7, #20
 8002356:	4619      	mov	r1, r3
 8002358:	4805      	ldr	r0, [pc, #20]	; (8002370 <HAL_UART_MspInit+0x8c>)
 800235a:	f002 fbc9 	bl	8004af0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800235e:	bf00      	nop
 8002360:	3728      	adds	r7, #40	; 0x28
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40011400 	.word	0x40011400
 800236c:	40023800 	.word	0x40023800
 8002370:	40020800 	.word	0x40020800

08002374 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002374:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002378:	480d      	ldr	r0, [pc, #52]	; (80023b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800237a:	490e      	ldr	r1, [pc, #56]	; (80023b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800237c:	4a0e      	ldr	r2, [pc, #56]	; (80023b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800237e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002380:	e002      	b.n	8002388 <LoopCopyDataInit>

08002382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002386:	3304      	adds	r3, #4

08002388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800238a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800238c:	d3f9      	bcc.n	8002382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800238e:	4a0b      	ldr	r2, [pc, #44]	; (80023bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002390:	4c0b      	ldr	r4, [pc, #44]	; (80023c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002394:	e001      	b.n	800239a <LoopFillZerobss>

08002396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002398:	3204      	adds	r2, #4

0800239a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800239a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800239c:	d3fb      	bcc.n	8002396 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800239e:	f000 fa8b 	bl	80028b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023a2:	f004 ff1f 	bl	80071e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023a6:	f7ff fa7f 	bl	80018a8 <main>
  bx  lr    
 80023aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023b4:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 80023b8:	08007c1c 	.word	0x08007c1c
  ldr r2, =_sbss
 80023bc:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 80023c0:	200003b4 	.word	0x200003b4

080023c4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023c4:	e7fe      	b.n	80023c4 <CAN1_RX0_IRQHandler>
	...

080023c8 <BSP_BUZZER_Init>:
 *
 * @param None
 * @retval BSP status
 */
int32_t BSP_BUZZER_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b092      	sub	sp, #72	; 0x48
 80023cc:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	605a      	str	r2, [r3, #4]
 80023d8:	609a      	str	r2, [r3, #8]
 80023da:	60da      	str	r2, [r3, #12]
    TIM_OC_InitTypeDef sConfigOC = {0};
 80023dc:	f107 031c 	add.w	r3, r7, #28
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
 80023ec:	615a      	str	r2, [r3, #20]
 80023ee:	619a      	str	r2, [r3, #24]

	/* Configure the Buzzer PWM Timer */
    BUZZER_htim.Instance = BUZZER_PWM_TIM_INSTANCE;
 80023f0:	4b35      	ldr	r3, [pc, #212]	; (80024c8 <BSP_BUZZER_Init+0x100>)
 80023f2:	4a36      	ldr	r2, [pc, #216]	; (80024cc <BSP_BUZZER_Init+0x104>)
 80023f4:	601a      	str	r2, [r3, #0]
    BUZZER_htim.Init.Prescaler = 0;
 80023f6:	4b34      	ldr	r3, [pc, #208]	; (80024c8 <BSP_BUZZER_Init+0x100>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	605a      	str	r2, [r3, #4]
    BUZZER_htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023fc:	4b32      	ldr	r3, [pc, #200]	; (80024c8 <BSP_BUZZER_Init+0x100>)
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
    BUZZER_htim.Init.Period = 39062;
 8002402:	4b31      	ldr	r3, [pc, #196]	; (80024c8 <BSP_BUZZER_Init+0x100>)
 8002404:	f649 0296 	movw	r2, #39062	; 0x9896
 8002408:	60da      	str	r2, [r3, #12]
    BUZZER_htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800240a:	4b2f      	ldr	r3, [pc, #188]	; (80024c8 <BSP_BUZZER_Init+0x100>)
 800240c:	2200      	movs	r2, #0
 800240e:	611a      	str	r2, [r3, #16]
    BUZZER_htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002410:	4b2d      	ldr	r3, [pc, #180]	; (80024c8 <BSP_BUZZER_Init+0x100>)
 8002412:	2280      	movs	r2, #128	; 0x80
 8002414:	619a      	str	r2, [r3, #24]
    HAL_TIM_Base_Init(&BUZZER_htim);
 8002416:	482c      	ldr	r0, [pc, #176]	; (80024c8 <BSP_BUZZER_Init+0x100>)
 8002418:	f003 fab4 	bl	8005984 <HAL_TIM_Base_Init>

    BUZZER_TIM_CLK_ENABLE();	// TIM peripheral clock enable
 800241c:	2300      	movs	r3, #0
 800241e:	607b      	str	r3, [r7, #4]
 8002420:	4b2b      	ldr	r3, [pc, #172]	; (80024d0 <BSP_BUZZER_Init+0x108>)
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	4a2a      	ldr	r2, [pc, #168]	; (80024d0 <BSP_BUZZER_Init+0x108>)
 8002426:	f043 0320 	orr.w	r3, r3, #32
 800242a:	6413      	str	r3, [r2, #64]	; 0x40
 800242c:	4b28      	ldr	r3, [pc, #160]	; (80024d0 <BSP_BUZZER_Init+0x108>)
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	f003 0320 	and.w	r3, r3, #32
 8002434:	607b      	str	r3, [r7, #4]
 8002436:	687b      	ldr	r3, [r7, #4]

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002438:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800243c:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_TIM_ConfigClockSource(&BUZZER_htim, &sClockSourceConfig);
 800243e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002442:	4619      	mov	r1, r3
 8002444:	4820      	ldr	r0, [pc, #128]	; (80024c8 <BSP_BUZZER_Init+0x100>)
 8002446:	f003 ff21 	bl	800628c <HAL_TIM_ConfigClockSource>

    HAL_TIM_PWM_Init(&BUZZER_htim);
 800244a:	481f      	ldr	r0, [pc, #124]	; (80024c8 <BSP_BUZZER_Init+0x100>)
 800244c:	f003 fbc2 	bl	8005bd4 <HAL_TIM_PWM_Init>

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002450:	2360      	movs	r3, #96	; 0x60
 8002452:	61fb      	str	r3, [r7, #28]
    sConfigOC.Pulse = 3906;
 8002454:	f640 7342 	movw	r3, #3906	; 0xf42
 8002458:	623b      	str	r3, [r7, #32]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800245a:	2300      	movs	r3, #0
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800245e:	2300      	movs	r3, #0
 8002460:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_TIM_PWM_ConfigChannel(&BUZZER_htim, &sConfigOC, BUZZER_PWM_TIM_CHANNEL);
 8002462:	f107 031c 	add.w	r3, r7, #28
 8002466:	2200      	movs	r2, #0
 8002468:	4619      	mov	r1, r3
 800246a:	4817      	ldr	r0, [pc, #92]	; (80024c8 <BSP_BUZZER_Init+0x100>)
 800246c:	f003 fe4c 	bl	8006108 <HAL_TIM_PWM_ConfigChannel>

    /* HAL_TIM_MspPostInit:  */

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002470:	f107 0308 	add.w	r3, r7, #8
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	60da      	str	r2, [r3, #12]
 800247e:	611a      	str	r2, [r3, #16]

    BUZZER_GPIO_CLK_ENABLE();
 8002480:	2300      	movs	r3, #0
 8002482:	603b      	str	r3, [r7, #0]
 8002484:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <BSP_BUZZER_Init+0x108>)
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	4a11      	ldr	r2, [pc, #68]	; (80024d0 <BSP_BUZZER_Init+0x108>)
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	6313      	str	r3, [r2, #48]	; 0x30
 8002490:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <BSP_BUZZER_Init+0x108>)
 8002492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	603b      	str	r3, [r7, #0]
 800249a:	683b      	ldr	r3, [r7, #0]
    /** BUZZER GPIO Configuration
        PA2     ------> TIM9_CH1
     */
    GPIO_InitStruct.Pin = BUZZER_GPIO_PIN;
 800249c:	2304      	movs	r3, #4
 800249e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a0:	2302      	movs	r3, #2
 80024a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80024ac:	2303      	movs	r3, #3
 80024ae:	61bb      	str	r3, [r7, #24]

    HAL_GPIO_Init(BUZZER_GPIO_PORT, &GPIO_InitStruct);
 80024b0:	f107 0308 	add.w	r3, r7, #8
 80024b4:	4619      	mov	r1, r3
 80024b6:	4807      	ldr	r0, [pc, #28]	; (80024d4 <BSP_BUZZER_Init+0x10c>)
 80024b8:	f002 fb1a 	bl	8004af0 <HAL_GPIO_Init>

    return BSP_ERROR_NONE;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3748      	adds	r7, #72	; 0x48
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	200000f0 	.word	0x200000f0
 80024cc:	40014000 	.word	0x40014000
 80024d0:	40023800 	.word	0x40023800
 80024d4:	40020000 	.word	0x40020000

080024d8 <BSP_BUZZER_On>:
 *
 * @param None
 * @return BSP Status
 */
int32_t BSP_BUZZER_On(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&BUZZER_htim, TIM_CHANNEL_1);
 80024dc:	2100      	movs	r1, #0
 80024de:	4803      	ldr	r0, [pc, #12]	; (80024ec <BSP_BUZZER_On+0x14>)
 80024e0:	f003 fbd2 	bl	8005c88 <HAL_TIM_PWM_Start>

    return BSP_ERROR_NONE;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	200000f0 	.word	0x200000f0

080024f0 <BSP_BUZZER_Off>:
 *
 * @param None
 * @return BSP Status
 */
int32_t BSP_BUZZER_Off(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&BUZZER_htim, TIM_CHANNEL_1);
 80024f4:	2100      	movs	r1, #0
 80024f6:	4803      	ldr	r0, [pc, #12]	; (8002504 <BSP_BUZZER_Off+0x14>)
 80024f8:	f003 fc8e 	bl	8005e18 <HAL_TIM_PWM_Stop>

    return BSP_ERROR_NONE;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	200000f0 	.word	0x200000f0

08002508 <BSP_LED_Init>:
 *          @arg LED3
 *
 * @return BSP Status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b088      	sub	sp, #32
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	71fb      	strb	r3, [r7, #7]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002512:	f107 030c 	add.w	r3, r7, #12
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	605a      	str	r2, [r3, #4]
 800251c:	609a      	str	r2, [r3, #8]
 800251e:	60da      	str	r2, [r3, #12]
 8002520:	611a      	str	r2, [r3, #16]

    /* Enable the GPIO_LED Clock */
    LEDx_GPIO_CLK_ENABLE(Led);
 8002522:	2300      	movs	r3, #0
 8002524:	60bb      	str	r3, [r7, #8]
 8002526:	4b19      	ldr	r3, [pc, #100]	; (800258c <BSP_LED_Init+0x84>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	4a18      	ldr	r2, [pc, #96]	; (800258c <BSP_LED_Init+0x84>)
 800252c:	f043 0308 	orr.w	r3, r3, #8
 8002530:	6313      	str	r3, [r2, #48]	; 0x30
 8002532:	4b16      	ldr	r3, [pc, #88]	; (800258c <BSP_LED_Init+0x84>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	60bb      	str	r3, [r7, #8]
 800253c:	68bb      	ldr	r3, [r7, #8]

    /* Configure the GPIO_LED pin */
    GPIO_InitStruct.Pin = LED_PIN[Led];
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	4a13      	ldr	r2, [pc, #76]	; (8002590 <BSP_LED_Init+0x88>)
 8002542:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002546:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002548:	2301      	movs	r3, #1
 800254a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002550:	2302      	movs	r3, #2
 8002552:	61bb      	str	r3, [r7, #24]

    HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	4a0f      	ldr	r2, [pc, #60]	; (8002594 <BSP_LED_Init+0x8c>)
 8002558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800255c:	f107 020c 	add.w	r2, r7, #12
 8002560:	4611      	mov	r1, r2
 8002562:	4618      	mov	r0, r3
 8002564:	f002 fac4 	bl	8004af0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	4a0a      	ldr	r2, [pc, #40]	; (8002594 <BSP_LED_Init+0x8c>)
 800256c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	4a07      	ldr	r2, [pc, #28]	; (8002590 <BSP_LED_Init+0x88>)
 8002574:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002578:	2201      	movs	r2, #1
 800257a:	4619      	mov	r1, r3
 800257c:	f002 fc64 	bl	8004e48 <HAL_GPIO_WritePin>

    return BSP_ERROR_NONE;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3720      	adds	r7, #32
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40023800 	.word	0x40023800
 8002590:	08007bb0 	.word	0x08007bb0
 8002594:	20000044 	.word	0x20000044

08002598 <BSP_LED_On>:
 *          @arg LED2
 *          @arg LED3
 * @return BSP Status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	4a07      	ldr	r2, [pc, #28]	; (80025c4 <BSP_LED_On+0x2c>)
 80025a6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	4a06      	ldr	r2, [pc, #24]	; (80025c8 <BSP_LED_On+0x30>)
 80025ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025b2:	2200      	movs	r2, #0
 80025b4:	4619      	mov	r1, r3
 80025b6:	f002 fc47 	bl	8004e48 <HAL_GPIO_WritePin>

    return BSP_ERROR_NONE;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	20000044 	.word	0x20000044
 80025c8:	08007bb0 	.word	0x08007bb0

080025cc <BSP_LED_Off>:
 *          @arg LED2
 *          @arg LED3
 * @return BSP Status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	4a07      	ldr	r2, [pc, #28]	; (80025f8 <BSP_LED_Off+0x2c>)
 80025da:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80025de:	79fb      	ldrb	r3, [r7, #7]
 80025e0:	4a06      	ldr	r2, [pc, #24]	; (80025fc <BSP_LED_Off+0x30>)
 80025e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025e6:	2201      	movs	r2, #1
 80025e8:	4619      	mov	r1, r3
 80025ea:	f002 fc2d 	bl	8004e48 <HAL_GPIO_WritePin>

    return BSP_ERROR_NONE;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20000044 	.word	0x20000044
 80025fc:	08007bb0 	.word	0x08007bb0

08002600 <BSP_LED_Toggle>:
 *          @arg LED2
 *          @arg LED3
 * @return BSP Status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	4a07      	ldr	r2, [pc, #28]	; (800262c <BSP_LED_Toggle+0x2c>)
 800260e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	4906      	ldr	r1, [pc, #24]	; (8002630 <BSP_LED_Toggle+0x30>)
 8002616:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800261a:	4619      	mov	r1, r3
 800261c:	4610      	mov	r0, r2
 800261e:	f002 fc2c 	bl	8004e7a <HAL_GPIO_TogglePin>

    return BSP_ERROR_NONE;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	20000044 	.word	0x20000044
 8002630:	08007bb0 	.word	0x08007bb0

08002634 <CAN_API_Init>:
                        can_rtr_t RTR,
                        init_ll_can_t Fn_Init_Can,
                        send_can_data_t Fn_Send_Can_Data,
                        read_can_data_t Fn_Read_Can_Data,
                        get_msg_count_t Fn_Get_Msg_Count)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	607b      	str	r3, [r7, #4]
 800263e:	460b      	mov	r3, r1
 8002640:	72fb      	strb	r3, [r7, #11]
 8002642:	4613      	mov	r3, r2
 8002644:	72bb      	strb	r3, [r7, #10]
    can_status_t status;

    obj->Fn_Init_Can = Fn_Init_Can;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	611a      	str	r2, [r3, #16]

    obj->Fn_Send_Can_Data = Fn_Send_Can_Data;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a3a      	ldr	r2, [r7, #32]
 8002650:	615a      	str	r2, [r3, #20]

    obj->Fn_Read_Can_Data = Fn_Read_Can_Data;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002656:	619a      	str	r2, [r3, #24]

    obj->Fn_Get_Msg_Count = Fn_Get_Msg_Count;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800265c:	61da      	str	r2, [r3, #28]

    obj->Frame.IDE = IDE;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	7afa      	ldrb	r2, [r7, #11]
 8002662:	711a      	strb	r2, [r3, #4]
    obj->Frame.RTR = RTR;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	7aba      	ldrb	r2, [r7, #10]
 8002668:	715a      	strb	r2, [r3, #5]
    obj->Frame.payload_length = 0;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	73da      	strb	r2, [r3, #15]

    status = obj->Fn_Init_Can();
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	4798      	blx	r3
 8002676:	4603      	mov	r3, r0
 8002678:	75fb      	strb	r3, [r7, #23]

    return status;
 800267a:	7dfb      	ldrb	r3, [r7, #23]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <CAN_API_Send_Message>:
 *
 * @param obj CAN structure instance
 * @return can_status_t
 */
can_status_t CAN_API_Send_Message( CAN_t *obj)
{
 8002684:	b5b0      	push	{r4, r5, r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af02      	add	r7, sp, #8
 800268a:	6078      	str	r0, [r7, #4]
    can_status_t status;

    obj->Frame.DLC = (obj->Frame.payload_length>PAYLOAD_MAX_LENGTH) ? obj->Frame.payload_length=PAYLOAD_MAX_LENGTH : obj->Frame.payload_length;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	7bdb      	ldrb	r3, [r3, #15]
 8002690:	2b08      	cmp	r3, #8
 8002692:	d904      	bls.n	800269e <CAN_API_Send_Message+0x1a>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2208      	movs	r2, #8
 8002698:	73da      	strb	r2, [r3, #15]
 800269a:	2208      	movs	r2, #8
 800269c:	e001      	b.n	80026a2 <CAN_API_Send_Message+0x1e>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	7bda      	ldrb	r2, [r3, #15]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	719a      	strb	r2, [r3, #6]

    status = obj->Fn_Send_Can_Data( obj->Frame.id,
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	695c      	ldr	r4, [r3, #20]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6818      	ldr	r0, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	7919      	ldrb	r1, [r3, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	795a      	ldrb	r2, [r3, #5]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	799d      	ldrb	r5, [r3, #6]
                                    obj->Frame.IDE,
                                    obj->Frame.RTR,
                                    obj->Frame.DLC,
                                    (obj->Frame.payload_buff) );
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3307      	adds	r3, #7
    status = obj->Fn_Send_Can_Data( obj->Frame.id,
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	462b      	mov	r3, r5
 80026c2:	47a0      	blx	r4
 80026c4:	4603      	mov	r3, r0
 80026c6:	73fb      	strb	r3, [r7, #15]

    return status;
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bdb0      	pop	{r4, r5, r7, pc}

080026d2 <CAN_API_Read_Message>:
 *
 * @param obj CAN structure instance
 * @return can_status_t
 */
can_status_t CAN_API_Read_Message( CAN_t *obj)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b084      	sub	sp, #16
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
    can_status_t status;

    status = obj->Fn_Read_Can_Data( &obj->Frame.id,
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	6878      	ldr	r0, [r7, #4]
                                    obj->Frame.payload_buff);
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	3207      	adds	r2, #7
    status = obj->Fn_Read_Can_Data( &obj->Frame.id,
 80026e4:	4611      	mov	r1, r2
 80026e6:	4798      	blx	r3
 80026e8:	4603      	mov	r3, r0
 80026ea:	73fb      	strb	r3, [r7, #15]

    return status;
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <CAN_Wrapper_Init>:
 *
 * @param   None
 * @retval  None
 */
can_status_t CAN_Wrapper_Init(void)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	af00      	add	r7, sp, #0
    CAN2_Init();					// CAN2 peripheral initialization
 80026fa:	f000 f85d 	bl	80027b8 <CAN2_Init>
    CAN2_FilterConfig();    		// CAN2 filter configuration
 80026fe:	f000 f88f 	bl	8002820 <CAN2_FilterConfig>
	CAN2_ActivateNotification();	// CAN2 enable interrupt
 8002702:	f000 f8c5 	bl	8002890 <CAN2_ActivateNotification>
	CAN2_Start();					// CAN2 start the CAN module
 8002706:	f000 f8cd 	bl	80028a4 <CAN2_Start>

	return CAN_STATUS_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	bd80      	pop	{r7, pc}

08002710 <CAN_Wrapper_TransmitData>:
 * @param dlc Length of frame
 * @param data Data to transmit
 * @retval None
 */
can_status_t CAN_Wrapper_TransmitData(uint32_t id, uint8_t ide, uint8_t rtr, uint8_t dlc, uint8_t *data)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	4608      	mov	r0, r1
 800271a:	4611      	mov	r1, r2
 800271c:	461a      	mov	r2, r3
 800271e:	4603      	mov	r3, r0
 8002720:	70fb      	strb	r3, [r7, #3]
 8002722:	460b      	mov	r3, r1
 8002724:	70bb      	strb	r3, [r7, #2]
 8002726:	4613      	mov	r3, r2
 8002728:	707b      	strb	r3, [r7, #1]
    uint32_t mailbox;

	txHeader.StdId = id;            // standard identifier value
 800272a:	4a11      	ldr	r2, [pc, #68]	; (8002770 <CAN_Wrapper_TransmitData+0x60>)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6013      	str	r3, [r2, #0]
	txHeader.DLC = dlc; 			// length of frame
 8002730:	787b      	ldrb	r3, [r7, #1]
 8002732:	4a0f      	ldr	r2, [pc, #60]	; (8002770 <CAN_Wrapper_TransmitData+0x60>)
 8002734:	6113      	str	r3, [r2, #16]
	txHeader.IDE = CAN_ID_STD; 		// type of identifier
 8002736:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <CAN_Wrapper_TransmitData+0x60>)
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;    // data frame
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <CAN_Wrapper_TransmitData+0x60>)
 800273e:	2200      	movs	r2, #0
 8002740:	60da      	str	r2, [r3, #12]

	HAL_CAN_AddTxMessage(&hcan2, &txHeader, data, &mailbox);
 8002742:	f107 030c 	add.w	r3, r7, #12
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4909      	ldr	r1, [pc, #36]	; (8002770 <CAN_Wrapper_TransmitData+0x60>)
 800274a:	480a      	ldr	r0, [pc, #40]	; (8002774 <CAN_Wrapper_TransmitData+0x64>)
 800274c:	f001 f8e8 	bl	8003920 <HAL_CAN_AddTxMessage>

	if(mailbox == CAN_TX_MAILBOX2)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2b04      	cmp	r3, #4
 8002754:	d107      	bne.n	8002766 <CAN_Wrapper_TransmitData+0x56>
    {
		while( HAL_CAN_IsTxMessagePending(&hcan2, CAN_TX_MAILBOX0));
 8002756:	bf00      	nop
 8002758:	2101      	movs	r1, #1
 800275a:	4806      	ldr	r0, [pc, #24]	; (8002774 <CAN_Wrapper_TransmitData+0x64>)
 800275c:	f001 f9bb 	bl	8003ad6 <HAL_CAN_IsTxMessagePending>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f8      	bne.n	8002758 <CAN_Wrapper_TransmitData+0x48>
	}

	return CAN_STATUS_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	20000188 	.word	0x20000188
 8002774:	20000138 	.word	0x20000138

08002778 <CAN_Wrapper_ReceiveData>:
 * @param id Received identifier
 * @param data Received data
 * @retval  None
 */
can_status_t CAN_Wrapper_ReceiveData(uint32_t *id, uint8_t *data)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
    HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &rxHeader, data);
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	4a06      	ldr	r2, [pc, #24]	; (80027a0 <CAN_Wrapper_ReceiveData+0x28>)
 8002786:	2100      	movs	r1, #0
 8002788:	4806      	ldr	r0, [pc, #24]	; (80027a4 <CAN_Wrapper_ReceiveData+0x2c>)
 800278a:	f001 f9c8 	bl	8003b1e <HAL_CAN_GetRxMessage>

    *id = rxHeader.StdId;	// received standard identifier
 800278e:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <CAN_Wrapper_ReceiveData+0x28>)
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	601a      	str	r2, [r3, #0]

	return CAN_STATUS_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	200001a0 	.word	0x200001a0
 80027a4:	20000138 	.word	0x20000138

080027a8 <CAN_Wrapper_DataCount>:
 * No es static, por lo que puede ser usada por otros archivos.
 *
 * @return can_status_t
 */
can_status_t CAN_Wrapper_DataCount(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
	return CAN_STATUS_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <CAN2_Init>:
 *
 * @param None
 * @retval None
 */
static void CAN2_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
	hcan2.Instance = CAN2;
 80027bc:	4b16      	ldr	r3, [pc, #88]	; (8002818 <CAN2_Init+0x60>)
 80027be:	4a17      	ldr	r2, [pc, #92]	; (800281c <CAN2_Init+0x64>)
 80027c0:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 16;
 80027c2:	4b15      	ldr	r3, [pc, #84]	; (8002818 <CAN2_Init+0x60>)
 80027c4:	2210      	movs	r2, #16
 80027c6:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 80027c8:	4b13      	ldr	r3, [pc, #76]	; (8002818 <CAN2_Init+0x60>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80027ce:	4b12      	ldr	r3, [pc, #72]	; (8002818 <CAN2_Init+0x60>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80027d4:	4b10      	ldr	r3, [pc, #64]	; (8002818 <CAN2_Init+0x60>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80027da:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <CAN2_Init+0x60>)
 80027dc:	2200      	movs	r2, #0
 80027de:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 80027e0:	4b0d      	ldr	r3, [pc, #52]	; (8002818 <CAN2_Init+0x60>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 80027e6:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <CAN2_Init+0x60>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 80027ec:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <CAN2_Init+0x60>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 80027f2:	4b09      	ldr	r3, [pc, #36]	; (8002818 <CAN2_Init+0x60>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 80027f8:	4b07      	ldr	r3, [pc, #28]	; (8002818 <CAN2_Init+0x60>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 80027fe:	4b06      	ldr	r3, [pc, #24]	; (8002818 <CAN2_Init+0x60>)
 8002800:	2200      	movs	r2, #0
 8002802:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002804:	4804      	ldr	r0, [pc, #16]	; (8002818 <CAN2_Init+0x60>)
 8002806:	f000 fe6b 	bl	80034e0 <HAL_CAN_Init>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <CAN2_Init+0x5c>
	{
		Error_Handler();
 8002810:	f7ff f8c2 	bl	8001998 <Error_Handler>
	}
}
 8002814:	bf00      	nop
 8002816:	bd80      	pop	{r7, pc}
 8002818:	20000138 	.word	0x20000138
 800281c:	40006800 	.word	0x40006800

08002820 <CAN2_FilterConfig>:
 *
 * @param None
 * @retval None
 */
static void CAN2_FilterConfig(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
	aFilterConfig.FilterBank = 0;
 8002824:	4b18      	ldr	r3, [pc, #96]	; (8002888 <CAN2_FilterConfig+0x68>)
 8002826:	2200      	movs	r2, #0
 8002828:	615a      	str	r2, [r3, #20]
	aFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 800282a:	4b17      	ldr	r3, [pc, #92]	; (8002888 <CAN2_FilterConfig+0x68>)
 800282c:	2201      	movs	r2, #1
 800282e:	621a      	str	r2, [r3, #32]
	aFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002830:	4b15      	ldr	r3, [pc, #84]	; (8002888 <CAN2_FilterConfig+0x68>)
 8002832:	2200      	movs	r2, #0
 8002834:	611a      	str	r2, [r3, #16]
	aFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002836:	4b14      	ldr	r3, [pc, #80]	; (8002888 <CAN2_FilterConfig+0x68>)
 8002838:	2200      	movs	r2, #0
 800283a:	619a      	str	r2, [r3, #24]
	aFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 800283c:	4b12      	ldr	r3, [pc, #72]	; (8002888 <CAN2_FilterConfig+0x68>)
 800283e:	2200      	movs	r2, #0
 8002840:	61da      	str	r2, [r3, #28]
	aFilterConfig.SlaveStartFilterBank = 14;
 8002842:	4b11      	ldr	r3, [pc, #68]	; (8002888 <CAN2_FilterConfig+0x68>)
 8002844:	220e      	movs	r2, #14
 8002846:	625a      	str	r2, [r3, #36]	; 0x24

	//aFilterConfig.FilterIdHigh = ID_PEDAL<<5;
	aFilterConfig.FilterIdLow = 0x000;
 8002848:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <CAN2_FilterConfig+0x68>)
 800284a:	2200      	movs	r2, #0
 800284c:	605a      	str	r2, [r3, #4]
	//aFilterConfig.FilterMaskIdHigh = ID_PEDAL<<5;
	aFilterConfig.FilterMaskIdLow = 0x000;
 800284e:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <CAN2_FilterConfig+0x68>)
 8002850:	2200      	movs	r2, #0
 8002852:	60da      	str	r2, [r3, #12]

	HAL_CAN_ConfigFilter(&hcan2, &aFilterConfig);
 8002854:	490c      	ldr	r1, [pc, #48]	; (8002888 <CAN2_FilterConfig+0x68>)
 8002856:	480d      	ldr	r0, [pc, #52]	; (800288c <CAN2_FilterConfig+0x6c>)
 8002858:	f000 ff3e 	bl	80036d8 <HAL_CAN_ConfigFilter>

	aFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 800285c:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <CAN2_FilterConfig+0x68>)
 800285e:	2201      	movs	r2, #1
 8002860:	621a      	str	r2, [r3, #32]
	aFilterConfig.FilterBank = 1;
 8002862:	4b09      	ldr	r3, [pc, #36]	; (8002888 <CAN2_FilterConfig+0x68>)
 8002864:	2201      	movs	r2, #1
 8002866:	615a      	str	r2, [r3, #20]
	aFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002868:	4b07      	ldr	r3, [pc, #28]	; (8002888 <CAN2_FilterConfig+0x68>)
 800286a:	2200      	movs	r2, #0
 800286c:	611a      	str	r2, [r3, #16]
	aFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 800286e:	4b06      	ldr	r3, [pc, #24]	; (8002888 <CAN2_FilterConfig+0x68>)
 8002870:	2201      	movs	r2, #1
 8002872:	619a      	str	r2, [r3, #24]
	aFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8002874:	4b04      	ldr	r3, [pc, #16]	; (8002888 <CAN2_FilterConfig+0x68>)
 8002876:	2200      	movs	r2, #0
 8002878:	61da      	str	r2, [r3, #28]
	//aFilterConfig.FilterIdLow = ID_POTENCIA_BMS<<5;
	//aFilterConfig.FilterMaskIdHigh = ID_NIVEL_BATERIA_BMS<<5;
	//aFilterConfig.FilterMaskIdLow = ID_VELOCIDAD_INV<<5;
	//aFilterConfig.SlaveStartFilterBank = 14;

	HAL_CAN_ConfigFilter(&hcan2, &aFilterConfig);
 800287a:	4903      	ldr	r1, [pc, #12]	; (8002888 <CAN2_FilterConfig+0x68>)
 800287c:	4803      	ldr	r0, [pc, #12]	; (800288c <CAN2_FilterConfig+0x6c>)
 800287e:	f000 ff2b 	bl	80036d8 <HAL_CAN_ConfigFilter>
}
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20000160 	.word	0x20000160
 800288c:	20000138 	.word	0x20000138

08002890 <CAN2_ActivateNotification>:
 *
 * @param None
 * @retval None
 */
static void CAN2_ActivateNotification(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002894:	2102      	movs	r1, #2
 8002896:	4802      	ldr	r0, [pc, #8]	; (80028a0 <CAN2_ActivateNotification+0x10>)
 8002898:	f001 fa53 	bl	8003d42 <HAL_CAN_ActivateNotification>
}
 800289c:	bf00      	nop
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20000138 	.word	0x20000138

080028a4 <CAN2_Start>:
 *
 * @param None
 * @retval None
 */
static void CAN2_Start(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
	HAL_CAN_Start(&hcan2);
 80028a8:	4802      	ldr	r0, [pc, #8]	; (80028b4 <CAN2_Start+0x10>)
 80028aa:	f000 fff5 	bl	8003898 <HAL_CAN_Start>
}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20000138 	.word	0x20000138

080028b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028bc:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <SystemInit+0x20>)
 80028be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c2:	4a05      	ldr	r2, [pc, #20]	; (80028d8 <SystemInit+0x20>)
 80028c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028cc:	bf00      	nop
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028e0:	4b0e      	ldr	r3, [pc, #56]	; (800291c <HAL_Init+0x40>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a0d      	ldr	r2, [pc, #52]	; (800291c <HAL_Init+0x40>)
 80028e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028ec:	4b0b      	ldr	r3, [pc, #44]	; (800291c <HAL_Init+0x40>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a0a      	ldr	r2, [pc, #40]	; (800291c <HAL_Init+0x40>)
 80028f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028f8:	4b08      	ldr	r3, [pc, #32]	; (800291c <HAL_Init+0x40>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a07      	ldr	r2, [pc, #28]	; (800291c <HAL_Init+0x40>)
 80028fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002902:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002904:	2003      	movs	r0, #3
 8002906:	f001 fd41 	bl	800438c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800290a:	200f      	movs	r0, #15
 800290c:	f000 f808 	bl	8002920 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002910:	f7ff fb4e 	bl	8001fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40023c00 	.word	0x40023c00

08002920 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002928:	4b12      	ldr	r3, [pc, #72]	; (8002974 <HAL_InitTick+0x54>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	4b12      	ldr	r3, [pc, #72]	; (8002978 <HAL_InitTick+0x58>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	4619      	mov	r1, r3
 8002932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002936:	fbb3 f3f1 	udiv	r3, r3, r1
 800293a:	fbb2 f3f3 	udiv	r3, r2, r3
 800293e:	4618      	mov	r0, r3
 8002940:	f001 fd59 	bl	80043f6 <HAL_SYSTICK_Config>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e00e      	b.n	800296c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b0f      	cmp	r3, #15
 8002952:	d80a      	bhi.n	800296a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002954:	2200      	movs	r2, #0
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	f04f 30ff 	mov.w	r0, #4294967295
 800295c:	f001 fd21 	bl	80043a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002960:	4a06      	ldr	r2, [pc, #24]	; (800297c <HAL_InitTick+0x5c>)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002966:	2300      	movs	r3, #0
 8002968:	e000      	b.n	800296c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
}
 800296c:	4618      	mov	r0, r3
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	20000050 	.word	0x20000050
 8002978:	20000058 	.word	0x20000058
 800297c:	20000054 	.word	0x20000054

08002980 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002984:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <HAL_IncTick+0x20>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	461a      	mov	r2, r3
 800298a:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <HAL_IncTick+0x24>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4413      	add	r3, r2
 8002990:	4a04      	ldr	r2, [pc, #16]	; (80029a4 <HAL_IncTick+0x24>)
 8002992:	6013      	str	r3, [r2, #0]
}
 8002994:	bf00      	nop
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	20000058 	.word	0x20000058
 80029a4:	200003a0 	.word	0x200003a0

080029a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  return uwTick;
 80029ac:	4b03      	ldr	r3, [pc, #12]	; (80029bc <HAL_GetTick+0x14>)
 80029ae:	681b      	ldr	r3, [r3, #0]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	200003a0 	.word	0x200003a0

080029c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029c8:	f7ff ffee 	bl	80029a8 <HAL_GetTick>
 80029cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d8:	d005      	beq.n	80029e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029da:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <HAL_Delay+0x44>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4413      	add	r3, r2
 80029e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029e6:	bf00      	nop
 80029e8:	f7ff ffde 	bl	80029a8 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d8f7      	bhi.n	80029e8 <HAL_Delay+0x28>
  {
  }
}
 80029f8:	bf00      	nop
 80029fa:	bf00      	nop
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	20000058 	.word	0x20000058

08002a08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a10:	2300      	movs	r3, #0
 8002a12:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e033      	b.n	8002a86 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d109      	bne.n	8002a3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7fe fa0e 	bl	8000e48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	f003 0310 	and.w	r3, r3, #16
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d118      	bne.n	8002a78 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a4e:	f023 0302 	bic.w	r3, r3, #2
 8002a52:	f043 0202 	orr.w	r2, r3, #2
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 fbb8 	bl	80031d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	f023 0303 	bic.w	r3, r3, #3
 8002a6e:	f043 0201 	orr.w	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	641a      	str	r2, [r3, #64]	; 0x40
 8002a76:	e001      	b.n	8002a7c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b084      	sub	sp, #16
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	bf0c      	ite	eq
 8002aac:	2301      	moveq	r3, #1
 8002aae:	2300      	movne	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f003 0320 	and.w	r3, r3, #32
 8002abe:	2b20      	cmp	r3, #32
 8002ac0:	bf0c      	ite	eq
 8002ac2:	2301      	moveq	r3, #1
 8002ac4:	2300      	movne	r3, #0
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d049      	beq.n	8002b64 <HAL_ADC_IRQHandler+0xd6>
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d046      	beq.n	8002b64 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	f003 0310 	and.w	r3, r3, #16
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d105      	bne.n	8002aee <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d12b      	bne.n	8002b54 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d127      	bne.n	8002b54 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d006      	beq.n	8002b20 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d119      	bne.n	8002b54 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0220 	bic.w	r2, r2, #32
 8002b2e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d105      	bne.n	8002b54 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	f043 0201 	orr.w	r2, r3, #1
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7ff fa13 	bl	8001f80 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f06f 0212 	mvn.w	r2, #18
 8002b62:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	bf0c      	ite	eq
 8002b72:	2301      	moveq	r3, #1
 8002b74:	2300      	movne	r3, #0
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b84:	2b80      	cmp	r3, #128	; 0x80
 8002b86:	bf0c      	ite	eq
 8002b88:	2301      	moveq	r3, #1
 8002b8a:	2300      	movne	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d057      	beq.n	8002c46 <HAL_ADC_IRQHandler+0x1b8>
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d054      	beq.n	8002c46 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	f003 0310 	and.w	r3, r3, #16
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d105      	bne.n	8002bb4 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d139      	bne.n	8002c36 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d006      	beq.n	8002bde <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d12b      	bne.n	8002c36 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d124      	bne.n	8002c36 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d11d      	bne.n	8002c36 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d119      	bne.n	8002c36 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c10:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d105      	bne.n	8002c36 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	f043 0201 	orr.w	r2, r3, #1
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 fc48 	bl	80034cc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f06f 020c 	mvn.w	r2, #12
 8002c44:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	bf0c      	ite	eq
 8002c54:	2301      	moveq	r3, #1
 8002c56:	2300      	movne	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c66:	2b40      	cmp	r3, #64	; 0x40
 8002c68:	bf0c      	ite	eq
 8002c6a:	2301      	moveq	r3, #1
 8002c6c:	2300      	movne	r3, #0
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d017      	beq.n	8002ca8 <HAL_ADC_IRQHandler+0x21a>
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d014      	beq.n	8002ca8 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d10d      	bne.n	8002ca8 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c90:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f953 	bl	8002f44 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f06f 0201 	mvn.w	r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0320 	and.w	r3, r3, #32
 8002cb2:	2b20      	cmp	r3, #32
 8002cb4:	bf0c      	ite	eq
 8002cb6:	2301      	moveq	r3, #1
 8002cb8:	2300      	movne	r3, #0
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ccc:	bf0c      	ite	eq
 8002cce:	2301      	moveq	r3, #1
 8002cd0:	2300      	movne	r3, #0
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d015      	beq.n	8002d08 <HAL_ADC_IRQHandler+0x27a>
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d012      	beq.n	8002d08 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce6:	f043 0202 	orr.w	r2, r3, #2
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f06f 0220 	mvn.w	r2, #32
 8002cf6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 f92d 	bl	8002f58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f06f 0220 	mvn.w	r2, #32
 8002d06:	601a      	str	r2, [r3, #0]
  }
}
 8002d08:	bf00      	nop
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d101      	bne.n	8002d2e <HAL_ADC_Start_DMA+0x1e>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	e0e9      	b.n	8002f02 <HAL_ADC_Start_DMA+0x1f2>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d018      	beq.n	8002d76 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f042 0201 	orr.w	r2, r2, #1
 8002d52:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d54:	4b6d      	ldr	r3, [pc, #436]	; (8002f0c <HAL_ADC_Start_DMA+0x1fc>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a6d      	ldr	r2, [pc, #436]	; (8002f10 <HAL_ADC_Start_DMA+0x200>)
 8002d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5e:	0c9a      	lsrs	r2, r3, #18
 8002d60:	4613      	mov	r3, r2
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	4413      	add	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002d68:	e002      	b.n	8002d70 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f9      	bne.n	8002d6a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d84:	d107      	bne.n	8002d96 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d94:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	f040 80a1 	bne.w	8002ee8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002dae:	f023 0301 	bic.w	r3, r3, #1
 8002db2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d007      	beq.n	8002dd8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002dd0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002de4:	d106      	bne.n	8002df4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dea:	f023 0206 	bic.w	r2, r3, #6
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	645a      	str	r2, [r3, #68]	; 0x44
 8002df2:	e002      	b.n	8002dfa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e02:	4b44      	ldr	r3, [pc, #272]	; (8002f14 <HAL_ADC_Start_DMA+0x204>)
 8002e04:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0a:	4a43      	ldr	r2, [pc, #268]	; (8002f18 <HAL_ADC_Start_DMA+0x208>)
 8002e0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e12:	4a42      	ldr	r2, [pc, #264]	; (8002f1c <HAL_ADC_Start_DMA+0x20c>)
 8002e14:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1a:	4a41      	ldr	r2, [pc, #260]	; (8002f20 <HAL_ADC_Start_DMA+0x210>)
 8002e1c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002e26:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002e36:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e46:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	334c      	adds	r3, #76	; 0x4c
 8002e52:	4619      	mov	r1, r3
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f001 fb88 	bl	800456c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 031f 	and.w	r3, r3, #31
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d12a      	bne.n	8002ebe <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a2d      	ldr	r2, [pc, #180]	; (8002f24 <HAL_ADC_Start_DMA+0x214>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d015      	beq.n	8002e9e <HAL_ADC_Start_DMA+0x18e>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a2c      	ldr	r2, [pc, #176]	; (8002f28 <HAL_ADC_Start_DMA+0x218>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d105      	bne.n	8002e88 <HAL_ADC_Start_DMA+0x178>
 8002e7c:	4b25      	ldr	r3, [pc, #148]	; (8002f14 <HAL_ADC_Start_DMA+0x204>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f003 031f 	and.w	r3, r3, #31
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00a      	beq.n	8002e9e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a27      	ldr	r2, [pc, #156]	; (8002f2c <HAL_ADC_Start_DMA+0x21c>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d136      	bne.n	8002f00 <HAL_ADC_Start_DMA+0x1f0>
 8002e92:	4b20      	ldr	r3, [pc, #128]	; (8002f14 <HAL_ADC_Start_DMA+0x204>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f003 0310 	and.w	r3, r3, #16
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d130      	bne.n	8002f00 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d129      	bne.n	8002f00 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	e020      	b.n	8002f00 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a18      	ldr	r2, [pc, #96]	; (8002f24 <HAL_ADC_Start_DMA+0x214>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d11b      	bne.n	8002f00 <HAL_ADC_Start_DMA+0x1f0>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d114      	bne.n	8002f00 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ee4:	609a      	str	r2, [r3, #8]
 8002ee6:	e00b      	b.n	8002f00 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	f043 0210 	orr.w	r2, r3, #16
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef8:	f043 0201 	orr.w	r2, r3, #1
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20000050 	.word	0x20000050
 8002f10:	431bde83 	.word	0x431bde83
 8002f14:	40012300 	.word	0x40012300
 8002f18:	080033c9 	.word	0x080033c9
 8002f1c:	08003483 	.word	0x08003483
 8002f20:	0800349f 	.word	0x0800349f
 8002f24:	40012000 	.word	0x40012000
 8002f28:	40012100 	.word	0x40012100
 8002f2c:	40012200 	.word	0x40012200

08002f30 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d101      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x1c>
 8002f84:	2302      	movs	r3, #2
 8002f86:	e113      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x244>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b09      	cmp	r3, #9
 8002f96:	d925      	bls.n	8002fe4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68d9      	ldr	r1, [r3, #12]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	4413      	add	r3, r2
 8002fac:	3b1e      	subs	r3, #30
 8002fae:	2207      	movs	r2, #7
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	43da      	mvns	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	400a      	ands	r2, r1
 8002fbc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68d9      	ldr	r1, [r3, #12]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	4618      	mov	r0, r3
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	4403      	add	r3, r0
 8002fd6:	3b1e      	subs	r3, #30
 8002fd8:	409a      	lsls	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	60da      	str	r2, [r3, #12]
 8002fe2:	e022      	b.n	800302a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6919      	ldr	r1, [r3, #16]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	4413      	add	r3, r2
 8002ff8:	2207      	movs	r2, #7
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	43da      	mvns	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	400a      	ands	r2, r1
 8003006:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6919      	ldr	r1, [r3, #16]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	689a      	ldr	r2, [r3, #8]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	b29b      	uxth	r3, r3
 8003018:	4618      	mov	r0, r3
 800301a:	4603      	mov	r3, r0
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	4403      	add	r3, r0
 8003020:	409a      	lsls	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b06      	cmp	r3, #6
 8003030:	d824      	bhi.n	800307c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	3b05      	subs	r3, #5
 8003044:	221f      	movs	r2, #31
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	43da      	mvns	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	400a      	ands	r2, r1
 8003052:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	b29b      	uxth	r3, r3
 8003060:	4618      	mov	r0, r3
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	3b05      	subs	r3, #5
 800306e:	fa00 f203 	lsl.w	r2, r0, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	635a      	str	r2, [r3, #52]	; 0x34
 800307a:	e04c      	b.n	8003116 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2b0c      	cmp	r3, #12
 8003082:	d824      	bhi.n	80030ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	4613      	mov	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	3b23      	subs	r3, #35	; 0x23
 8003096:	221f      	movs	r2, #31
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	43da      	mvns	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	400a      	ands	r2, r1
 80030a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	4618      	mov	r0, r3
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	3b23      	subs	r3, #35	; 0x23
 80030c0:	fa00 f203 	lsl.w	r2, r0, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	631a      	str	r2, [r3, #48]	; 0x30
 80030cc:	e023      	b.n	8003116 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	3b41      	subs	r3, #65	; 0x41
 80030e0:	221f      	movs	r2, #31
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	43da      	mvns	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	400a      	ands	r2, r1
 80030ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	4618      	mov	r0, r3
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	3b41      	subs	r3, #65	; 0x41
 800310a:	fa00 f203 	lsl.w	r2, r0, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003116:	4b29      	ldr	r3, [pc, #164]	; (80031bc <HAL_ADC_ConfigChannel+0x250>)
 8003118:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a28      	ldr	r2, [pc, #160]	; (80031c0 <HAL_ADC_ConfigChannel+0x254>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d10f      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x1d8>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2b12      	cmp	r3, #18
 800312a:	d10b      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a1d      	ldr	r2, [pc, #116]	; (80031c0 <HAL_ADC_ConfigChannel+0x254>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d12b      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x23a>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a1c      	ldr	r2, [pc, #112]	; (80031c4 <HAL_ADC_ConfigChannel+0x258>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d003      	beq.n	8003160 <HAL_ADC_ConfigChannel+0x1f4>
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b11      	cmp	r3, #17
 800315e:	d122      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a11      	ldr	r2, [pc, #68]	; (80031c4 <HAL_ADC_ConfigChannel+0x258>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d111      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003182:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <HAL_ADC_ConfigChannel+0x25c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a11      	ldr	r2, [pc, #68]	; (80031cc <HAL_ADC_ConfigChannel+0x260>)
 8003188:	fba2 2303 	umull	r2, r3, r2, r3
 800318c:	0c9a      	lsrs	r2, r3, #18
 800318e:	4613      	mov	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003198:	e002      	b.n	80031a0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	3b01      	subs	r3, #1
 800319e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f9      	bne.n	800319a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	40012300 	.word	0x40012300
 80031c0:	40012000 	.word	0x40012000
 80031c4:	10000012 	.word	0x10000012
 80031c8:	20000050 	.word	0x20000050
 80031cc:	431bde83 	.word	0x431bde83

080031d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031d8:	4b79      	ldr	r3, [pc, #484]	; (80033c0 <ADC_Init+0x1f0>)
 80031da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	431a      	orrs	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003204:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6859      	ldr	r1, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	021a      	lsls	r2, r3, #8
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003228:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6859      	ldr	r1, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	430a      	orrs	r2, r1
 800323a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800324a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6899      	ldr	r1, [r3, #8]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003262:	4a58      	ldr	r2, [pc, #352]	; (80033c4 <ADC_Init+0x1f4>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d022      	beq.n	80032ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003276:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6899      	ldr	r1, [r3, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003298:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6899      	ldr	r1, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	609a      	str	r2, [r3, #8]
 80032ac:	e00f      	b.n	80032ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0202 	bic.w	r2, r2, #2
 80032dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6899      	ldr	r1, [r3, #8]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	7e1b      	ldrb	r3, [r3, #24]
 80032e8:	005a      	lsls	r2, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d01b      	beq.n	8003334 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800330a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800331a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6859      	ldr	r1, [r3, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	3b01      	subs	r3, #1
 8003328:	035a      	lsls	r2, r3, #13
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	e007      	b.n	8003344 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003342:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003352:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	3b01      	subs	r3, #1
 8003360:	051a      	lsls	r2, r3, #20
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003378:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6899      	ldr	r1, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003386:	025a      	lsls	r2, r3, #9
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689a      	ldr	r2, [r3, #8]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800339e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6899      	ldr	r1, [r3, #8]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	029a      	lsls	r2, r3, #10
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	609a      	str	r2, [r3, #8]
}
 80033b4:	bf00      	nop
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	40012300 	.word	0x40012300
 80033c4:	0f000001 	.word	0x0f000001

080033c8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d13c      	bne.n	800345c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d12b      	bne.n	8003454 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003400:	2b00      	cmp	r3, #0
 8003402:	d127      	bne.n	8003454 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800340e:	2b00      	cmp	r3, #0
 8003410:	d006      	beq.n	8003420 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800341c:	2b00      	cmp	r3, #0
 800341e:	d119      	bne.n	8003454 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0220 	bic.w	r2, r2, #32
 800342e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d105      	bne.n	8003454 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	f043 0201 	orr.w	r2, r3, #1
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f7fe fd93 	bl	8001f80 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800345a:	e00e      	b.n	800347a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	f003 0310 	and.w	r3, r3, #16
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f7ff fd75 	bl	8002f58 <HAL_ADC_ErrorCallback>
}
 800346e:	e004      	b.n	800347a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	4798      	blx	r3
}
 800347a:	bf00      	nop
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b084      	sub	sp, #16
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f7ff fd4d 	bl	8002f30 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003496:	bf00      	nop
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b084      	sub	sp, #16
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034aa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2240      	movs	r2, #64	; 0x40
 80034b0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	f043 0204 	orr.w	r2, r3, #4
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f7ff fd4a 	bl	8002f58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034c4:	bf00      	nop
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e0ed      	b.n	80036ce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d102      	bne.n	8003504 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7fd fe4a 	bl	8001198 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0201 	orr.w	r2, r2, #1
 8003512:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003514:	f7ff fa48 	bl	80029a8 <HAL_GetTick>
 8003518:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800351a:	e012      	b.n	8003542 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800351c:	f7ff fa44 	bl	80029a8 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b0a      	cmp	r3, #10
 8003528:	d90b      	bls.n	8003542 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2205      	movs	r2, #5
 800353a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e0c5      	b.n	80036ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0e5      	beq.n	800351c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0202 	bic.w	r2, r2, #2
 800355e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003560:	f7ff fa22 	bl	80029a8 <HAL_GetTick>
 8003564:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003566:	e012      	b.n	800358e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003568:	f7ff fa1e 	bl	80029a8 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b0a      	cmp	r3, #10
 8003574:	d90b      	bls.n	800358e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2205      	movs	r2, #5
 8003586:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e09f      	b.n	80036ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1e5      	bne.n	8003568 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	7e1b      	ldrb	r3, [r3, #24]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d108      	bne.n	80035b6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	e007      	b.n	80035c6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	7e5b      	ldrb	r3, [r3, #25]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d108      	bne.n	80035e0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	e007      	b.n	80035f0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	7e9b      	ldrb	r3, [r3, #26]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d108      	bne.n	800360a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f042 0220 	orr.w	r2, r2, #32
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	e007      	b.n	800361a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0220 	bic.w	r2, r2, #32
 8003618:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	7edb      	ldrb	r3, [r3, #27]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d108      	bne.n	8003634 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0210 	bic.w	r2, r2, #16
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	e007      	b.n	8003644 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0210 	orr.w	r2, r2, #16
 8003642:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	7f1b      	ldrb	r3, [r3, #28]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d108      	bne.n	800365e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0208 	orr.w	r2, r2, #8
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	e007      	b.n	800366e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0208 	bic.w	r2, r2, #8
 800366c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	7f5b      	ldrb	r3, [r3, #29]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d108      	bne.n	8003688 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 0204 	orr.w	r2, r2, #4
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	e007      	b.n	8003698 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0204 	bic.w	r2, r2, #4
 8003696:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	431a      	orrs	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	ea42 0103 	orr.w	r1, r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	1e5a      	subs	r2, r3, #1
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
	...

080036d8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80036d8:	b480      	push	{r7}
 80036da:	b087      	sub	sp, #28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036ee:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80036f0:	7cfb      	ldrb	r3, [r7, #19]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d003      	beq.n	80036fe <HAL_CAN_ConfigFilter+0x26>
 80036f6:	7cfb      	ldrb	r3, [r7, #19]
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	f040 80be 	bne.w	800387a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80036fe:	4b65      	ldr	r3, [pc, #404]	; (8003894 <HAL_CAN_ConfigFilter+0x1bc>)
 8003700:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003708:	f043 0201 	orr.w	r2, r3, #1
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003718:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	021b      	lsls	r3, r3, #8
 800372e:	431a      	orrs	r2, r3
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	f003 031f 	and.w	r3, r3, #31
 800373e:	2201      	movs	r2, #1
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	43db      	mvns	r3, r3
 8003750:	401a      	ands	r2, r3
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d123      	bne.n	80037a8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	43db      	mvns	r3, r3
 800376a:	401a      	ands	r2, r3
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003782:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	3248      	adds	r2, #72	; 0x48
 8003788:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800379c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800379e:	6979      	ldr	r1, [r7, #20]
 80037a0:	3348      	adds	r3, #72	; 0x48
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	440b      	add	r3, r1
 80037a6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d122      	bne.n	80037f6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	431a      	orrs	r2, r3
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80037d0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	3248      	adds	r2, #72	; 0x48
 80037d6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037ea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037ec:	6979      	ldr	r1, [r7, #20]
 80037ee:	3348      	adds	r3, #72	; 0x48
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	440b      	add	r3, r1
 80037f4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d109      	bne.n	8003812 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	43db      	mvns	r3, r3
 8003808:	401a      	ands	r2, r3
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003810:	e007      	b.n	8003822 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	431a      	orrs	r2, r3
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d109      	bne.n	800383e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	43db      	mvns	r3, r3
 8003834:	401a      	ands	r2, r3
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800383c:	e007      	b.n	800384e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	431a      	orrs	r2, r3
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d107      	bne.n	8003866 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	431a      	orrs	r2, r3
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800386c:	f023 0201 	bic.w	r2, r3, #1
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003876:	2300      	movs	r3, #0
 8003878:	e006      	b.n	8003888 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
  }
}
 8003888:	4618      	mov	r0, r3
 800388a:	371c      	adds	r7, #28
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	40006400 	.word	0x40006400

08003898 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d12e      	bne.n	800390a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2202      	movs	r2, #2
 80038b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0201 	bic.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80038c4:	f7ff f870 	bl	80029a8 <HAL_GetTick>
 80038c8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80038ca:	e012      	b.n	80038f2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80038cc:	f7ff f86c 	bl	80029a8 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b0a      	cmp	r3, #10
 80038d8:	d90b      	bls.n	80038f2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2205      	movs	r2, #5
 80038ea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e012      	b.n	8003918 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1e5      	bne.n	80038cc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	e006      	b.n	8003918 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
  }
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003920:	b480      	push	{r7}
 8003922:	b089      	sub	sp, #36	; 0x24
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003934:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800393e:	7ffb      	ldrb	r3, [r7, #31]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d003      	beq.n	800394c <HAL_CAN_AddTxMessage+0x2c>
 8003944:	7ffb      	ldrb	r3, [r7, #31]
 8003946:	2b02      	cmp	r3, #2
 8003948:	f040 80b8 	bne.w	8003abc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10a      	bne.n	800396c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800395c:	2b00      	cmp	r3, #0
 800395e:	d105      	bne.n	800396c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 80a0 	beq.w	8003aac <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	0e1b      	lsrs	r3, r3, #24
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2b02      	cmp	r3, #2
 800397a:	d907      	bls.n	800398c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e09e      	b.n	8003aca <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800398c:	2201      	movs	r2, #1
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	409a      	lsls	r2, r3
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10d      	bne.n	80039ba <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80039a8:	68f9      	ldr	r1, [r7, #12]
 80039aa:	6809      	ldr	r1, [r1, #0]
 80039ac:	431a      	orrs	r2, r3
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	3318      	adds	r3, #24
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	440b      	add	r3, r1
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	e00f      	b.n	80039da <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80039c4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80039ca:	68f9      	ldr	r1, [r7, #12]
 80039cc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80039ce:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	3318      	adds	r3, #24
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	440b      	add	r3, r1
 80039d8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6819      	ldr	r1, [r3, #0]
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	691a      	ldr	r2, [r3, #16]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	3318      	adds	r3, #24
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	440b      	add	r3, r1
 80039ea:	3304      	adds	r3, #4
 80039ec:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	7d1b      	ldrb	r3, [r3, #20]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d111      	bne.n	8003a1a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	3318      	adds	r3, #24
 80039fe:	011b      	lsls	r3, r3, #4
 8003a00:	4413      	add	r3, r2
 8003a02:	3304      	adds	r3, #4
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	6811      	ldr	r1, [r2, #0]
 8003a0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	3318      	adds	r3, #24
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	440b      	add	r3, r1
 8003a16:	3304      	adds	r3, #4
 8003a18:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	3307      	adds	r3, #7
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	061a      	lsls	r2, r3, #24
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3306      	adds	r3, #6
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	041b      	lsls	r3, r3, #16
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3305      	adds	r3, #5
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	021b      	lsls	r3, r3, #8
 8003a34:	4313      	orrs	r3, r2
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	3204      	adds	r2, #4
 8003a3a:	7812      	ldrb	r2, [r2, #0]
 8003a3c:	4610      	mov	r0, r2
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	6811      	ldr	r1, [r2, #0]
 8003a42:	ea43 0200 	orr.w	r2, r3, r0
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	440b      	add	r3, r1
 8003a4c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003a50:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3303      	adds	r3, #3
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	061a      	lsls	r2, r3, #24
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	3302      	adds	r3, #2
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	041b      	lsls	r3, r3, #16
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3301      	adds	r3, #1
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	021b      	lsls	r3, r3, #8
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	7812      	ldrb	r2, [r2, #0]
 8003a72:	4610      	mov	r0, r2
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	6811      	ldr	r1, [r2, #0]
 8003a78:	ea43 0200 	orr.w	r2, r3, r0
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	440b      	add	r3, r1
 8003a82:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003a86:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	3318      	adds	r3, #24
 8003a90:	011b      	lsls	r3, r3, #4
 8003a92:	4413      	add	r3, r2
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	6811      	ldr	r1, [r2, #0]
 8003a9a:	f043 0201 	orr.w	r2, r3, #1
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	3318      	adds	r3, #24
 8003aa2:	011b      	lsls	r3, r3, #4
 8003aa4:	440b      	add	r3, r1
 8003aa6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	e00e      	b.n	8003aca <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e006      	b.n	8003aca <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
  }
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3724      	adds	r7, #36	; 0x24
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b085      	sub	sp, #20
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
 8003ade:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003aea:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8003aec:	7afb      	ldrb	r3, [r7, #11]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d002      	beq.n	8003af8 <HAL_CAN_IsTxMessagePending+0x22>
 8003af2:	7afb      	ldrb	r3, [r7, #11]
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d10b      	bne.n	8003b10 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689a      	ldr	r2, [r3, #8]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	069b      	lsls	r3, r3, #26
 8003b02:	401a      	ands	r2, r3
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	069b      	lsls	r3, r3, #26
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d001      	beq.n	8003b10 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8003b10:	68fb      	ldr	r3, [r7, #12]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b087      	sub	sp, #28
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	60f8      	str	r0, [r7, #12]
 8003b26:	60b9      	str	r1, [r7, #8]
 8003b28:	607a      	str	r2, [r7, #4]
 8003b2a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b32:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b34:	7dfb      	ldrb	r3, [r7, #23]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d003      	beq.n	8003b42 <HAL_CAN_GetRxMessage+0x24>
 8003b3a:	7dfb      	ldrb	r3, [r7, #23]
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	f040 80f3 	bne.w	8003d28 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10e      	bne.n	8003b66 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d116      	bne.n	8003b84 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e0e7      	b.n	8003d36 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	f003 0303 	and.w	r3, r3, #3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d107      	bne.n	8003b84 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e0d8      	b.n	8003d36 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	331b      	adds	r3, #27
 8003b8c:	011b      	lsls	r3, r3, #4
 8003b8e:	4413      	add	r3, r2
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0204 	and.w	r2, r3, #4
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10c      	bne.n	8003bbc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	331b      	adds	r3, #27
 8003baa:	011b      	lsls	r3, r3, #4
 8003bac:	4413      	add	r3, r2
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	0d5b      	lsrs	r3, r3, #21
 8003bb2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	e00b      	b.n	8003bd4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	331b      	adds	r3, #27
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	4413      	add	r3, r2
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	08db      	lsrs	r3, r3, #3
 8003bcc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	331b      	adds	r3, #27
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	4413      	add	r3, r2
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0202 	and.w	r2, r3, #2
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	331b      	adds	r3, #27
 8003bf2:	011b      	lsls	r3, r3, #4
 8003bf4:	4413      	add	r3, r2
 8003bf6:	3304      	adds	r3, #4
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 020f 	and.w	r2, r3, #15
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	331b      	adds	r3, #27
 8003c0a:	011b      	lsls	r3, r3, #4
 8003c0c:	4413      	add	r3, r2
 8003c0e:	3304      	adds	r3, #4
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	0a1b      	lsrs	r3, r3, #8
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	331b      	adds	r3, #27
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	4413      	add	r3, r2
 8003c26:	3304      	adds	r3, #4
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	0c1b      	lsrs	r3, r3, #16
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	4413      	add	r3, r2
 8003c52:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	0a1a      	lsrs	r2, r3, #8
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	0c1a      	lsrs	r2, r3, #16
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	3302      	adds	r3, #2
 8003c78:	b2d2      	uxtb	r2, r2
 8003c7a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	4413      	add	r3, r2
 8003c86:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	0e1a      	lsrs	r2, r3, #24
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	3303      	adds	r3, #3
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	011b      	lsls	r3, r3, #4
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	b2d2      	uxtb	r2, r2
 8003cac:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	011b      	lsls	r3, r3, #4
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	0a1a      	lsrs	r2, r3, #8
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	3305      	adds	r3, #5
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	011b      	lsls	r3, r3, #4
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	0c1a      	lsrs	r2, r3, #16
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	3306      	adds	r3, #6
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	011b      	lsls	r3, r3, #4
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	0e1a      	lsrs	r2, r3, #24
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	3307      	adds	r3, #7
 8003cf8:	b2d2      	uxtb	r2, r2
 8003cfa:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d108      	bne.n	8003d14 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f042 0220 	orr.w	r2, r2, #32
 8003d10:	60da      	str	r2, [r3, #12]
 8003d12:	e007      	b.n	8003d24 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	691a      	ldr	r2, [r3, #16]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0220 	orr.w	r2, r2, #32
 8003d22:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003d24:	2300      	movs	r3, #0
 8003d26:	e006      	b.n	8003d36 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
  }
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	371c      	adds	r7, #28
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b085      	sub	sp, #20
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
 8003d4a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d52:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d002      	beq.n	8003d60 <HAL_CAN_ActivateNotification+0x1e>
 8003d5a:	7bfb      	ldrb	r3, [r7, #15]
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d109      	bne.n	8003d74 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6959      	ldr	r1, [r3, #20]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003d70:	2300      	movs	r3, #0
 8003d72:	e006      	b.n	8003d82 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
  }
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b08a      	sub	sp, #40	; 0x28
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003d96:	2300      	movs	r3, #0
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003dca:	6a3b      	ldr	r3, [r7, #32]
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d07c      	beq.n	8003ece <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d023      	beq.n	8003e26 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2201      	movs	r2, #1
 8003de4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 f983 	bl	80040fc <HAL_CAN_TxMailbox0CompleteCallback>
 8003df6:	e016      	b.n	8003e26 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	f003 0304 	and.w	r3, r3, #4
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d004      	beq.n	8003e0c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24
 8003e0a:	e00c      	b.n	8003e26 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	f003 0308 	and.w	r3, r3, #8
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d004      	beq.n	8003e20 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e1e:	e002      	b.n	8003e26 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f989 	bl	8004138 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d024      	beq.n	8003e7a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e38:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f963 	bl	8004110 <HAL_CAN_TxMailbox1CompleteCallback>
 8003e4a:	e016      	b.n	8003e7a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d004      	beq.n	8003e60 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e5e:	e00c      	b.n	8003e7a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d004      	beq.n	8003e74 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e70:	627b      	str	r3, [r7, #36]	; 0x24
 8003e72:	e002      	b.n	8003e7a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f969 	bl	800414c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d024      	beq.n	8003ece <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003e8c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d003      	beq.n	8003ea0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 f943 	bl	8004124 <HAL_CAN_TxMailbox2CompleteCallback>
 8003e9e:	e016      	b.n	8003ece <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d004      	beq.n	8003eb4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb2:	e00c      	b.n	8003ece <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d004      	beq.n	8003ec8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec6:	e002      	b.n	8003ece <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 f949 	bl	8004160 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	f003 0308 	and.w	r3, r3, #8
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00c      	beq.n	8003ef2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f003 0310 	and.w	r3, r3, #16
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d007      	beq.n	8003ef2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2210      	movs	r2, #16
 8003ef0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00b      	beq.n	8003f14 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f003 0308 	and.w	r3, r3, #8
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d006      	beq.n	8003f14 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2208      	movs	r2, #8
 8003f0c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f930 	bl	8004174 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d009      	beq.n	8003f32 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f003 0303 	and.w	r3, r3, #3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d002      	beq.n	8003f32 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7fd fad5 	bl	80014dc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003f32:	6a3b      	ldr	r3, [r7, #32]
 8003f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00c      	beq.n	8003f56 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	f003 0310 	and.w	r3, r3, #16
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d007      	beq.n	8003f56 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f4c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2210      	movs	r2, #16
 8003f54:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	f003 0320 	and.w	r3, r3, #32
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00b      	beq.n	8003f78 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d006      	beq.n	8003f78 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2208      	movs	r2, #8
 8003f70:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f912 	bl	800419c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003f78:	6a3b      	ldr	r3, [r7, #32]
 8003f7a:	f003 0310 	and.w	r3, r3, #16
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d009      	beq.n	8003f96 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	f003 0303 	and.w	r3, r3, #3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d002      	beq.n	8003f96 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f8f9 	bl	8004188 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00b      	beq.n	8003fb8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	f003 0310 	and.w	r3, r3, #16
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d006      	beq.n	8003fb8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2210      	movs	r2, #16
 8003fb0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f8fc 	bl	80041b0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00b      	beq.n	8003fda <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	f003 0308 	and.w	r3, r3, #8
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d006      	beq.n	8003fda <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2208      	movs	r2, #8
 8003fd2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f8f5 	bl	80041c4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d07b      	beq.n	80040dc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	f003 0304 	and.w	r3, r3, #4
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d072      	beq.n	80040d4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003fee:	6a3b      	ldr	r3, [r7, #32]
 8003ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d008      	beq.n	800400a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	f043 0301 	orr.w	r3, r3, #1
 8004008:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800400a:	6a3b      	ldr	r3, [r7, #32]
 800400c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004010:	2b00      	cmp	r3, #0
 8004012:	d008      	beq.n	8004026 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	f043 0302 	orr.w	r3, r3, #2
 8004024:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800402c:	2b00      	cmp	r3, #0
 800402e:	d008      	beq.n	8004042 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800403a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403c:	f043 0304 	orr.w	r3, r3, #4
 8004040:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004048:	2b00      	cmp	r3, #0
 800404a:	d043      	beq.n	80040d4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004052:	2b00      	cmp	r3, #0
 8004054:	d03e      	beq.n	80040d4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800405c:	2b60      	cmp	r3, #96	; 0x60
 800405e:	d02b      	beq.n	80040b8 <HAL_CAN_IRQHandler+0x32a>
 8004060:	2b60      	cmp	r3, #96	; 0x60
 8004062:	d82e      	bhi.n	80040c2 <HAL_CAN_IRQHandler+0x334>
 8004064:	2b50      	cmp	r3, #80	; 0x50
 8004066:	d022      	beq.n	80040ae <HAL_CAN_IRQHandler+0x320>
 8004068:	2b50      	cmp	r3, #80	; 0x50
 800406a:	d82a      	bhi.n	80040c2 <HAL_CAN_IRQHandler+0x334>
 800406c:	2b40      	cmp	r3, #64	; 0x40
 800406e:	d019      	beq.n	80040a4 <HAL_CAN_IRQHandler+0x316>
 8004070:	2b40      	cmp	r3, #64	; 0x40
 8004072:	d826      	bhi.n	80040c2 <HAL_CAN_IRQHandler+0x334>
 8004074:	2b30      	cmp	r3, #48	; 0x30
 8004076:	d010      	beq.n	800409a <HAL_CAN_IRQHandler+0x30c>
 8004078:	2b30      	cmp	r3, #48	; 0x30
 800407a:	d822      	bhi.n	80040c2 <HAL_CAN_IRQHandler+0x334>
 800407c:	2b10      	cmp	r3, #16
 800407e:	d002      	beq.n	8004086 <HAL_CAN_IRQHandler+0x2f8>
 8004080:	2b20      	cmp	r3, #32
 8004082:	d005      	beq.n	8004090 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004084:	e01d      	b.n	80040c2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	f043 0308 	orr.w	r3, r3, #8
 800408c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800408e:	e019      	b.n	80040c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004092:	f043 0310 	orr.w	r3, r3, #16
 8004096:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004098:	e014      	b.n	80040c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	f043 0320 	orr.w	r3, r3, #32
 80040a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040a2:	e00f      	b.n	80040c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040ac:	e00a      	b.n	80040c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040b6:	e005      	b.n	80040c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80040b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040c0:	e000      	b.n	80040c4 <HAL_CAN_IRQHandler+0x336>
            break;
 80040c2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699a      	ldr	r2, [r3, #24]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80040d2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2204      	movs	r2, #4
 80040da:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d008      	beq.n	80040f4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	431a      	orrs	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f872 	bl	80041d8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80040f4:	bf00      	nop
 80040f6:	3728      	adds	r7, #40	; 0x28
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041fc:	4b0c      	ldr	r3, [pc, #48]	; (8004230 <__NVIC_SetPriorityGrouping+0x44>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004208:	4013      	ands	r3, r2
 800420a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004214:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800421c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800421e:	4a04      	ldr	r2, [pc, #16]	; (8004230 <__NVIC_SetPriorityGrouping+0x44>)
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	60d3      	str	r3, [r2, #12]
}
 8004224:	bf00      	nop
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	e000ed00 	.word	0xe000ed00

08004234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004238:	4b04      	ldr	r3, [pc, #16]	; (800424c <__NVIC_GetPriorityGrouping+0x18>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	0a1b      	lsrs	r3, r3, #8
 800423e:	f003 0307 	and.w	r3, r3, #7
}
 8004242:	4618      	mov	r0, r3
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	e000ed00 	.word	0xe000ed00

08004250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	4603      	mov	r3, r0
 8004258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800425a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425e:	2b00      	cmp	r3, #0
 8004260:	db0b      	blt.n	800427a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004262:	79fb      	ldrb	r3, [r7, #7]
 8004264:	f003 021f 	and.w	r2, r3, #31
 8004268:	4907      	ldr	r1, [pc, #28]	; (8004288 <__NVIC_EnableIRQ+0x38>)
 800426a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800426e:	095b      	lsrs	r3, r3, #5
 8004270:	2001      	movs	r0, #1
 8004272:	fa00 f202 	lsl.w	r2, r0, r2
 8004276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	e000e100 	.word	0xe000e100

0800428c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	4603      	mov	r3, r0
 8004294:	6039      	str	r1, [r7, #0]
 8004296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800429c:	2b00      	cmp	r3, #0
 800429e:	db0a      	blt.n	80042b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	490c      	ldr	r1, [pc, #48]	; (80042d8 <__NVIC_SetPriority+0x4c>)
 80042a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042aa:	0112      	lsls	r2, r2, #4
 80042ac:	b2d2      	uxtb	r2, r2
 80042ae:	440b      	add	r3, r1
 80042b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042b4:	e00a      	b.n	80042cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	4908      	ldr	r1, [pc, #32]	; (80042dc <__NVIC_SetPriority+0x50>)
 80042bc:	79fb      	ldrb	r3, [r7, #7]
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	3b04      	subs	r3, #4
 80042c4:	0112      	lsls	r2, r2, #4
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	440b      	add	r3, r1
 80042ca:	761a      	strb	r2, [r3, #24]
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	e000e100 	.word	0xe000e100
 80042dc:	e000ed00 	.word	0xe000ed00

080042e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b089      	sub	sp, #36	; 0x24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	f1c3 0307 	rsb	r3, r3, #7
 80042fa:	2b04      	cmp	r3, #4
 80042fc:	bf28      	it	cs
 80042fe:	2304      	movcs	r3, #4
 8004300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	3304      	adds	r3, #4
 8004306:	2b06      	cmp	r3, #6
 8004308:	d902      	bls.n	8004310 <NVIC_EncodePriority+0x30>
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	3b03      	subs	r3, #3
 800430e:	e000      	b.n	8004312 <NVIC_EncodePriority+0x32>
 8004310:	2300      	movs	r3, #0
 8004312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004314:	f04f 32ff 	mov.w	r2, #4294967295
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	fa02 f303 	lsl.w	r3, r2, r3
 800431e:	43da      	mvns	r2, r3
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	401a      	ands	r2, r3
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004328:	f04f 31ff 	mov.w	r1, #4294967295
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	fa01 f303 	lsl.w	r3, r1, r3
 8004332:	43d9      	mvns	r1, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004338:	4313      	orrs	r3, r2
         );
}
 800433a:	4618      	mov	r0, r3
 800433c:	3724      	adds	r7, #36	; 0x24
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
	...

08004348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3b01      	subs	r3, #1
 8004354:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004358:	d301      	bcc.n	800435e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800435a:	2301      	movs	r3, #1
 800435c:	e00f      	b.n	800437e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800435e:	4a0a      	ldr	r2, [pc, #40]	; (8004388 <SysTick_Config+0x40>)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3b01      	subs	r3, #1
 8004364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004366:	210f      	movs	r1, #15
 8004368:	f04f 30ff 	mov.w	r0, #4294967295
 800436c:	f7ff ff8e 	bl	800428c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004370:	4b05      	ldr	r3, [pc, #20]	; (8004388 <SysTick_Config+0x40>)
 8004372:	2200      	movs	r2, #0
 8004374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004376:	4b04      	ldr	r3, [pc, #16]	; (8004388 <SysTick_Config+0x40>)
 8004378:	2207      	movs	r2, #7
 800437a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	e000e010 	.word	0xe000e010

0800438c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7ff ff29 	bl	80041ec <__NVIC_SetPriorityGrouping>
}
 800439a:	bf00      	nop
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b086      	sub	sp, #24
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	4603      	mov	r3, r0
 80043aa:	60b9      	str	r1, [r7, #8]
 80043ac:	607a      	str	r2, [r7, #4]
 80043ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043b4:	f7ff ff3e 	bl	8004234 <__NVIC_GetPriorityGrouping>
 80043b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	68b9      	ldr	r1, [r7, #8]
 80043be:	6978      	ldr	r0, [r7, #20]
 80043c0:	f7ff ff8e 	bl	80042e0 <NVIC_EncodePriority>
 80043c4:	4602      	mov	r2, r0
 80043c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ca:	4611      	mov	r1, r2
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7ff ff5d 	bl	800428c <__NVIC_SetPriority>
}
 80043d2:	bf00      	nop
 80043d4:	3718      	adds	r7, #24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b082      	sub	sp, #8
 80043de:	af00      	add	r7, sp, #0
 80043e0:	4603      	mov	r3, r0
 80043e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff ff31 	bl	8004250 <__NVIC_EnableIRQ>
}
 80043ee:	bf00      	nop
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b082      	sub	sp, #8
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7ff ffa2 	bl	8004348 <SysTick_Config>
 8004404:	4603      	mov	r3, r0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
	...

08004410 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800441c:	f7fe fac4 	bl	80029a8 <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e099      	b.n	8004560 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0201 	bic.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800444c:	e00f      	b.n	800446e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800444e:	f7fe faab 	bl	80029a8 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b05      	cmp	r3, #5
 800445a:	d908      	bls.n	800446e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2220      	movs	r2, #32
 8004460:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2203      	movs	r2, #3
 8004466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e078      	b.n	8004560 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1e8      	bne.n	800444e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	4b38      	ldr	r3, [pc, #224]	; (8004568 <HAL_DMA_Init+0x158>)
 8004488:	4013      	ands	r3, r2
 800448a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800449a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	4313      	orrs	r3, r2
 80044be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	2b04      	cmp	r3, #4
 80044c6:	d107      	bne.n	80044d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d0:	4313      	orrs	r3, r2
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f023 0307 	bic.w	r3, r3, #7
 80044ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d117      	bne.n	8004532 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	4313      	orrs	r3, r2
 800450a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00e      	beq.n	8004532 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 fa6f 	bl	80049f8 <DMA_CheckFifoParam>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d008      	beq.n	8004532 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2240      	movs	r2, #64	; 0x40
 8004524:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800452e:	2301      	movs	r3, #1
 8004530:	e016      	b.n	8004560 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 fa26 	bl	800498c <DMA_CalcBaseAndBitshift>
 8004540:	4603      	mov	r3, r0
 8004542:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004548:	223f      	movs	r2, #63	; 0x3f
 800454a:	409a      	lsls	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	f010803f 	.word	0xf010803f

0800456c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
 8004578:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800457a:	2300      	movs	r3, #0
 800457c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004582:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800458a:	2b01      	cmp	r3, #1
 800458c:	d101      	bne.n	8004592 <HAL_DMA_Start_IT+0x26>
 800458e:	2302      	movs	r3, #2
 8004590:	e040      	b.n	8004614 <HAL_DMA_Start_IT+0xa8>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d12f      	bne.n	8004606 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2202      	movs	r2, #2
 80045aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	68b9      	ldr	r1, [r7, #8]
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 f9b8 	bl	8004930 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c4:	223f      	movs	r2, #63	; 0x3f
 80045c6:	409a      	lsls	r2, r3
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0216 	orr.w	r2, r2, #22
 80045da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d007      	beq.n	80045f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0208 	orr.w	r2, r2, #8
 80045f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0201 	orr.w	r2, r2, #1
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	e005      	b.n	8004612 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800460e:	2302      	movs	r3, #2
 8004610:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004612:	7dfb      	ldrb	r3, [r7, #23]
}
 8004614:	4618      	mov	r0, r3
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004628:	4b92      	ldr	r3, [pc, #584]	; (8004874 <HAL_DMA_IRQHandler+0x258>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a92      	ldr	r2, [pc, #584]	; (8004878 <HAL_DMA_IRQHandler+0x25c>)
 800462e:	fba2 2303 	umull	r2, r3, r2, r3
 8004632:	0a9b      	lsrs	r3, r3, #10
 8004634:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800463a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004646:	2208      	movs	r2, #8
 8004648:	409a      	lsls	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4013      	ands	r3, r2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d01a      	beq.n	8004688 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b00      	cmp	r3, #0
 800465e:	d013      	beq.n	8004688 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0204 	bic.w	r2, r2, #4
 800466e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004674:	2208      	movs	r2, #8
 8004676:	409a      	lsls	r2, r3
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004680:	f043 0201 	orr.w	r2, r3, #1
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468c:	2201      	movs	r2, #1
 800468e:	409a      	lsls	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4013      	ands	r3, r2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d012      	beq.n	80046be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00b      	beq.n	80046be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046aa:	2201      	movs	r2, #1
 80046ac:	409a      	lsls	r2, r3
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b6:	f043 0202 	orr.w	r2, r3, #2
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c2:	2204      	movs	r2, #4
 80046c4:	409a      	lsls	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4013      	ands	r3, r2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d012      	beq.n	80046f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00b      	beq.n	80046f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e0:	2204      	movs	r2, #4
 80046e2:	409a      	lsls	r2, r3
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ec:	f043 0204 	orr.w	r2, r3, #4
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f8:	2210      	movs	r2, #16
 80046fa:	409a      	lsls	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4013      	ands	r3, r2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d043      	beq.n	800478c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0308 	and.w	r3, r3, #8
 800470e:	2b00      	cmp	r3, #0
 8004710:	d03c      	beq.n	800478c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004716:	2210      	movs	r2, #16
 8004718:	409a      	lsls	r2, r3
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d018      	beq.n	800475e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d108      	bne.n	800474c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	2b00      	cmp	r3, #0
 8004740:	d024      	beq.n	800478c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	4798      	blx	r3
 800474a:	e01f      	b.n	800478c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004750:	2b00      	cmp	r3, #0
 8004752:	d01b      	beq.n	800478c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	4798      	blx	r3
 800475c:	e016      	b.n	800478c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004768:	2b00      	cmp	r3, #0
 800476a:	d107      	bne.n	800477c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0208 	bic.w	r2, r2, #8
 800477a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004790:	2220      	movs	r2, #32
 8004792:	409a      	lsls	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4013      	ands	r3, r2
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 808e 	beq.w	80048ba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0310 	and.w	r3, r3, #16
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 8086 	beq.w	80048ba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b2:	2220      	movs	r2, #32
 80047b4:	409a      	lsls	r2, r3
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b05      	cmp	r3, #5
 80047c4:	d136      	bne.n	8004834 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 0216 	bic.w	r2, r2, #22
 80047d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695a      	ldr	r2, [r3, #20]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d103      	bne.n	80047f6 <HAL_DMA_IRQHandler+0x1da>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d007      	beq.n	8004806 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0208 	bic.w	r2, r2, #8
 8004804:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800480a:	223f      	movs	r2, #63	; 0x3f
 800480c:	409a      	lsls	r2, r3
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004826:	2b00      	cmp	r3, #0
 8004828:	d07d      	beq.n	8004926 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	4798      	blx	r3
        }
        return;
 8004832:	e078      	b.n	8004926 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d01c      	beq.n	800487c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d108      	bne.n	8004862 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004854:	2b00      	cmp	r3, #0
 8004856:	d030      	beq.n	80048ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	4798      	blx	r3
 8004860:	e02b      	b.n	80048ba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004866:	2b00      	cmp	r3, #0
 8004868:	d027      	beq.n	80048ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	4798      	blx	r3
 8004872:	e022      	b.n	80048ba <HAL_DMA_IRQHandler+0x29e>
 8004874:	20000050 	.word	0x20000050
 8004878:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10f      	bne.n	80048aa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0210 	bic.w	r2, r2, #16
 8004898:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d032      	beq.n	8004928 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d022      	beq.n	8004914 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2205      	movs	r2, #5
 80048d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 0201 	bic.w	r2, r2, #1
 80048e4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	3301      	adds	r3, #1
 80048ea:	60bb      	str	r3, [r7, #8]
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d307      	bcc.n	8004902 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1f2      	bne.n	80048e6 <HAL_DMA_IRQHandler+0x2ca>
 8004900:	e000      	b.n	8004904 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004902:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004918:	2b00      	cmp	r3, #0
 800491a:	d005      	beq.n	8004928 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	4798      	blx	r3
 8004924:	e000      	b.n	8004928 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004926:	bf00      	nop
    }
  }
}
 8004928:	3718      	adds	r7, #24
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop

08004930 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800494c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	2b40      	cmp	r3, #64	; 0x40
 800495c:	d108      	bne.n	8004970 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800496e:	e007      	b.n	8004980 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	60da      	str	r2, [r3, #12]
}
 8004980:	bf00      	nop
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	b2db      	uxtb	r3, r3
 800499a:	3b10      	subs	r3, #16
 800499c:	4a14      	ldr	r2, [pc, #80]	; (80049f0 <DMA_CalcBaseAndBitshift+0x64>)
 800499e:	fba2 2303 	umull	r2, r3, r2, r3
 80049a2:	091b      	lsrs	r3, r3, #4
 80049a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80049a6:	4a13      	ldr	r2, [pc, #76]	; (80049f4 <DMA_CalcBaseAndBitshift+0x68>)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	4413      	add	r3, r2
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	461a      	mov	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2b03      	cmp	r3, #3
 80049b8:	d909      	bls.n	80049ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80049c2:	f023 0303 	bic.w	r3, r3, #3
 80049c6:	1d1a      	adds	r2, r3, #4
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	659a      	str	r2, [r3, #88]	; 0x58
 80049cc:	e007      	b.n	80049de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80049d6:	f023 0303 	bic.w	r3, r3, #3
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	aaaaaaab 	.word	0xaaaaaaab
 80049f4:	08007bd0 	.word	0x08007bd0

080049f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a00:	2300      	movs	r3, #0
 8004a02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d11f      	bne.n	8004a52 <DMA_CheckFifoParam+0x5a>
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	2b03      	cmp	r3, #3
 8004a16:	d856      	bhi.n	8004ac6 <DMA_CheckFifoParam+0xce>
 8004a18:	a201      	add	r2, pc, #4	; (adr r2, 8004a20 <DMA_CheckFifoParam+0x28>)
 8004a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1e:	bf00      	nop
 8004a20:	08004a31 	.word	0x08004a31
 8004a24:	08004a43 	.word	0x08004a43
 8004a28:	08004a31 	.word	0x08004a31
 8004a2c:	08004ac7 	.word	0x08004ac7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d046      	beq.n	8004aca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a40:	e043      	b.n	8004aca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a4a:	d140      	bne.n	8004ace <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a50:	e03d      	b.n	8004ace <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a5a:	d121      	bne.n	8004aa0 <DMA_CheckFifoParam+0xa8>
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	2b03      	cmp	r3, #3
 8004a60:	d837      	bhi.n	8004ad2 <DMA_CheckFifoParam+0xda>
 8004a62:	a201      	add	r2, pc, #4	; (adr r2, 8004a68 <DMA_CheckFifoParam+0x70>)
 8004a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a68:	08004a79 	.word	0x08004a79
 8004a6c:	08004a7f 	.word	0x08004a7f
 8004a70:	08004a79 	.word	0x08004a79
 8004a74:	08004a91 	.word	0x08004a91
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a7c:	e030      	b.n	8004ae0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d025      	beq.n	8004ad6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a8e:	e022      	b.n	8004ad6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a98:	d11f      	bne.n	8004ada <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004a9e:	e01c      	b.n	8004ada <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d903      	bls.n	8004aae <DMA_CheckFifoParam+0xb6>
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	2b03      	cmp	r3, #3
 8004aaa:	d003      	beq.n	8004ab4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004aac:	e018      	b.n	8004ae0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	73fb      	strb	r3, [r7, #15]
      break;
 8004ab2:	e015      	b.n	8004ae0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00e      	beq.n	8004ade <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ac4:	e00b      	b.n	8004ade <DMA_CheckFifoParam+0xe6>
      break;
 8004ac6:	bf00      	nop
 8004ac8:	e00a      	b.n	8004ae0 <DMA_CheckFifoParam+0xe8>
      break;
 8004aca:	bf00      	nop
 8004acc:	e008      	b.n	8004ae0 <DMA_CheckFifoParam+0xe8>
      break;
 8004ace:	bf00      	nop
 8004ad0:	e006      	b.n	8004ae0 <DMA_CheckFifoParam+0xe8>
      break;
 8004ad2:	bf00      	nop
 8004ad4:	e004      	b.n	8004ae0 <DMA_CheckFifoParam+0xe8>
      break;
 8004ad6:	bf00      	nop
 8004ad8:	e002      	b.n	8004ae0 <DMA_CheckFifoParam+0xe8>
      break;   
 8004ada:	bf00      	nop
 8004adc:	e000      	b.n	8004ae0 <DMA_CheckFifoParam+0xe8>
      break;
 8004ade:	bf00      	nop
    }
  } 
  
  return status; 
 8004ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop

08004af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b089      	sub	sp, #36	; 0x24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004afe:	2300      	movs	r3, #0
 8004b00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b06:	2300      	movs	r3, #0
 8004b08:	61fb      	str	r3, [r7, #28]
 8004b0a:	e165      	b.n	8004dd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	fa02 f303 	lsl.w	r3, r2, r3
 8004b14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	f040 8154 	bne.w	8004dd2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d005      	beq.n	8004b42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d130      	bne.n	8004ba4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	2203      	movs	r2, #3
 8004b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b52:	43db      	mvns	r3, r3
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	4013      	ands	r3, r2
 8004b58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	005b      	lsls	r3, r3, #1
 8004b62:	fa02 f303 	lsl.w	r3, r2, r3
 8004b66:	69ba      	ldr	r2, [r7, #24]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b78:	2201      	movs	r2, #1
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b80:	43db      	mvns	r3, r3
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	4013      	ands	r3, r2
 8004b86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	091b      	lsrs	r3, r3, #4
 8004b8e:	f003 0201 	and.w	r2, r3, #1
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	fa02 f303 	lsl.w	r3, r2, r3
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f003 0303 	and.w	r3, r3, #3
 8004bac:	2b03      	cmp	r3, #3
 8004bae:	d017      	beq.n	8004be0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	2203      	movs	r2, #3
 8004bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc0:	43db      	mvns	r3, r3
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f003 0303 	and.w	r3, r3, #3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d123      	bne.n	8004c34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	08da      	lsrs	r2, r3, #3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	3208      	adds	r2, #8
 8004bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	f003 0307 	and.w	r3, r3, #7
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	220f      	movs	r2, #15
 8004c04:	fa02 f303 	lsl.w	r3, r2, r3
 8004c08:	43db      	mvns	r3, r3
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	691a      	ldr	r2, [r3, #16]
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	f003 0307 	and.w	r3, r3, #7
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	08da      	lsrs	r2, r3, #3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	3208      	adds	r2, #8
 8004c2e:	69b9      	ldr	r1, [r7, #24]
 8004c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	2203      	movs	r2, #3
 8004c40:	fa02 f303 	lsl.w	r3, r2, r3
 8004c44:	43db      	mvns	r3, r3
 8004c46:	69ba      	ldr	r2, [r7, #24]
 8004c48:	4013      	ands	r3, r2
 8004c4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f003 0203 	and.w	r2, r3, #3
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	005b      	lsls	r3, r3, #1
 8004c58:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 80ae 	beq.w	8004dd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c76:	2300      	movs	r3, #0
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	4b5d      	ldr	r3, [pc, #372]	; (8004df0 <HAL_GPIO_Init+0x300>)
 8004c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7e:	4a5c      	ldr	r2, [pc, #368]	; (8004df0 <HAL_GPIO_Init+0x300>)
 8004c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c84:	6453      	str	r3, [r2, #68]	; 0x44
 8004c86:	4b5a      	ldr	r3, [pc, #360]	; (8004df0 <HAL_GPIO_Init+0x300>)
 8004c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c92:	4a58      	ldr	r2, [pc, #352]	; (8004df4 <HAL_GPIO_Init+0x304>)
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	089b      	lsrs	r3, r3, #2
 8004c98:	3302      	adds	r3, #2
 8004c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	220f      	movs	r2, #15
 8004caa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cae:	43db      	mvns	r3, r3
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a4f      	ldr	r2, [pc, #316]	; (8004df8 <HAL_GPIO_Init+0x308>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d025      	beq.n	8004d0a <HAL_GPIO_Init+0x21a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a4e      	ldr	r2, [pc, #312]	; (8004dfc <HAL_GPIO_Init+0x30c>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d01f      	beq.n	8004d06 <HAL_GPIO_Init+0x216>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a4d      	ldr	r2, [pc, #308]	; (8004e00 <HAL_GPIO_Init+0x310>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d019      	beq.n	8004d02 <HAL_GPIO_Init+0x212>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a4c      	ldr	r2, [pc, #304]	; (8004e04 <HAL_GPIO_Init+0x314>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d013      	beq.n	8004cfe <HAL_GPIO_Init+0x20e>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a4b      	ldr	r2, [pc, #300]	; (8004e08 <HAL_GPIO_Init+0x318>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d00d      	beq.n	8004cfa <HAL_GPIO_Init+0x20a>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a4a      	ldr	r2, [pc, #296]	; (8004e0c <HAL_GPIO_Init+0x31c>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d007      	beq.n	8004cf6 <HAL_GPIO_Init+0x206>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a49      	ldr	r2, [pc, #292]	; (8004e10 <HAL_GPIO_Init+0x320>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d101      	bne.n	8004cf2 <HAL_GPIO_Init+0x202>
 8004cee:	2306      	movs	r3, #6
 8004cf0:	e00c      	b.n	8004d0c <HAL_GPIO_Init+0x21c>
 8004cf2:	2307      	movs	r3, #7
 8004cf4:	e00a      	b.n	8004d0c <HAL_GPIO_Init+0x21c>
 8004cf6:	2305      	movs	r3, #5
 8004cf8:	e008      	b.n	8004d0c <HAL_GPIO_Init+0x21c>
 8004cfa:	2304      	movs	r3, #4
 8004cfc:	e006      	b.n	8004d0c <HAL_GPIO_Init+0x21c>
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e004      	b.n	8004d0c <HAL_GPIO_Init+0x21c>
 8004d02:	2302      	movs	r3, #2
 8004d04:	e002      	b.n	8004d0c <HAL_GPIO_Init+0x21c>
 8004d06:	2301      	movs	r3, #1
 8004d08:	e000      	b.n	8004d0c <HAL_GPIO_Init+0x21c>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	69fa      	ldr	r2, [r7, #28]
 8004d0e:	f002 0203 	and.w	r2, r2, #3
 8004d12:	0092      	lsls	r2, r2, #2
 8004d14:	4093      	lsls	r3, r2
 8004d16:	69ba      	ldr	r2, [r7, #24]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d1c:	4935      	ldr	r1, [pc, #212]	; (8004df4 <HAL_GPIO_Init+0x304>)
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	089b      	lsrs	r3, r3, #2
 8004d22:	3302      	adds	r3, #2
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d2a:	4b3a      	ldr	r3, [pc, #232]	; (8004e14 <HAL_GPIO_Init+0x324>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	43db      	mvns	r3, r3
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	4013      	ands	r3, r2
 8004d38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d4e:	4a31      	ldr	r2, [pc, #196]	; (8004e14 <HAL_GPIO_Init+0x324>)
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004d54:	4b2f      	ldr	r3, [pc, #188]	; (8004e14 <HAL_GPIO_Init+0x324>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	43db      	mvns	r3, r3
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	4013      	ands	r3, r2
 8004d62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d003      	beq.n	8004d78 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d78:	4a26      	ldr	r2, [pc, #152]	; (8004e14 <HAL_GPIO_Init+0x324>)
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d7e:	4b25      	ldr	r3, [pc, #148]	; (8004e14 <HAL_GPIO_Init+0x324>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	43db      	mvns	r3, r3
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004da2:	4a1c      	ldr	r2, [pc, #112]	; (8004e14 <HAL_GPIO_Init+0x324>)
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004da8:	4b1a      	ldr	r3, [pc, #104]	; (8004e14 <HAL_GPIO_Init+0x324>)
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	43db      	mvns	r3, r3
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	4013      	ands	r3, r2
 8004db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d003      	beq.n	8004dcc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004dcc:	4a11      	ldr	r2, [pc, #68]	; (8004e14 <HAL_GPIO_Init+0x324>)
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	61fb      	str	r3, [r7, #28]
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	2b0f      	cmp	r3, #15
 8004ddc:	f67f ae96 	bls.w	8004b0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004de0:	bf00      	nop
 8004de2:	bf00      	nop
 8004de4:	3724      	adds	r7, #36	; 0x24
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	40023800 	.word	0x40023800
 8004df4:	40013800 	.word	0x40013800
 8004df8:	40020000 	.word	0x40020000
 8004dfc:	40020400 	.word	0x40020400
 8004e00:	40020800 	.word	0x40020800
 8004e04:	40020c00 	.word	0x40020c00
 8004e08:	40021000 	.word	0x40021000
 8004e0c:	40021400 	.word	0x40021400
 8004e10:	40021800 	.word	0x40021800
 8004e14:	40013c00 	.word	0x40013c00

08004e18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	460b      	mov	r3, r1
 8004e22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691a      	ldr	r2, [r3, #16]
 8004e28:	887b      	ldrh	r3, [r7, #2]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d002      	beq.n	8004e36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004e30:	2301      	movs	r3, #1
 8004e32:	73fb      	strb	r3, [r7, #15]
 8004e34:	e001      	b.n	8004e3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e36:	2300      	movs	r3, #0
 8004e38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	460b      	mov	r3, r1
 8004e52:	807b      	strh	r3, [r7, #2]
 8004e54:	4613      	mov	r3, r2
 8004e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e58:	787b      	ldrb	r3, [r7, #1]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e5e:	887a      	ldrh	r2, [r7, #2]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e64:	e003      	b.n	8004e6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e66:	887b      	ldrh	r3, [r7, #2]
 8004e68:	041a      	lsls	r2, r3, #16
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	619a      	str	r2, [r3, #24]
}
 8004e6e:	bf00      	nop
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b085      	sub	sp, #20
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
 8004e82:	460b      	mov	r3, r1
 8004e84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e8c:	887a      	ldrh	r2, [r7, #2]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	4013      	ands	r3, r2
 8004e92:	041a      	lsls	r2, r3, #16
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	43d9      	mvns	r1, r3
 8004e98:	887b      	ldrh	r3, [r7, #2]
 8004e9a:	400b      	ands	r3, r1
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	619a      	str	r2, [r3, #24]
}
 8004ea2:	bf00      	nop
 8004ea4:	3714      	adds	r7, #20
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
	...

08004eb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e0cc      	b.n	800505e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ec4:	4b68      	ldr	r3, [pc, #416]	; (8005068 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 030f 	and.w	r3, r3, #15
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d90c      	bls.n	8004eec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ed2:	4b65      	ldr	r3, [pc, #404]	; (8005068 <HAL_RCC_ClockConfig+0x1b8>)
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	b2d2      	uxtb	r2, r2
 8004ed8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eda:	4b63      	ldr	r3, [pc, #396]	; (8005068 <HAL_RCC_ClockConfig+0x1b8>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 030f 	and.w	r3, r3, #15
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d001      	beq.n	8004eec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e0b8      	b.n	800505e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d020      	beq.n	8004f3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d005      	beq.n	8004f10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f04:	4b59      	ldr	r3, [pc, #356]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	4a58      	ldr	r2, [pc, #352]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0308 	and.w	r3, r3, #8
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d005      	beq.n	8004f28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f1c:	4b53      	ldr	r3, [pc, #332]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	4a52      	ldr	r2, [pc, #328]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f28:	4b50      	ldr	r3, [pc, #320]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	494d      	ldr	r1, [pc, #308]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d044      	beq.n	8004fd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d107      	bne.n	8004f5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f4e:	4b47      	ldr	r3, [pc, #284]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d119      	bne.n	8004f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e07f      	b.n	800505e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d003      	beq.n	8004f6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f6a:	2b03      	cmp	r3, #3
 8004f6c:	d107      	bne.n	8004f7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f6e:	4b3f      	ldr	r3, [pc, #252]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d109      	bne.n	8004f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e06f      	b.n	800505e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f7e:	4b3b      	ldr	r3, [pc, #236]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e067      	b.n	800505e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f8e:	4b37      	ldr	r3, [pc, #220]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f023 0203 	bic.w	r2, r3, #3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	4934      	ldr	r1, [pc, #208]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fa0:	f7fd fd02 	bl	80029a8 <HAL_GetTick>
 8004fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fa6:	e00a      	b.n	8004fbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fa8:	f7fd fcfe 	bl	80029a8 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e04f      	b.n	800505e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fbe:	4b2b      	ldr	r3, [pc, #172]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 020c 	and.w	r2, r3, #12
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d1eb      	bne.n	8004fa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fd0:	4b25      	ldr	r3, [pc, #148]	; (8005068 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 030f 	and.w	r3, r3, #15
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d20c      	bcs.n	8004ff8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fde:	4b22      	ldr	r3, [pc, #136]	; (8005068 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe6:	4b20      	ldr	r3, [pc, #128]	; (8005068 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 030f 	and.w	r3, r3, #15
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d001      	beq.n	8004ff8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e032      	b.n	800505e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0304 	and.w	r3, r3, #4
 8005000:	2b00      	cmp	r3, #0
 8005002:	d008      	beq.n	8005016 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005004:	4b19      	ldr	r3, [pc, #100]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	4916      	ldr	r1, [pc, #88]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8005012:	4313      	orrs	r3, r2
 8005014:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0308 	and.w	r3, r3, #8
 800501e:	2b00      	cmp	r3, #0
 8005020:	d009      	beq.n	8005036 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005022:	4b12      	ldr	r3, [pc, #72]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	490e      	ldr	r1, [pc, #56]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	4313      	orrs	r3, r2
 8005034:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005036:	f000 f855 	bl	80050e4 <HAL_RCC_GetSysClockFreq>
 800503a:	4602      	mov	r2, r0
 800503c:	4b0b      	ldr	r3, [pc, #44]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	091b      	lsrs	r3, r3, #4
 8005042:	f003 030f 	and.w	r3, r3, #15
 8005046:	490a      	ldr	r1, [pc, #40]	; (8005070 <HAL_RCC_ClockConfig+0x1c0>)
 8005048:	5ccb      	ldrb	r3, [r1, r3]
 800504a:	fa22 f303 	lsr.w	r3, r2, r3
 800504e:	4a09      	ldr	r2, [pc, #36]	; (8005074 <HAL_RCC_ClockConfig+0x1c4>)
 8005050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005052:	4b09      	ldr	r3, [pc, #36]	; (8005078 <HAL_RCC_ClockConfig+0x1c8>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4618      	mov	r0, r3
 8005058:	f7fd fc62 	bl	8002920 <HAL_InitTick>

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	40023c00 	.word	0x40023c00
 800506c:	40023800 	.word	0x40023800
 8005070:	08007bb8 	.word	0x08007bb8
 8005074:	20000050 	.word	0x20000050
 8005078:	20000054 	.word	0x20000054

0800507c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005080:	4b03      	ldr	r3, [pc, #12]	; (8005090 <HAL_RCC_GetHCLKFreq+0x14>)
 8005082:	681b      	ldr	r3, [r3, #0]
}
 8005084:	4618      	mov	r0, r3
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	20000050 	.word	0x20000050

08005094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005098:	f7ff fff0 	bl	800507c <HAL_RCC_GetHCLKFreq>
 800509c:	4602      	mov	r2, r0
 800509e:	4b05      	ldr	r3, [pc, #20]	; (80050b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	0a9b      	lsrs	r3, r3, #10
 80050a4:	f003 0307 	and.w	r3, r3, #7
 80050a8:	4903      	ldr	r1, [pc, #12]	; (80050b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050aa:	5ccb      	ldrb	r3, [r1, r3]
 80050ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	40023800 	.word	0x40023800
 80050b8:	08007bc8 	.word	0x08007bc8

080050bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050c0:	f7ff ffdc 	bl	800507c <HAL_RCC_GetHCLKFreq>
 80050c4:	4602      	mov	r2, r0
 80050c6:	4b05      	ldr	r3, [pc, #20]	; (80050dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	0b5b      	lsrs	r3, r3, #13
 80050cc:	f003 0307 	and.w	r3, r3, #7
 80050d0:	4903      	ldr	r1, [pc, #12]	; (80050e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050d2:	5ccb      	ldrb	r3, [r1, r3]
 80050d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050d8:	4618      	mov	r0, r3
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	40023800 	.word	0x40023800
 80050e0:	08007bc8 	.word	0x08007bc8

080050e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050e8:	b088      	sub	sp, #32
 80050ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80050f0:	2300      	movs	r3, #0
 80050f2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80050f4:	2300      	movs	r3, #0
 80050f6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80050fc:	2300      	movs	r3, #0
 80050fe:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005100:	4bce      	ldr	r3, [pc, #824]	; (800543c <HAL_RCC_GetSysClockFreq+0x358>)
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f003 030c 	and.w	r3, r3, #12
 8005108:	2b0c      	cmp	r3, #12
 800510a:	f200 818d 	bhi.w	8005428 <HAL_RCC_GetSysClockFreq+0x344>
 800510e:	a201      	add	r2, pc, #4	; (adr r2, 8005114 <HAL_RCC_GetSysClockFreq+0x30>)
 8005110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005114:	08005149 	.word	0x08005149
 8005118:	08005429 	.word	0x08005429
 800511c:	08005429 	.word	0x08005429
 8005120:	08005429 	.word	0x08005429
 8005124:	0800514f 	.word	0x0800514f
 8005128:	08005429 	.word	0x08005429
 800512c:	08005429 	.word	0x08005429
 8005130:	08005429 	.word	0x08005429
 8005134:	08005155 	.word	0x08005155
 8005138:	08005429 	.word	0x08005429
 800513c:	08005429 	.word	0x08005429
 8005140:	08005429 	.word	0x08005429
 8005144:	080052c9 	.word	0x080052c9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005148:	4bbd      	ldr	r3, [pc, #756]	; (8005440 <HAL_RCC_GetSysClockFreq+0x35c>)
 800514a:	61bb      	str	r3, [r7, #24]
       break;
 800514c:	e16f      	b.n	800542e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800514e:	4bbd      	ldr	r3, [pc, #756]	; (8005444 <HAL_RCC_GetSysClockFreq+0x360>)
 8005150:	61bb      	str	r3, [r7, #24]
      break;
 8005152:	e16c      	b.n	800542e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005154:	4bb9      	ldr	r3, [pc, #740]	; (800543c <HAL_RCC_GetSysClockFreq+0x358>)
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800515c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800515e:	4bb7      	ldr	r3, [pc, #732]	; (800543c <HAL_RCC_GetSysClockFreq+0x358>)
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d053      	beq.n	8005212 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800516a:	4bb4      	ldr	r3, [pc, #720]	; (800543c <HAL_RCC_GetSysClockFreq+0x358>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	099b      	lsrs	r3, r3, #6
 8005170:	461a      	mov	r2, r3
 8005172:	f04f 0300 	mov.w	r3, #0
 8005176:	f240 10ff 	movw	r0, #511	; 0x1ff
 800517a:	f04f 0100 	mov.w	r1, #0
 800517e:	ea02 0400 	and.w	r4, r2, r0
 8005182:	603c      	str	r4, [r7, #0]
 8005184:	400b      	ands	r3, r1
 8005186:	607b      	str	r3, [r7, #4]
 8005188:	e9d7 4500 	ldrd	r4, r5, [r7]
 800518c:	4620      	mov	r0, r4
 800518e:	4629      	mov	r1, r5
 8005190:	f04f 0200 	mov.w	r2, #0
 8005194:	f04f 0300 	mov.w	r3, #0
 8005198:	014b      	lsls	r3, r1, #5
 800519a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800519e:	0142      	lsls	r2, r0, #5
 80051a0:	4610      	mov	r0, r2
 80051a2:	4619      	mov	r1, r3
 80051a4:	4623      	mov	r3, r4
 80051a6:	1ac0      	subs	r0, r0, r3
 80051a8:	462b      	mov	r3, r5
 80051aa:	eb61 0103 	sbc.w	r1, r1, r3
 80051ae:	f04f 0200 	mov.w	r2, #0
 80051b2:	f04f 0300 	mov.w	r3, #0
 80051b6:	018b      	lsls	r3, r1, #6
 80051b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80051bc:	0182      	lsls	r2, r0, #6
 80051be:	1a12      	subs	r2, r2, r0
 80051c0:	eb63 0301 	sbc.w	r3, r3, r1
 80051c4:	f04f 0000 	mov.w	r0, #0
 80051c8:	f04f 0100 	mov.w	r1, #0
 80051cc:	00d9      	lsls	r1, r3, #3
 80051ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051d2:	00d0      	lsls	r0, r2, #3
 80051d4:	4602      	mov	r2, r0
 80051d6:	460b      	mov	r3, r1
 80051d8:	4621      	mov	r1, r4
 80051da:	1852      	adds	r2, r2, r1
 80051dc:	4629      	mov	r1, r5
 80051de:	eb43 0101 	adc.w	r1, r3, r1
 80051e2:	460b      	mov	r3, r1
 80051e4:	f04f 0000 	mov.w	r0, #0
 80051e8:	f04f 0100 	mov.w	r1, #0
 80051ec:	0259      	lsls	r1, r3, #9
 80051ee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80051f2:	0250      	lsls	r0, r2, #9
 80051f4:	4602      	mov	r2, r0
 80051f6:	460b      	mov	r3, r1
 80051f8:	4610      	mov	r0, r2
 80051fa:	4619      	mov	r1, r3
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	461a      	mov	r2, r3
 8005200:	f04f 0300 	mov.w	r3, #0
 8005204:	f7fb fc52 	bl	8000aac <__aeabi_uldivmod>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	4613      	mov	r3, r2
 800520e:	61fb      	str	r3, [r7, #28]
 8005210:	e04c      	b.n	80052ac <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005212:	4b8a      	ldr	r3, [pc, #552]	; (800543c <HAL_RCC_GetSysClockFreq+0x358>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	099b      	lsrs	r3, r3, #6
 8005218:	461a      	mov	r2, r3
 800521a:	f04f 0300 	mov.w	r3, #0
 800521e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005222:	f04f 0100 	mov.w	r1, #0
 8005226:	ea02 0a00 	and.w	sl, r2, r0
 800522a:	ea03 0b01 	and.w	fp, r3, r1
 800522e:	4650      	mov	r0, sl
 8005230:	4659      	mov	r1, fp
 8005232:	f04f 0200 	mov.w	r2, #0
 8005236:	f04f 0300 	mov.w	r3, #0
 800523a:	014b      	lsls	r3, r1, #5
 800523c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005240:	0142      	lsls	r2, r0, #5
 8005242:	4610      	mov	r0, r2
 8005244:	4619      	mov	r1, r3
 8005246:	ebb0 000a 	subs.w	r0, r0, sl
 800524a:	eb61 010b 	sbc.w	r1, r1, fp
 800524e:	f04f 0200 	mov.w	r2, #0
 8005252:	f04f 0300 	mov.w	r3, #0
 8005256:	018b      	lsls	r3, r1, #6
 8005258:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800525c:	0182      	lsls	r2, r0, #6
 800525e:	1a12      	subs	r2, r2, r0
 8005260:	eb63 0301 	sbc.w	r3, r3, r1
 8005264:	f04f 0000 	mov.w	r0, #0
 8005268:	f04f 0100 	mov.w	r1, #0
 800526c:	00d9      	lsls	r1, r3, #3
 800526e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005272:	00d0      	lsls	r0, r2, #3
 8005274:	4602      	mov	r2, r0
 8005276:	460b      	mov	r3, r1
 8005278:	eb12 020a 	adds.w	r2, r2, sl
 800527c:	eb43 030b 	adc.w	r3, r3, fp
 8005280:	f04f 0000 	mov.w	r0, #0
 8005284:	f04f 0100 	mov.w	r1, #0
 8005288:	0299      	lsls	r1, r3, #10
 800528a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800528e:	0290      	lsls	r0, r2, #10
 8005290:	4602      	mov	r2, r0
 8005292:	460b      	mov	r3, r1
 8005294:	4610      	mov	r0, r2
 8005296:	4619      	mov	r1, r3
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	461a      	mov	r2, r3
 800529c:	f04f 0300 	mov.w	r3, #0
 80052a0:	f7fb fc04 	bl	8000aac <__aeabi_uldivmod>
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	4613      	mov	r3, r2
 80052aa:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052ac:	4b63      	ldr	r3, [pc, #396]	; (800543c <HAL_RCC_GetSysClockFreq+0x358>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	0c1b      	lsrs	r3, r3, #16
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	3301      	adds	r3, #1
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80052bc:	69fa      	ldr	r2, [r7, #28]
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c4:	61bb      	str	r3, [r7, #24]
      break;
 80052c6:	e0b2      	b.n	800542e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052c8:	4b5c      	ldr	r3, [pc, #368]	; (800543c <HAL_RCC_GetSysClockFreq+0x358>)
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052d0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052d2:	4b5a      	ldr	r3, [pc, #360]	; (800543c <HAL_RCC_GetSysClockFreq+0x358>)
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d04d      	beq.n	800537a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052de:	4b57      	ldr	r3, [pc, #348]	; (800543c <HAL_RCC_GetSysClockFreq+0x358>)
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	099b      	lsrs	r3, r3, #6
 80052e4:	461a      	mov	r2, r3
 80052e6:	f04f 0300 	mov.w	r3, #0
 80052ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80052ee:	f04f 0100 	mov.w	r1, #0
 80052f2:	ea02 0800 	and.w	r8, r2, r0
 80052f6:	ea03 0901 	and.w	r9, r3, r1
 80052fa:	4640      	mov	r0, r8
 80052fc:	4649      	mov	r1, r9
 80052fe:	f04f 0200 	mov.w	r2, #0
 8005302:	f04f 0300 	mov.w	r3, #0
 8005306:	014b      	lsls	r3, r1, #5
 8005308:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800530c:	0142      	lsls	r2, r0, #5
 800530e:	4610      	mov	r0, r2
 8005310:	4619      	mov	r1, r3
 8005312:	ebb0 0008 	subs.w	r0, r0, r8
 8005316:	eb61 0109 	sbc.w	r1, r1, r9
 800531a:	f04f 0200 	mov.w	r2, #0
 800531e:	f04f 0300 	mov.w	r3, #0
 8005322:	018b      	lsls	r3, r1, #6
 8005324:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005328:	0182      	lsls	r2, r0, #6
 800532a:	1a12      	subs	r2, r2, r0
 800532c:	eb63 0301 	sbc.w	r3, r3, r1
 8005330:	f04f 0000 	mov.w	r0, #0
 8005334:	f04f 0100 	mov.w	r1, #0
 8005338:	00d9      	lsls	r1, r3, #3
 800533a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800533e:	00d0      	lsls	r0, r2, #3
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	eb12 0208 	adds.w	r2, r2, r8
 8005348:	eb43 0309 	adc.w	r3, r3, r9
 800534c:	f04f 0000 	mov.w	r0, #0
 8005350:	f04f 0100 	mov.w	r1, #0
 8005354:	0259      	lsls	r1, r3, #9
 8005356:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800535a:	0250      	lsls	r0, r2, #9
 800535c:	4602      	mov	r2, r0
 800535e:	460b      	mov	r3, r1
 8005360:	4610      	mov	r0, r2
 8005362:	4619      	mov	r1, r3
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	461a      	mov	r2, r3
 8005368:	f04f 0300 	mov.w	r3, #0
 800536c:	f7fb fb9e 	bl	8000aac <__aeabi_uldivmod>
 8005370:	4602      	mov	r2, r0
 8005372:	460b      	mov	r3, r1
 8005374:	4613      	mov	r3, r2
 8005376:	61fb      	str	r3, [r7, #28]
 8005378:	e04a      	b.n	8005410 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800537a:	4b30      	ldr	r3, [pc, #192]	; (800543c <HAL_RCC_GetSysClockFreq+0x358>)
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	099b      	lsrs	r3, r3, #6
 8005380:	461a      	mov	r2, r3
 8005382:	f04f 0300 	mov.w	r3, #0
 8005386:	f240 10ff 	movw	r0, #511	; 0x1ff
 800538a:	f04f 0100 	mov.w	r1, #0
 800538e:	ea02 0400 	and.w	r4, r2, r0
 8005392:	ea03 0501 	and.w	r5, r3, r1
 8005396:	4620      	mov	r0, r4
 8005398:	4629      	mov	r1, r5
 800539a:	f04f 0200 	mov.w	r2, #0
 800539e:	f04f 0300 	mov.w	r3, #0
 80053a2:	014b      	lsls	r3, r1, #5
 80053a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80053a8:	0142      	lsls	r2, r0, #5
 80053aa:	4610      	mov	r0, r2
 80053ac:	4619      	mov	r1, r3
 80053ae:	1b00      	subs	r0, r0, r4
 80053b0:	eb61 0105 	sbc.w	r1, r1, r5
 80053b4:	f04f 0200 	mov.w	r2, #0
 80053b8:	f04f 0300 	mov.w	r3, #0
 80053bc:	018b      	lsls	r3, r1, #6
 80053be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80053c2:	0182      	lsls	r2, r0, #6
 80053c4:	1a12      	subs	r2, r2, r0
 80053c6:	eb63 0301 	sbc.w	r3, r3, r1
 80053ca:	f04f 0000 	mov.w	r0, #0
 80053ce:	f04f 0100 	mov.w	r1, #0
 80053d2:	00d9      	lsls	r1, r3, #3
 80053d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053d8:	00d0      	lsls	r0, r2, #3
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	1912      	adds	r2, r2, r4
 80053e0:	eb45 0303 	adc.w	r3, r5, r3
 80053e4:	f04f 0000 	mov.w	r0, #0
 80053e8:	f04f 0100 	mov.w	r1, #0
 80053ec:	0299      	lsls	r1, r3, #10
 80053ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80053f2:	0290      	lsls	r0, r2, #10
 80053f4:	4602      	mov	r2, r0
 80053f6:	460b      	mov	r3, r1
 80053f8:	4610      	mov	r0, r2
 80053fa:	4619      	mov	r1, r3
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	461a      	mov	r2, r3
 8005400:	f04f 0300 	mov.w	r3, #0
 8005404:	f7fb fb52 	bl	8000aac <__aeabi_uldivmod>
 8005408:	4602      	mov	r2, r0
 800540a:	460b      	mov	r3, r1
 800540c:	4613      	mov	r3, r2
 800540e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005410:	4b0a      	ldr	r3, [pc, #40]	; (800543c <HAL_RCC_GetSysClockFreq+0x358>)
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	0f1b      	lsrs	r3, r3, #28
 8005416:	f003 0307 	and.w	r3, r3, #7
 800541a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800541c:	69fa      	ldr	r2, [r7, #28]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	fbb2 f3f3 	udiv	r3, r2, r3
 8005424:	61bb      	str	r3, [r7, #24]
      break;
 8005426:	e002      	b.n	800542e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005428:	4b05      	ldr	r3, [pc, #20]	; (8005440 <HAL_RCC_GetSysClockFreq+0x35c>)
 800542a:	61bb      	str	r3, [r7, #24]
      break;
 800542c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800542e:	69bb      	ldr	r3, [r7, #24]
}
 8005430:	4618      	mov	r0, r3
 8005432:	3720      	adds	r7, #32
 8005434:	46bd      	mov	sp, r7
 8005436:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800543a:	bf00      	nop
 800543c:	40023800 	.word	0x40023800
 8005440:	00f42400 	.word	0x00f42400
 8005444:	007a1200 	.word	0x007a1200

08005448 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e28d      	b.n	8005976 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	f000 8083 	beq.w	800556e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005468:	4b94      	ldr	r3, [pc, #592]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f003 030c 	and.w	r3, r3, #12
 8005470:	2b04      	cmp	r3, #4
 8005472:	d019      	beq.n	80054a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005474:	4b91      	ldr	r3, [pc, #580]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800547c:	2b08      	cmp	r3, #8
 800547e:	d106      	bne.n	800548e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005480:	4b8e      	ldr	r3, [pc, #568]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005488:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800548c:	d00c      	beq.n	80054a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800548e:	4b8b      	ldr	r3, [pc, #556]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005496:	2b0c      	cmp	r3, #12
 8005498:	d112      	bne.n	80054c0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800549a:	4b88      	ldr	r3, [pc, #544]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054a6:	d10b      	bne.n	80054c0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054a8:	4b84      	ldr	r3, [pc, #528]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d05b      	beq.n	800556c <HAL_RCC_OscConfig+0x124>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d157      	bne.n	800556c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e25a      	b.n	8005976 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054c8:	d106      	bne.n	80054d8 <HAL_RCC_OscConfig+0x90>
 80054ca:	4b7c      	ldr	r3, [pc, #496]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a7b      	ldr	r2, [pc, #492]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 80054d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054d4:	6013      	str	r3, [r2, #0]
 80054d6:	e01d      	b.n	8005514 <HAL_RCC_OscConfig+0xcc>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054e0:	d10c      	bne.n	80054fc <HAL_RCC_OscConfig+0xb4>
 80054e2:	4b76      	ldr	r3, [pc, #472]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a75      	ldr	r2, [pc, #468]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 80054e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054ec:	6013      	str	r3, [r2, #0]
 80054ee:	4b73      	ldr	r3, [pc, #460]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a72      	ldr	r2, [pc, #456]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 80054f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054f8:	6013      	str	r3, [r2, #0]
 80054fa:	e00b      	b.n	8005514 <HAL_RCC_OscConfig+0xcc>
 80054fc:	4b6f      	ldr	r3, [pc, #444]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a6e      	ldr	r2, [pc, #440]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 8005502:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005506:	6013      	str	r3, [r2, #0]
 8005508:	4b6c      	ldr	r3, [pc, #432]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a6b      	ldr	r2, [pc, #428]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 800550e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005512:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d013      	beq.n	8005544 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800551c:	f7fd fa44 	bl	80029a8 <HAL_GetTick>
 8005520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005522:	e008      	b.n	8005536 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005524:	f7fd fa40 	bl	80029a8 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b64      	cmp	r3, #100	; 0x64
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e21f      	b.n	8005976 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005536:	4b61      	ldr	r3, [pc, #388]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d0f0      	beq.n	8005524 <HAL_RCC_OscConfig+0xdc>
 8005542:	e014      	b.n	800556e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005544:	f7fd fa30 	bl	80029a8 <HAL_GetTick>
 8005548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800554a:	e008      	b.n	800555e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800554c:	f7fd fa2c 	bl	80029a8 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b64      	cmp	r3, #100	; 0x64
 8005558:	d901      	bls.n	800555e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e20b      	b.n	8005976 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800555e:	4b57      	ldr	r3, [pc, #348]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1f0      	bne.n	800554c <HAL_RCC_OscConfig+0x104>
 800556a:	e000      	b.n	800556e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800556c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	2b00      	cmp	r3, #0
 8005578:	d06f      	beq.n	800565a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800557a:	4b50      	ldr	r3, [pc, #320]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f003 030c 	and.w	r3, r3, #12
 8005582:	2b00      	cmp	r3, #0
 8005584:	d017      	beq.n	80055b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005586:	4b4d      	ldr	r3, [pc, #308]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800558e:	2b08      	cmp	r3, #8
 8005590:	d105      	bne.n	800559e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005592:	4b4a      	ldr	r3, [pc, #296]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00b      	beq.n	80055b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800559e:	4b47      	ldr	r3, [pc, #284]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80055a6:	2b0c      	cmp	r3, #12
 80055a8:	d11c      	bne.n	80055e4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055aa:	4b44      	ldr	r3, [pc, #272]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d116      	bne.n	80055e4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055b6:	4b41      	ldr	r3, [pc, #260]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d005      	beq.n	80055ce <HAL_RCC_OscConfig+0x186>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d001      	beq.n	80055ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e1d3      	b.n	8005976 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055ce:	4b3b      	ldr	r3, [pc, #236]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	4937      	ldr	r1, [pc, #220]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055e2:	e03a      	b.n	800565a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d020      	beq.n	800562e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055ec:	4b34      	ldr	r3, [pc, #208]	; (80056c0 <HAL_RCC_OscConfig+0x278>)
 80055ee:	2201      	movs	r2, #1
 80055f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f2:	f7fd f9d9 	bl	80029a8 <HAL_GetTick>
 80055f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055f8:	e008      	b.n	800560c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055fa:	f7fd f9d5 	bl	80029a8 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	2b02      	cmp	r3, #2
 8005606:	d901      	bls.n	800560c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e1b4      	b.n	8005976 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800560c:	4b2b      	ldr	r3, [pc, #172]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d0f0      	beq.n	80055fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005618:	4b28      	ldr	r3, [pc, #160]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	4925      	ldr	r1, [pc, #148]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 8005628:	4313      	orrs	r3, r2
 800562a:	600b      	str	r3, [r1, #0]
 800562c:	e015      	b.n	800565a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800562e:	4b24      	ldr	r3, [pc, #144]	; (80056c0 <HAL_RCC_OscConfig+0x278>)
 8005630:	2200      	movs	r2, #0
 8005632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005634:	f7fd f9b8 	bl	80029a8 <HAL_GetTick>
 8005638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800563c:	f7fd f9b4 	bl	80029a8 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b02      	cmp	r3, #2
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e193      	b.n	8005976 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800564e:	4b1b      	ldr	r3, [pc, #108]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1f0      	bne.n	800563c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0308 	and.w	r3, r3, #8
 8005662:	2b00      	cmp	r3, #0
 8005664:	d036      	beq.n	80056d4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d016      	beq.n	800569c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800566e:	4b15      	ldr	r3, [pc, #84]	; (80056c4 <HAL_RCC_OscConfig+0x27c>)
 8005670:	2201      	movs	r2, #1
 8005672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005674:	f7fd f998 	bl	80029a8 <HAL_GetTick>
 8005678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800567c:	f7fd f994 	bl	80029a8 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e173      	b.n	8005976 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800568e:	4b0b      	ldr	r3, [pc, #44]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 8005690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d0f0      	beq.n	800567c <HAL_RCC_OscConfig+0x234>
 800569a:	e01b      	b.n	80056d4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800569c:	4b09      	ldr	r3, [pc, #36]	; (80056c4 <HAL_RCC_OscConfig+0x27c>)
 800569e:	2200      	movs	r2, #0
 80056a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a2:	f7fd f981 	bl	80029a8 <HAL_GetTick>
 80056a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056a8:	e00e      	b.n	80056c8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056aa:	f7fd f97d 	bl	80029a8 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d907      	bls.n	80056c8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e15c      	b.n	8005976 <HAL_RCC_OscConfig+0x52e>
 80056bc:	40023800 	.word	0x40023800
 80056c0:	42470000 	.word	0x42470000
 80056c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056c8:	4b8a      	ldr	r3, [pc, #552]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 80056ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1ea      	bne.n	80056aa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0304 	and.w	r3, r3, #4
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f000 8097 	beq.w	8005810 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056e2:	2300      	movs	r3, #0
 80056e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056e6:	4b83      	ldr	r3, [pc, #524]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 80056e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10f      	bne.n	8005712 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056f2:	2300      	movs	r3, #0
 80056f4:	60bb      	str	r3, [r7, #8]
 80056f6:	4b7f      	ldr	r3, [pc, #508]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	4a7e      	ldr	r2, [pc, #504]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 80056fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005700:	6413      	str	r3, [r2, #64]	; 0x40
 8005702:	4b7c      	ldr	r3, [pc, #496]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800570a:	60bb      	str	r3, [r7, #8]
 800570c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800570e:	2301      	movs	r3, #1
 8005710:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005712:	4b79      	ldr	r3, [pc, #484]	; (80058f8 <HAL_RCC_OscConfig+0x4b0>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571a:	2b00      	cmp	r3, #0
 800571c:	d118      	bne.n	8005750 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800571e:	4b76      	ldr	r3, [pc, #472]	; (80058f8 <HAL_RCC_OscConfig+0x4b0>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a75      	ldr	r2, [pc, #468]	; (80058f8 <HAL_RCC_OscConfig+0x4b0>)
 8005724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005728:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800572a:	f7fd f93d 	bl	80029a8 <HAL_GetTick>
 800572e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005730:	e008      	b.n	8005744 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005732:	f7fd f939 	bl	80029a8 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d901      	bls.n	8005744 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e118      	b.n	8005976 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005744:	4b6c      	ldr	r3, [pc, #432]	; (80058f8 <HAL_RCC_OscConfig+0x4b0>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800574c:	2b00      	cmp	r3, #0
 800574e:	d0f0      	beq.n	8005732 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d106      	bne.n	8005766 <HAL_RCC_OscConfig+0x31e>
 8005758:	4b66      	ldr	r3, [pc, #408]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 800575a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575c:	4a65      	ldr	r2, [pc, #404]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 800575e:	f043 0301 	orr.w	r3, r3, #1
 8005762:	6713      	str	r3, [r2, #112]	; 0x70
 8005764:	e01c      	b.n	80057a0 <HAL_RCC_OscConfig+0x358>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	2b05      	cmp	r3, #5
 800576c:	d10c      	bne.n	8005788 <HAL_RCC_OscConfig+0x340>
 800576e:	4b61      	ldr	r3, [pc, #388]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 8005770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005772:	4a60      	ldr	r2, [pc, #384]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 8005774:	f043 0304 	orr.w	r3, r3, #4
 8005778:	6713      	str	r3, [r2, #112]	; 0x70
 800577a:	4b5e      	ldr	r3, [pc, #376]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 800577c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800577e:	4a5d      	ldr	r2, [pc, #372]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 8005780:	f043 0301 	orr.w	r3, r3, #1
 8005784:	6713      	str	r3, [r2, #112]	; 0x70
 8005786:	e00b      	b.n	80057a0 <HAL_RCC_OscConfig+0x358>
 8005788:	4b5a      	ldr	r3, [pc, #360]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 800578a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578c:	4a59      	ldr	r2, [pc, #356]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 800578e:	f023 0301 	bic.w	r3, r3, #1
 8005792:	6713      	str	r3, [r2, #112]	; 0x70
 8005794:	4b57      	ldr	r3, [pc, #348]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 8005796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005798:	4a56      	ldr	r2, [pc, #344]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 800579a:	f023 0304 	bic.w	r3, r3, #4
 800579e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d015      	beq.n	80057d4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a8:	f7fd f8fe 	bl	80029a8 <HAL_GetTick>
 80057ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057ae:	e00a      	b.n	80057c6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057b0:	f7fd f8fa 	bl	80029a8 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80057be:	4293      	cmp	r3, r2
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e0d7      	b.n	8005976 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057c6:	4b4b      	ldr	r3, [pc, #300]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 80057c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d0ee      	beq.n	80057b0 <HAL_RCC_OscConfig+0x368>
 80057d2:	e014      	b.n	80057fe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057d4:	f7fd f8e8 	bl	80029a8 <HAL_GetTick>
 80057d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057da:	e00a      	b.n	80057f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057dc:	f7fd f8e4 	bl	80029a8 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e0c1      	b.n	8005976 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057f2:	4b40      	ldr	r3, [pc, #256]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 80057f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1ee      	bne.n	80057dc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057fe:	7dfb      	ldrb	r3, [r7, #23]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d105      	bne.n	8005810 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005804:	4b3b      	ldr	r3, [pc, #236]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 8005806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005808:	4a3a      	ldr	r2, [pc, #232]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 800580a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800580e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	2b00      	cmp	r3, #0
 8005816:	f000 80ad 	beq.w	8005974 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800581a:	4b36      	ldr	r3, [pc, #216]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f003 030c 	and.w	r3, r3, #12
 8005822:	2b08      	cmp	r3, #8
 8005824:	d060      	beq.n	80058e8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	2b02      	cmp	r3, #2
 800582c:	d145      	bne.n	80058ba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800582e:	4b33      	ldr	r3, [pc, #204]	; (80058fc <HAL_RCC_OscConfig+0x4b4>)
 8005830:	2200      	movs	r2, #0
 8005832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005834:	f7fd f8b8 	bl	80029a8 <HAL_GetTick>
 8005838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800583a:	e008      	b.n	800584e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800583c:	f7fd f8b4 	bl	80029a8 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e093      	b.n	8005976 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800584e:	4b29      	ldr	r3, [pc, #164]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1f0      	bne.n	800583c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	69da      	ldr	r2, [r3, #28]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	431a      	orrs	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005868:	019b      	lsls	r3, r3, #6
 800586a:	431a      	orrs	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005870:	085b      	lsrs	r3, r3, #1
 8005872:	3b01      	subs	r3, #1
 8005874:	041b      	lsls	r3, r3, #16
 8005876:	431a      	orrs	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587c:	061b      	lsls	r3, r3, #24
 800587e:	431a      	orrs	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005884:	071b      	lsls	r3, r3, #28
 8005886:	491b      	ldr	r1, [pc, #108]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 8005888:	4313      	orrs	r3, r2
 800588a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800588c:	4b1b      	ldr	r3, [pc, #108]	; (80058fc <HAL_RCC_OscConfig+0x4b4>)
 800588e:	2201      	movs	r2, #1
 8005890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005892:	f7fd f889 	bl	80029a8 <HAL_GetTick>
 8005896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005898:	e008      	b.n	80058ac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800589a:	f7fd f885 	bl	80029a8 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d901      	bls.n	80058ac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e064      	b.n	8005976 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058ac:	4b11      	ldr	r3, [pc, #68]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d0f0      	beq.n	800589a <HAL_RCC_OscConfig+0x452>
 80058b8:	e05c      	b.n	8005974 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058ba:	4b10      	ldr	r3, [pc, #64]	; (80058fc <HAL_RCC_OscConfig+0x4b4>)
 80058bc:	2200      	movs	r2, #0
 80058be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c0:	f7fd f872 	bl	80029a8 <HAL_GetTick>
 80058c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058c6:	e008      	b.n	80058da <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058c8:	f7fd f86e 	bl	80029a8 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d901      	bls.n	80058da <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e04d      	b.n	8005976 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058da:	4b06      	ldr	r3, [pc, #24]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1f0      	bne.n	80058c8 <HAL_RCC_OscConfig+0x480>
 80058e6:	e045      	b.n	8005974 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d107      	bne.n	8005900 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e040      	b.n	8005976 <HAL_RCC_OscConfig+0x52e>
 80058f4:	40023800 	.word	0x40023800
 80058f8:	40007000 	.word	0x40007000
 80058fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005900:	4b1f      	ldr	r3, [pc, #124]	; (8005980 <HAL_RCC_OscConfig+0x538>)
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d030      	beq.n	8005970 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005918:	429a      	cmp	r2, r3
 800591a:	d129      	bne.n	8005970 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005926:	429a      	cmp	r2, r3
 8005928:	d122      	bne.n	8005970 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005930:	4013      	ands	r3, r2
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005936:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005938:	4293      	cmp	r3, r2
 800593a:	d119      	bne.n	8005970 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005946:	085b      	lsrs	r3, r3, #1
 8005948:	3b01      	subs	r3, #1
 800594a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800594c:	429a      	cmp	r2, r3
 800594e:	d10f      	bne.n	8005970 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800595c:	429a      	cmp	r2, r3
 800595e:	d107      	bne.n	8005970 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800596c:	429a      	cmp	r2, r3
 800596e:	d001      	beq.n	8005974 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e000      	b.n	8005976 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3718      	adds	r7, #24
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	40023800 	.word	0x40023800

08005984 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e041      	b.n	8005a1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d106      	bne.n	80059b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7fc fc34 	bl	8002218 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2202      	movs	r2, #2
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3304      	adds	r3, #4
 80059c0:	4619      	mov	r1, r3
 80059c2:	4610      	mov	r0, r2
 80059c4:	f000 fd52 	bl	800646c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
	...

08005a24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d001      	beq.n	8005a3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e046      	b.n	8005aca <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2202      	movs	r2, #2
 8005a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a23      	ldr	r2, [pc, #140]	; (8005ad8 <HAL_TIM_Base_Start+0xb4>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d022      	beq.n	8005a94 <HAL_TIM_Base_Start+0x70>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a56:	d01d      	beq.n	8005a94 <HAL_TIM_Base_Start+0x70>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a1f      	ldr	r2, [pc, #124]	; (8005adc <HAL_TIM_Base_Start+0xb8>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d018      	beq.n	8005a94 <HAL_TIM_Base_Start+0x70>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a1e      	ldr	r2, [pc, #120]	; (8005ae0 <HAL_TIM_Base_Start+0xbc>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d013      	beq.n	8005a94 <HAL_TIM_Base_Start+0x70>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a1c      	ldr	r2, [pc, #112]	; (8005ae4 <HAL_TIM_Base_Start+0xc0>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d00e      	beq.n	8005a94 <HAL_TIM_Base_Start+0x70>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a1b      	ldr	r2, [pc, #108]	; (8005ae8 <HAL_TIM_Base_Start+0xc4>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d009      	beq.n	8005a94 <HAL_TIM_Base_Start+0x70>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a19      	ldr	r2, [pc, #100]	; (8005aec <HAL_TIM_Base_Start+0xc8>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d004      	beq.n	8005a94 <HAL_TIM_Base_Start+0x70>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a18      	ldr	r2, [pc, #96]	; (8005af0 <HAL_TIM_Base_Start+0xcc>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d111      	bne.n	8005ab8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f003 0307 	and.w	r3, r3, #7
 8005a9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2b06      	cmp	r3, #6
 8005aa4:	d010      	beq.n	8005ac8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f042 0201 	orr.w	r2, r2, #1
 8005ab4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab6:	e007      	b.n	8005ac8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f042 0201 	orr.w	r2, r2, #1
 8005ac6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	40010000 	.word	0x40010000
 8005adc:	40000400 	.word	0x40000400
 8005ae0:	40000800 	.word	0x40000800
 8005ae4:	40000c00 	.word	0x40000c00
 8005ae8:	40010400 	.word	0x40010400
 8005aec:	40014000 	.word	0x40014000
 8005af0:	40001800 	.word	0x40001800

08005af4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d001      	beq.n	8005b0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e04e      	b.n	8005baa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2202      	movs	r2, #2
 8005b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68da      	ldr	r2, [r3, #12]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f042 0201 	orr.w	r2, r2, #1
 8005b22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a23      	ldr	r2, [pc, #140]	; (8005bb8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d022      	beq.n	8005b74 <HAL_TIM_Base_Start_IT+0x80>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b36:	d01d      	beq.n	8005b74 <HAL_TIM_Base_Start_IT+0x80>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a1f      	ldr	r2, [pc, #124]	; (8005bbc <HAL_TIM_Base_Start_IT+0xc8>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d018      	beq.n	8005b74 <HAL_TIM_Base_Start_IT+0x80>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a1e      	ldr	r2, [pc, #120]	; (8005bc0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d013      	beq.n	8005b74 <HAL_TIM_Base_Start_IT+0x80>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a1c      	ldr	r2, [pc, #112]	; (8005bc4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d00e      	beq.n	8005b74 <HAL_TIM_Base_Start_IT+0x80>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a1b      	ldr	r2, [pc, #108]	; (8005bc8 <HAL_TIM_Base_Start_IT+0xd4>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d009      	beq.n	8005b74 <HAL_TIM_Base_Start_IT+0x80>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a19      	ldr	r2, [pc, #100]	; (8005bcc <HAL_TIM_Base_Start_IT+0xd8>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d004      	beq.n	8005b74 <HAL_TIM_Base_Start_IT+0x80>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a18      	ldr	r2, [pc, #96]	; (8005bd0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d111      	bne.n	8005b98 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f003 0307 	and.w	r3, r3, #7
 8005b7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2b06      	cmp	r3, #6
 8005b84:	d010      	beq.n	8005ba8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f042 0201 	orr.w	r2, r2, #1
 8005b94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b96:	e007      	b.n	8005ba8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f042 0201 	orr.w	r2, r2, #1
 8005ba6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	40010000 	.word	0x40010000
 8005bbc:	40000400 	.word	0x40000400
 8005bc0:	40000800 	.word	0x40000800
 8005bc4:	40000c00 	.word	0x40000c00
 8005bc8:	40010400 	.word	0x40010400
 8005bcc:	40014000 	.word	0x40014000
 8005bd0:	40001800 	.word	0x40001800

08005bd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e041      	b.n	8005c6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d106      	bne.n	8005c00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f839 	bl	8005c72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	3304      	adds	r3, #4
 8005c10:	4619      	mov	r1, r3
 8005c12:	4610      	mov	r0, r2
 8005c14:	f000 fc2a 	bl	800646c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3708      	adds	r7, #8
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c7a:	bf00      	nop
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
	...

08005c88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d109      	bne.n	8005cac <HAL_TIM_PWM_Start+0x24>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	bf14      	ite	ne
 8005ca4:	2301      	movne	r3, #1
 8005ca6:	2300      	moveq	r3, #0
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	e022      	b.n	8005cf2 <HAL_TIM_PWM_Start+0x6a>
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	2b04      	cmp	r3, #4
 8005cb0:	d109      	bne.n	8005cc6 <HAL_TIM_PWM_Start+0x3e>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	bf14      	ite	ne
 8005cbe:	2301      	movne	r3, #1
 8005cc0:	2300      	moveq	r3, #0
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	e015      	b.n	8005cf2 <HAL_TIM_PWM_Start+0x6a>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	d109      	bne.n	8005ce0 <HAL_TIM_PWM_Start+0x58>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	bf14      	ite	ne
 8005cd8:	2301      	movne	r3, #1
 8005cda:	2300      	moveq	r3, #0
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	e008      	b.n	8005cf2 <HAL_TIM_PWM_Start+0x6a>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	bf14      	ite	ne
 8005cec:	2301      	movne	r3, #1
 8005cee:	2300      	moveq	r3, #0
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e07c      	b.n	8005df4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d104      	bne.n	8005d0a <HAL_TIM_PWM_Start+0x82>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2202      	movs	r2, #2
 8005d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d08:	e013      	b.n	8005d32 <HAL_TIM_PWM_Start+0xaa>
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2b04      	cmp	r3, #4
 8005d0e:	d104      	bne.n	8005d1a <HAL_TIM_PWM_Start+0x92>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2202      	movs	r2, #2
 8005d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d18:	e00b      	b.n	8005d32 <HAL_TIM_PWM_Start+0xaa>
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b08      	cmp	r3, #8
 8005d1e:	d104      	bne.n	8005d2a <HAL_TIM_PWM_Start+0xa2>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2202      	movs	r2, #2
 8005d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d28:	e003      	b.n	8005d32 <HAL_TIM_PWM_Start+0xaa>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2201      	movs	r2, #1
 8005d38:	6839      	ldr	r1, [r7, #0]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f000 fe80 	bl	8006a40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a2d      	ldr	r2, [pc, #180]	; (8005dfc <HAL_TIM_PWM_Start+0x174>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d004      	beq.n	8005d54 <HAL_TIM_PWM_Start+0xcc>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a2c      	ldr	r2, [pc, #176]	; (8005e00 <HAL_TIM_PWM_Start+0x178>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d101      	bne.n	8005d58 <HAL_TIM_PWM_Start+0xd0>
 8005d54:	2301      	movs	r3, #1
 8005d56:	e000      	b.n	8005d5a <HAL_TIM_PWM_Start+0xd2>
 8005d58:	2300      	movs	r3, #0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d007      	beq.n	8005d6e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a22      	ldr	r2, [pc, #136]	; (8005dfc <HAL_TIM_PWM_Start+0x174>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d022      	beq.n	8005dbe <HAL_TIM_PWM_Start+0x136>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d80:	d01d      	beq.n	8005dbe <HAL_TIM_PWM_Start+0x136>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a1f      	ldr	r2, [pc, #124]	; (8005e04 <HAL_TIM_PWM_Start+0x17c>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d018      	beq.n	8005dbe <HAL_TIM_PWM_Start+0x136>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a1d      	ldr	r2, [pc, #116]	; (8005e08 <HAL_TIM_PWM_Start+0x180>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d013      	beq.n	8005dbe <HAL_TIM_PWM_Start+0x136>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a1c      	ldr	r2, [pc, #112]	; (8005e0c <HAL_TIM_PWM_Start+0x184>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d00e      	beq.n	8005dbe <HAL_TIM_PWM_Start+0x136>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a16      	ldr	r2, [pc, #88]	; (8005e00 <HAL_TIM_PWM_Start+0x178>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d009      	beq.n	8005dbe <HAL_TIM_PWM_Start+0x136>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a18      	ldr	r2, [pc, #96]	; (8005e10 <HAL_TIM_PWM_Start+0x188>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d004      	beq.n	8005dbe <HAL_TIM_PWM_Start+0x136>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a16      	ldr	r2, [pc, #88]	; (8005e14 <HAL_TIM_PWM_Start+0x18c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d111      	bne.n	8005de2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f003 0307 	and.w	r3, r3, #7
 8005dc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2b06      	cmp	r3, #6
 8005dce:	d010      	beq.n	8005df2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f042 0201 	orr.w	r2, r2, #1
 8005dde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de0:	e007      	b.n	8005df2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f042 0201 	orr.w	r2, r2, #1
 8005df0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	40010000 	.word	0x40010000
 8005e00:	40010400 	.word	0x40010400
 8005e04:	40000400 	.word	0x40000400
 8005e08:	40000800 	.word	0x40000800
 8005e0c:	40000c00 	.word	0x40000c00
 8005e10:	40014000 	.word	0x40014000
 8005e14:	40001800 	.word	0x40001800

08005e18 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2200      	movs	r2, #0
 8005e28:	6839      	ldr	r1, [r7, #0]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 fe08 	bl	8006a40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a2e      	ldr	r2, [pc, #184]	; (8005ef0 <HAL_TIM_PWM_Stop+0xd8>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d004      	beq.n	8005e44 <HAL_TIM_PWM_Stop+0x2c>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a2d      	ldr	r2, [pc, #180]	; (8005ef4 <HAL_TIM_PWM_Stop+0xdc>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d101      	bne.n	8005e48 <HAL_TIM_PWM_Stop+0x30>
 8005e44:	2301      	movs	r3, #1
 8005e46:	e000      	b.n	8005e4a <HAL_TIM_PWM_Stop+0x32>
 8005e48:	2300      	movs	r3, #0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d017      	beq.n	8005e7e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	6a1a      	ldr	r2, [r3, #32]
 8005e54:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e58:	4013      	ands	r3, r2
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10f      	bne.n	8005e7e <HAL_TIM_PWM_Stop+0x66>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6a1a      	ldr	r2, [r3, #32]
 8005e64:	f240 4344 	movw	r3, #1092	; 0x444
 8005e68:	4013      	ands	r3, r2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d107      	bne.n	8005e7e <HAL_TIM_PWM_Stop+0x66>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	6a1a      	ldr	r2, [r3, #32]
 8005e84:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e88:	4013      	ands	r3, r2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10f      	bne.n	8005eae <HAL_TIM_PWM_Stop+0x96>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	6a1a      	ldr	r2, [r3, #32]
 8005e94:	f240 4344 	movw	r3, #1092	; 0x444
 8005e98:	4013      	ands	r3, r2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d107      	bne.n	8005eae <HAL_TIM_PWM_Stop+0x96>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 0201 	bic.w	r2, r2, #1
 8005eac:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d104      	bne.n	8005ebe <HAL_TIM_PWM_Stop+0xa6>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ebc:	e013      	b.n	8005ee6 <HAL_TIM_PWM_Stop+0xce>
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	2b04      	cmp	r3, #4
 8005ec2:	d104      	bne.n	8005ece <HAL_TIM_PWM_Stop+0xb6>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ecc:	e00b      	b.n	8005ee6 <HAL_TIM_PWM_Stop+0xce>
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	2b08      	cmp	r3, #8
 8005ed2:	d104      	bne.n	8005ede <HAL_TIM_PWM_Stop+0xc6>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005edc:	e003      	b.n	8005ee6 <HAL_TIM_PWM_Stop+0xce>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3708      	adds	r7, #8
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	40010000 	.word	0x40010000
 8005ef4:	40010400 	.word	0x40010400

08005ef8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d122      	bne.n	8005f54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f003 0302 	and.w	r3, r3, #2
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d11b      	bne.n	8005f54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f06f 0202 	mvn.w	r2, #2
 8005f24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	f003 0303 	and.w	r3, r3, #3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 fa77 	bl	800642e <HAL_TIM_IC_CaptureCallback>
 8005f40:	e005      	b.n	8005f4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fa69 	bl	800641a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 fa7a 	bl	8006442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	f003 0304 	and.w	r3, r3, #4
 8005f5e:	2b04      	cmp	r3, #4
 8005f60:	d122      	bne.n	8005fa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f003 0304 	and.w	r3, r3, #4
 8005f6c:	2b04      	cmp	r3, #4
 8005f6e:	d11b      	bne.n	8005fa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f06f 0204 	mvn.w	r2, #4
 8005f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d003      	beq.n	8005f96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 fa4d 	bl	800642e <HAL_TIM_IC_CaptureCallback>
 8005f94:	e005      	b.n	8005fa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 fa3f 	bl	800641a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 fa50 	bl	8006442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	f003 0308 	and.w	r3, r3, #8
 8005fb2:	2b08      	cmp	r3, #8
 8005fb4:	d122      	bne.n	8005ffc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	f003 0308 	and.w	r3, r3, #8
 8005fc0:	2b08      	cmp	r3, #8
 8005fc2:	d11b      	bne.n	8005ffc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f06f 0208 	mvn.w	r2, #8
 8005fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2204      	movs	r2, #4
 8005fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	f003 0303 	and.w	r3, r3, #3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d003      	beq.n	8005fea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 fa23 	bl	800642e <HAL_TIM_IC_CaptureCallback>
 8005fe8:	e005      	b.n	8005ff6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 fa15 	bl	800641a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 fa26 	bl	8006442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	f003 0310 	and.w	r3, r3, #16
 8006006:	2b10      	cmp	r3, #16
 8006008:	d122      	bne.n	8006050 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	f003 0310 	and.w	r3, r3, #16
 8006014:	2b10      	cmp	r3, #16
 8006016:	d11b      	bne.n	8006050 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f06f 0210 	mvn.w	r2, #16
 8006020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2208      	movs	r2, #8
 8006026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006032:	2b00      	cmp	r3, #0
 8006034:	d003      	beq.n	800603e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f9f9 	bl	800642e <HAL_TIM_IC_CaptureCallback>
 800603c:	e005      	b.n	800604a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f9eb 	bl	800641a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 f9fc 	bl	8006442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b01      	cmp	r3, #1
 800605c:	d10e      	bne.n	800607c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f003 0301 	and.w	r3, r3, #1
 8006068:	2b01      	cmp	r3, #1
 800606a:	d107      	bne.n	800607c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f06f 0201 	mvn.w	r2, #1
 8006074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7fb fa40 	bl	80014fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006086:	2b80      	cmp	r3, #128	; 0x80
 8006088:	d10e      	bne.n	80060a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006094:	2b80      	cmp	r3, #128	; 0x80
 8006096:	d107      	bne.n	80060a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fd78 	bl	8006b98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b2:	2b40      	cmp	r3, #64	; 0x40
 80060b4:	d10e      	bne.n	80060d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c0:	2b40      	cmp	r3, #64	; 0x40
 80060c2:	d107      	bne.n	80060d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f9c1 	bl	8006456 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	f003 0320 	and.w	r3, r3, #32
 80060de:	2b20      	cmp	r3, #32
 80060e0:	d10e      	bne.n	8006100 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	f003 0320 	and.w	r3, r3, #32
 80060ec:	2b20      	cmp	r3, #32
 80060ee:	d107      	bne.n	8006100 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f06f 0220 	mvn.w	r2, #32
 80060f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 fd42 	bl	8006b84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006100:	bf00      	nop
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006114:	2300      	movs	r3, #0
 8006116:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800611e:	2b01      	cmp	r3, #1
 8006120:	d101      	bne.n	8006126 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006122:	2302      	movs	r3, #2
 8006124:	e0ae      	b.n	8006284 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2b0c      	cmp	r3, #12
 8006132:	f200 809f 	bhi.w	8006274 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006136:	a201      	add	r2, pc, #4	; (adr r2, 800613c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800613c:	08006171 	.word	0x08006171
 8006140:	08006275 	.word	0x08006275
 8006144:	08006275 	.word	0x08006275
 8006148:	08006275 	.word	0x08006275
 800614c:	080061b1 	.word	0x080061b1
 8006150:	08006275 	.word	0x08006275
 8006154:	08006275 	.word	0x08006275
 8006158:	08006275 	.word	0x08006275
 800615c:	080061f3 	.word	0x080061f3
 8006160:	08006275 	.word	0x08006275
 8006164:	08006275 	.word	0x08006275
 8006168:	08006275 	.word	0x08006275
 800616c:	08006233 	.word	0x08006233
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68b9      	ldr	r1, [r7, #8]
 8006176:	4618      	mov	r0, r3
 8006178:	f000 fa18 	bl	80065ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	699a      	ldr	r2, [r3, #24]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f042 0208 	orr.w	r2, r2, #8
 800618a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	699a      	ldr	r2, [r3, #24]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 0204 	bic.w	r2, r2, #4
 800619a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6999      	ldr	r1, [r3, #24]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	691a      	ldr	r2, [r3, #16]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	430a      	orrs	r2, r1
 80061ac:	619a      	str	r2, [r3, #24]
      break;
 80061ae:	e064      	b.n	800627a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68b9      	ldr	r1, [r7, #8]
 80061b6:	4618      	mov	r0, r3
 80061b8:	f000 fa68 	bl	800668c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	699a      	ldr	r2, [r3, #24]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	699a      	ldr	r2, [r3, #24]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	6999      	ldr	r1, [r3, #24]
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	021a      	lsls	r2, r3, #8
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	430a      	orrs	r2, r1
 80061ee:	619a      	str	r2, [r3, #24]
      break;
 80061f0:	e043      	b.n	800627a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68b9      	ldr	r1, [r7, #8]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f000 fabd 	bl	8006778 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	69da      	ldr	r2, [r3, #28]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f042 0208 	orr.w	r2, r2, #8
 800620c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	69da      	ldr	r2, [r3, #28]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f022 0204 	bic.w	r2, r2, #4
 800621c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	69d9      	ldr	r1, [r3, #28]
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	691a      	ldr	r2, [r3, #16]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	430a      	orrs	r2, r1
 800622e:	61da      	str	r2, [r3, #28]
      break;
 8006230:	e023      	b.n	800627a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68b9      	ldr	r1, [r7, #8]
 8006238:	4618      	mov	r0, r3
 800623a:	f000 fb11 	bl	8006860 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	69da      	ldr	r2, [r3, #28]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800624c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	69da      	ldr	r2, [r3, #28]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800625c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	69d9      	ldr	r1, [r3, #28]
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	021a      	lsls	r2, r3, #8
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	430a      	orrs	r2, r1
 8006270:	61da      	str	r2, [r3, #28]
      break;
 8006272:	e002      	b.n	800627a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	75fb      	strb	r3, [r7, #23]
      break;
 8006278:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006282:	7dfb      	ldrb	r3, [r7, #23]
}
 8006284:	4618      	mov	r0, r3
 8006286:	3718      	adds	r7, #24
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006296:	2300      	movs	r3, #0
 8006298:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d101      	bne.n	80062a8 <HAL_TIM_ConfigClockSource+0x1c>
 80062a4:	2302      	movs	r3, #2
 80062a6:	e0b4      	b.n	8006412 <HAL_TIM_ConfigClockSource+0x186>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2202      	movs	r2, #2
 80062b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68ba      	ldr	r2, [r7, #8]
 80062d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062e0:	d03e      	beq.n	8006360 <HAL_TIM_ConfigClockSource+0xd4>
 80062e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062e6:	f200 8087 	bhi.w	80063f8 <HAL_TIM_ConfigClockSource+0x16c>
 80062ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ee:	f000 8086 	beq.w	80063fe <HAL_TIM_ConfigClockSource+0x172>
 80062f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f6:	d87f      	bhi.n	80063f8 <HAL_TIM_ConfigClockSource+0x16c>
 80062f8:	2b70      	cmp	r3, #112	; 0x70
 80062fa:	d01a      	beq.n	8006332 <HAL_TIM_ConfigClockSource+0xa6>
 80062fc:	2b70      	cmp	r3, #112	; 0x70
 80062fe:	d87b      	bhi.n	80063f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006300:	2b60      	cmp	r3, #96	; 0x60
 8006302:	d050      	beq.n	80063a6 <HAL_TIM_ConfigClockSource+0x11a>
 8006304:	2b60      	cmp	r3, #96	; 0x60
 8006306:	d877      	bhi.n	80063f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006308:	2b50      	cmp	r3, #80	; 0x50
 800630a:	d03c      	beq.n	8006386 <HAL_TIM_ConfigClockSource+0xfa>
 800630c:	2b50      	cmp	r3, #80	; 0x50
 800630e:	d873      	bhi.n	80063f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006310:	2b40      	cmp	r3, #64	; 0x40
 8006312:	d058      	beq.n	80063c6 <HAL_TIM_ConfigClockSource+0x13a>
 8006314:	2b40      	cmp	r3, #64	; 0x40
 8006316:	d86f      	bhi.n	80063f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006318:	2b30      	cmp	r3, #48	; 0x30
 800631a:	d064      	beq.n	80063e6 <HAL_TIM_ConfigClockSource+0x15a>
 800631c:	2b30      	cmp	r3, #48	; 0x30
 800631e:	d86b      	bhi.n	80063f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006320:	2b20      	cmp	r3, #32
 8006322:	d060      	beq.n	80063e6 <HAL_TIM_ConfigClockSource+0x15a>
 8006324:	2b20      	cmp	r3, #32
 8006326:	d867      	bhi.n	80063f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006328:	2b00      	cmp	r3, #0
 800632a:	d05c      	beq.n	80063e6 <HAL_TIM_ConfigClockSource+0x15a>
 800632c:	2b10      	cmp	r3, #16
 800632e:	d05a      	beq.n	80063e6 <HAL_TIM_ConfigClockSource+0x15a>
 8006330:	e062      	b.n	80063f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6818      	ldr	r0, [r3, #0]
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	6899      	ldr	r1, [r3, #8]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	f000 fb5d 	bl	8006a00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006354:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	609a      	str	r2, [r3, #8]
      break;
 800635e:	e04f      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6818      	ldr	r0, [r3, #0]
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	6899      	ldr	r1, [r3, #8]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	685a      	ldr	r2, [r3, #4]
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	f000 fb46 	bl	8006a00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689a      	ldr	r2, [r3, #8]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006382:	609a      	str	r2, [r3, #8]
      break;
 8006384:	e03c      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6818      	ldr	r0, [r3, #0]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	6859      	ldr	r1, [r3, #4]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	461a      	mov	r2, r3
 8006394:	f000 faba 	bl	800690c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2150      	movs	r1, #80	; 0x50
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 fb13 	bl	80069ca <TIM_ITRx_SetConfig>
      break;
 80063a4:	e02c      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6818      	ldr	r0, [r3, #0]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	6859      	ldr	r1, [r3, #4]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	461a      	mov	r2, r3
 80063b4:	f000 fad9 	bl	800696a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2160      	movs	r1, #96	; 0x60
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 fb03 	bl	80069ca <TIM_ITRx_SetConfig>
      break;
 80063c4:	e01c      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6818      	ldr	r0, [r3, #0]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	6859      	ldr	r1, [r3, #4]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	461a      	mov	r2, r3
 80063d4:	f000 fa9a 	bl	800690c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2140      	movs	r1, #64	; 0x40
 80063de:	4618      	mov	r0, r3
 80063e0:	f000 faf3 	bl	80069ca <TIM_ITRx_SetConfig>
      break;
 80063e4:	e00c      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4619      	mov	r1, r3
 80063f0:	4610      	mov	r0, r2
 80063f2:	f000 faea 	bl	80069ca <TIM_ITRx_SetConfig>
      break;
 80063f6:	e003      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	73fb      	strb	r3, [r7, #15]
      break;
 80063fc:	e000      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80063fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006410:	7bfb      	ldrb	r3, [r7, #15]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800641a:	b480      	push	{r7}
 800641c:	b083      	sub	sp, #12
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006422:	bf00      	nop
 8006424:	370c      	adds	r7, #12
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800642e:	b480      	push	{r7}
 8006430:	b083      	sub	sp, #12
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006436:	bf00      	nop
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006442:	b480      	push	{r7}
 8006444:	b083      	sub	sp, #12
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800644a:	bf00      	nop
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006456:	b480      	push	{r7}
 8006458:	b083      	sub	sp, #12
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800645e:	bf00      	nop
 8006460:	370c      	adds	r7, #12
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
	...

0800646c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a40      	ldr	r2, [pc, #256]	; (8006580 <TIM_Base_SetConfig+0x114>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d013      	beq.n	80064ac <TIM_Base_SetConfig+0x40>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800648a:	d00f      	beq.n	80064ac <TIM_Base_SetConfig+0x40>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a3d      	ldr	r2, [pc, #244]	; (8006584 <TIM_Base_SetConfig+0x118>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d00b      	beq.n	80064ac <TIM_Base_SetConfig+0x40>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a3c      	ldr	r2, [pc, #240]	; (8006588 <TIM_Base_SetConfig+0x11c>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d007      	beq.n	80064ac <TIM_Base_SetConfig+0x40>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a3b      	ldr	r2, [pc, #236]	; (800658c <TIM_Base_SetConfig+0x120>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d003      	beq.n	80064ac <TIM_Base_SetConfig+0x40>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a3a      	ldr	r2, [pc, #232]	; (8006590 <TIM_Base_SetConfig+0x124>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d108      	bne.n	80064be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a2f      	ldr	r2, [pc, #188]	; (8006580 <TIM_Base_SetConfig+0x114>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d02b      	beq.n	800651e <TIM_Base_SetConfig+0xb2>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064cc:	d027      	beq.n	800651e <TIM_Base_SetConfig+0xb2>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a2c      	ldr	r2, [pc, #176]	; (8006584 <TIM_Base_SetConfig+0x118>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d023      	beq.n	800651e <TIM_Base_SetConfig+0xb2>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a2b      	ldr	r2, [pc, #172]	; (8006588 <TIM_Base_SetConfig+0x11c>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d01f      	beq.n	800651e <TIM_Base_SetConfig+0xb2>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a2a      	ldr	r2, [pc, #168]	; (800658c <TIM_Base_SetConfig+0x120>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d01b      	beq.n	800651e <TIM_Base_SetConfig+0xb2>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a29      	ldr	r2, [pc, #164]	; (8006590 <TIM_Base_SetConfig+0x124>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d017      	beq.n	800651e <TIM_Base_SetConfig+0xb2>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a28      	ldr	r2, [pc, #160]	; (8006594 <TIM_Base_SetConfig+0x128>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d013      	beq.n	800651e <TIM_Base_SetConfig+0xb2>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a27      	ldr	r2, [pc, #156]	; (8006598 <TIM_Base_SetConfig+0x12c>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d00f      	beq.n	800651e <TIM_Base_SetConfig+0xb2>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a26      	ldr	r2, [pc, #152]	; (800659c <TIM_Base_SetConfig+0x130>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d00b      	beq.n	800651e <TIM_Base_SetConfig+0xb2>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a25      	ldr	r2, [pc, #148]	; (80065a0 <TIM_Base_SetConfig+0x134>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d007      	beq.n	800651e <TIM_Base_SetConfig+0xb2>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a24      	ldr	r2, [pc, #144]	; (80065a4 <TIM_Base_SetConfig+0x138>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d003      	beq.n	800651e <TIM_Base_SetConfig+0xb2>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a23      	ldr	r2, [pc, #140]	; (80065a8 <TIM_Base_SetConfig+0x13c>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d108      	bne.n	8006530 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	4313      	orrs	r3, r2
 800652e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	695b      	ldr	r3, [r3, #20]
 800653a:	4313      	orrs	r3, r2
 800653c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	689a      	ldr	r2, [r3, #8]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a0a      	ldr	r2, [pc, #40]	; (8006580 <TIM_Base_SetConfig+0x114>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d003      	beq.n	8006564 <TIM_Base_SetConfig+0xf8>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a0c      	ldr	r2, [pc, #48]	; (8006590 <TIM_Base_SetConfig+0x124>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d103      	bne.n	800656c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	691a      	ldr	r2, [r3, #16]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	615a      	str	r2, [r3, #20]
}
 8006572:	bf00      	nop
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	40010000 	.word	0x40010000
 8006584:	40000400 	.word	0x40000400
 8006588:	40000800 	.word	0x40000800
 800658c:	40000c00 	.word	0x40000c00
 8006590:	40010400 	.word	0x40010400
 8006594:	40014000 	.word	0x40014000
 8006598:	40014400 	.word	0x40014400
 800659c:	40014800 	.word	0x40014800
 80065a0:	40001800 	.word	0x40001800
 80065a4:	40001c00 	.word	0x40001c00
 80065a8:	40002000 	.word	0x40002000

080065ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b087      	sub	sp, #28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	f023 0201 	bic.w	r2, r3, #1
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f023 0303 	bic.w	r3, r3, #3
 80065e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f023 0302 	bic.w	r3, r3, #2
 80065f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a20      	ldr	r2, [pc, #128]	; (8006684 <TIM_OC1_SetConfig+0xd8>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d003      	beq.n	8006610 <TIM_OC1_SetConfig+0x64>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a1f      	ldr	r2, [pc, #124]	; (8006688 <TIM_OC1_SetConfig+0xdc>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d10c      	bne.n	800662a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	f023 0308 	bic.w	r3, r3, #8
 8006616:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	4313      	orrs	r3, r2
 8006620:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	f023 0304 	bic.w	r3, r3, #4
 8006628:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a15      	ldr	r2, [pc, #84]	; (8006684 <TIM_OC1_SetConfig+0xd8>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d003      	beq.n	800663a <TIM_OC1_SetConfig+0x8e>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a14      	ldr	r2, [pc, #80]	; (8006688 <TIM_OC1_SetConfig+0xdc>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d111      	bne.n	800665e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006640:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006648:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	695b      	ldr	r3, [r3, #20]
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	4313      	orrs	r3, r2
 8006652:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	699b      	ldr	r3, [r3, #24]
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	4313      	orrs	r3, r2
 800665c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	621a      	str	r2, [r3, #32]
}
 8006678:	bf00      	nop
 800667a:	371c      	adds	r7, #28
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr
 8006684:	40010000 	.word	0x40010000
 8006688:	40010400 	.word	0x40010400

0800668c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800668c:	b480      	push	{r7}
 800668e:	b087      	sub	sp, #28
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	f023 0210 	bic.w	r2, r3, #16
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	021b      	lsls	r3, r3, #8
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	f023 0320 	bic.w	r3, r3, #32
 80066d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	011b      	lsls	r3, r3, #4
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a22      	ldr	r2, [pc, #136]	; (8006770 <TIM_OC2_SetConfig+0xe4>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d003      	beq.n	80066f4 <TIM_OC2_SetConfig+0x68>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a21      	ldr	r2, [pc, #132]	; (8006774 <TIM_OC2_SetConfig+0xe8>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d10d      	bne.n	8006710 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	011b      	lsls	r3, r3, #4
 8006702:	697a      	ldr	r2, [r7, #20]
 8006704:	4313      	orrs	r3, r2
 8006706:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800670e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a17      	ldr	r2, [pc, #92]	; (8006770 <TIM_OC2_SetConfig+0xe4>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d003      	beq.n	8006720 <TIM_OC2_SetConfig+0x94>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a16      	ldr	r2, [pc, #88]	; (8006774 <TIM_OC2_SetConfig+0xe8>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d113      	bne.n	8006748 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006726:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800672e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	695b      	ldr	r3, [r3, #20]
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	4313      	orrs	r3, r2
 800673a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	4313      	orrs	r3, r2
 8006746:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	685a      	ldr	r2, [r3, #4]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	621a      	str	r2, [r3, #32]
}
 8006762:	bf00      	nop
 8006764:	371c      	adds	r7, #28
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	40010000 	.word	0x40010000
 8006774:	40010400 	.word	0x40010400

08006778 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006778:	b480      	push	{r7}
 800677a:	b087      	sub	sp, #28
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 0303 	bic.w	r3, r3, #3
 80067ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	021b      	lsls	r3, r3, #8
 80067c8:	697a      	ldr	r2, [r7, #20]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a21      	ldr	r2, [pc, #132]	; (8006858 <TIM_OC3_SetConfig+0xe0>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d003      	beq.n	80067de <TIM_OC3_SetConfig+0x66>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a20      	ldr	r2, [pc, #128]	; (800685c <TIM_OC3_SetConfig+0xe4>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d10d      	bne.n	80067fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	021b      	lsls	r3, r3, #8
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a16      	ldr	r2, [pc, #88]	; (8006858 <TIM_OC3_SetConfig+0xe0>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d003      	beq.n	800680a <TIM_OC3_SetConfig+0x92>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a15      	ldr	r2, [pc, #84]	; (800685c <TIM_OC3_SetConfig+0xe4>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d113      	bne.n	8006832 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006810:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006818:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	011b      	lsls	r3, r3, #4
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	4313      	orrs	r3, r2
 8006824:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	011b      	lsls	r3, r3, #4
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	4313      	orrs	r3, r2
 8006830:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	621a      	str	r2, [r3, #32]
}
 800684c:	bf00      	nop
 800684e:	371c      	adds	r7, #28
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr
 8006858:	40010000 	.word	0x40010000
 800685c:	40010400 	.word	0x40010400

08006860 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006860:	b480      	push	{r7}
 8006862:	b087      	sub	sp, #28
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800688e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	021b      	lsls	r3, r3, #8
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	031b      	lsls	r3, r3, #12
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a12      	ldr	r2, [pc, #72]	; (8006904 <TIM_OC4_SetConfig+0xa4>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d003      	beq.n	80068c8 <TIM_OC4_SetConfig+0x68>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a11      	ldr	r2, [pc, #68]	; (8006908 <TIM_OC4_SetConfig+0xa8>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d109      	bne.n	80068dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	019b      	lsls	r3, r3, #6
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	4313      	orrs	r3, r2
 80068da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	621a      	str	r2, [r3, #32]
}
 80068f6:	bf00      	nop
 80068f8:	371c      	adds	r7, #28
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	40010000 	.word	0x40010000
 8006908:	40010400 	.word	0x40010400

0800690c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800690c:	b480      	push	{r7}
 800690e:	b087      	sub	sp, #28
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6a1b      	ldr	r3, [r3, #32]
 800691c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	f023 0201 	bic.w	r2, r3, #1
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006936:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	011b      	lsls	r3, r3, #4
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	4313      	orrs	r3, r2
 8006940:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	f023 030a 	bic.w	r3, r3, #10
 8006948:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	4313      	orrs	r3, r2
 8006950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	693a      	ldr	r2, [r7, #16]
 8006956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	621a      	str	r2, [r3, #32]
}
 800695e:	bf00      	nop
 8006960:	371c      	adds	r7, #28
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800696a:	b480      	push	{r7}
 800696c:	b087      	sub	sp, #28
 800696e:	af00      	add	r7, sp, #0
 8006970:	60f8      	str	r0, [r7, #12]
 8006972:	60b9      	str	r1, [r7, #8]
 8006974:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	f023 0210 	bic.w	r2, r3, #16
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6a1b      	ldr	r3, [r3, #32]
 800698c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006994:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	031b      	lsls	r3, r3, #12
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	4313      	orrs	r3, r2
 800699e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	011b      	lsls	r3, r3, #4
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	621a      	str	r2, [r3, #32]
}
 80069be:	bf00      	nop
 80069c0:	371c      	adds	r7, #28
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr

080069ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069ca:	b480      	push	{r7}
 80069cc:	b085      	sub	sp, #20
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
 80069d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	f043 0307 	orr.w	r3, r3, #7
 80069ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	609a      	str	r2, [r3, #8]
}
 80069f4:	bf00      	nop
 80069f6:	3714      	adds	r7, #20
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b087      	sub	sp, #28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
 8006a0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	021a      	lsls	r2, r3, #8
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	431a      	orrs	r2, r3
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	697a      	ldr	r2, [r7, #20]
 8006a32:	609a      	str	r2, [r3, #8]
}
 8006a34:	bf00      	nop
 8006a36:	371c      	adds	r7, #28
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b087      	sub	sp, #28
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	f003 031f 	and.w	r3, r3, #31
 8006a52:	2201      	movs	r2, #1
 8006a54:	fa02 f303 	lsl.w	r3, r2, r3
 8006a58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6a1a      	ldr	r2, [r3, #32]
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	43db      	mvns	r3, r3
 8006a62:	401a      	ands	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6a1a      	ldr	r2, [r3, #32]
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	f003 031f 	and.w	r3, r3, #31
 8006a72:	6879      	ldr	r1, [r7, #4]
 8006a74:	fa01 f303 	lsl.w	r3, r1, r3
 8006a78:	431a      	orrs	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	621a      	str	r2, [r3, #32]
}
 8006a7e:	bf00      	nop
 8006a80:	371c      	adds	r7, #28
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr
	...

08006a8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d101      	bne.n	8006aa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	e05a      	b.n	8006b5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2202      	movs	r2, #2
 8006ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a21      	ldr	r2, [pc, #132]	; (8006b68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d022      	beq.n	8006b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006af0:	d01d      	beq.n	8006b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a1d      	ldr	r2, [pc, #116]	; (8006b6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d018      	beq.n	8006b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a1b      	ldr	r2, [pc, #108]	; (8006b70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d013      	beq.n	8006b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a1a      	ldr	r2, [pc, #104]	; (8006b74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d00e      	beq.n	8006b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a18      	ldr	r2, [pc, #96]	; (8006b78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d009      	beq.n	8006b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a17      	ldr	r2, [pc, #92]	; (8006b7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d004      	beq.n	8006b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a15      	ldr	r2, [pc, #84]	; (8006b80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d10c      	bne.n	8006b48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68ba      	ldr	r2, [r7, #8]
 8006b46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3714      	adds	r7, #20
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	40010000 	.word	0x40010000
 8006b6c:	40000400 	.word	0x40000400
 8006b70:	40000800 	.word	0x40000800
 8006b74:	40000c00 	.word	0x40000c00
 8006b78:	40010400 	.word	0x40010400
 8006b7c:	40014000 	.word	0x40014000
 8006b80:	40001800 	.word	0x40001800

08006b84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d101      	bne.n	8006bbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e03f      	b.n	8006c3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d106      	bne.n	8006bd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7fb fb86 	bl	80022e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2224      	movs	r2, #36	; 0x24
 8006bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68da      	ldr	r2, [r3, #12]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 f929 	bl	8006e48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	691a      	ldr	r2, [r3, #16]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	695a      	ldr	r2, [r3, #20]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68da      	ldr	r2, [r3, #12]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2220      	movs	r2, #32
 8006c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2220      	movs	r2, #32
 8006c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b08a      	sub	sp, #40	; 0x28
 8006c4a:	af02      	add	r7, sp, #8
 8006c4c:	60f8      	str	r0, [r7, #12]
 8006c4e:	60b9      	str	r1, [r7, #8]
 8006c50:	603b      	str	r3, [r7, #0]
 8006c52:	4613      	mov	r3, r2
 8006c54:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c56:	2300      	movs	r3, #0
 8006c58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b20      	cmp	r3, #32
 8006c64:	d17c      	bne.n	8006d60 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d002      	beq.n	8006c72 <HAL_UART_Transmit+0x2c>
 8006c6c:	88fb      	ldrh	r3, [r7, #6]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e075      	b.n	8006d62 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d101      	bne.n	8006c84 <HAL_UART_Transmit+0x3e>
 8006c80:	2302      	movs	r3, #2
 8006c82:	e06e      	b.n	8006d62 <HAL_UART_Transmit+0x11c>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2221      	movs	r2, #33	; 0x21
 8006c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c9a:	f7fb fe85 	bl	80029a8 <HAL_GetTick>
 8006c9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	88fa      	ldrh	r2, [r7, #6]
 8006ca4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	88fa      	ldrh	r2, [r7, #6]
 8006caa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cb4:	d108      	bne.n	8006cc8 <HAL_UART_Transmit+0x82>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d104      	bne.n	8006cc8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	61bb      	str	r3, [r7, #24]
 8006cc6:	e003      	b.n	8006cd0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006cd8:	e02a      	b.n	8006d30 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	2180      	movs	r1, #128	; 0x80
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f000 f840 	bl	8006d6a <UART_WaitOnFlagUntilTimeout>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d001      	beq.n	8006cf4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e036      	b.n	8006d62 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10b      	bne.n	8006d12 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	881b      	ldrh	r3, [r3, #0]
 8006cfe:	461a      	mov	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	3302      	adds	r3, #2
 8006d0e:	61bb      	str	r3, [r7, #24]
 8006d10:	e007      	b.n	8006d22 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	781a      	ldrb	r2, [r3, #0]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1cf      	bne.n	8006cda <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	9300      	str	r3, [sp, #0]
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	2200      	movs	r2, #0
 8006d42:	2140      	movs	r1, #64	; 0x40
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f000 f810 	bl	8006d6a <UART_WaitOnFlagUntilTimeout>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d001      	beq.n	8006d54 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	e006      	b.n	8006d62 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2220      	movs	r2, #32
 8006d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	e000      	b.n	8006d62 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006d60:	2302      	movs	r3, #2
  }
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3720      	adds	r7, #32
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b090      	sub	sp, #64	; 0x40
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	60f8      	str	r0, [r7, #12]
 8006d72:	60b9      	str	r1, [r7, #8]
 8006d74:	603b      	str	r3, [r7, #0]
 8006d76:	4613      	mov	r3, r2
 8006d78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d7a:	e050      	b.n	8006e1e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d82:	d04c      	beq.n	8006e1e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d007      	beq.n	8006d9a <UART_WaitOnFlagUntilTimeout+0x30>
 8006d8a:	f7fb fe0d 	bl	80029a8 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d241      	bcs.n	8006e1e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	330c      	adds	r3, #12
 8006da0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da4:	e853 3f00 	ldrex	r3, [r3]
 8006da8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006db0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	330c      	adds	r3, #12
 8006db8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006dba:	637a      	str	r2, [r7, #52]	; 0x34
 8006dbc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006dc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dc2:	e841 2300 	strex	r3, r2, [r1]
 8006dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1e5      	bne.n	8006d9a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	3314      	adds	r3, #20
 8006dd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	e853 3f00 	ldrex	r3, [r3]
 8006ddc:	613b      	str	r3, [r7, #16]
   return(result);
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	f023 0301 	bic.w	r3, r3, #1
 8006de4:	63bb      	str	r3, [r7, #56]	; 0x38
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	3314      	adds	r3, #20
 8006dec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dee:	623a      	str	r2, [r7, #32]
 8006df0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df2:	69f9      	ldr	r1, [r7, #28]
 8006df4:	6a3a      	ldr	r2, [r7, #32]
 8006df6:	e841 2300 	strex	r3, r2, [r1]
 8006dfa:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1e5      	bne.n	8006dce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2220      	movs	r2, #32
 8006e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2220      	movs	r2, #32
 8006e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e00f      	b.n	8006e3e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	4013      	ands	r3, r2
 8006e28:	68ba      	ldr	r2, [r7, #8]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	bf0c      	ite	eq
 8006e2e:	2301      	moveq	r3, #1
 8006e30:	2300      	movne	r3, #0
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	461a      	mov	r2, r3
 8006e36:	79fb      	ldrb	r3, [r7, #7]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d09f      	beq.n	8006d7c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3740      	adds	r7, #64	; 0x40
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
	...

08006e48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e4c:	b09f      	sub	sp, #124	; 0x7c
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e5e:	68d9      	ldr	r1, [r3, #12]
 8006e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	ea40 0301 	orr.w	r3, r0, r1
 8006e68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e6c:	689a      	ldr	r2, [r3, #8]
 8006e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	431a      	orrs	r2, r3
 8006e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e76:	695b      	ldr	r3, [r3, #20]
 8006e78:	431a      	orrs	r2, r3
 8006e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e7c:	69db      	ldr	r3, [r3, #28]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006e8c:	f021 010c 	bic.w	r1, r1, #12
 8006e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e96:	430b      	orrs	r3, r1
 8006e98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	695b      	ldr	r3, [r3, #20]
 8006ea0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ea6:	6999      	ldr	r1, [r3, #24]
 8006ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	ea40 0301 	orr.w	r3, r0, r1
 8006eb0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	4bc5      	ldr	r3, [pc, #788]	; (80071cc <UART_SetConfig+0x384>)
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d004      	beq.n	8006ec6 <UART_SetConfig+0x7e>
 8006ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	4bc3      	ldr	r3, [pc, #780]	; (80071d0 <UART_SetConfig+0x388>)
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d103      	bne.n	8006ece <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ec6:	f7fe f8f9 	bl	80050bc <HAL_RCC_GetPCLK2Freq>
 8006eca:	6778      	str	r0, [r7, #116]	; 0x74
 8006ecc:	e002      	b.n	8006ed4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ece:	f7fe f8e1 	bl	8005094 <HAL_RCC_GetPCLK1Freq>
 8006ed2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ed6:	69db      	ldr	r3, [r3, #28]
 8006ed8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006edc:	f040 80b6 	bne.w	800704c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ee0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ee2:	461c      	mov	r4, r3
 8006ee4:	f04f 0500 	mov.w	r5, #0
 8006ee8:	4622      	mov	r2, r4
 8006eea:	462b      	mov	r3, r5
 8006eec:	1891      	adds	r1, r2, r2
 8006eee:	6439      	str	r1, [r7, #64]	; 0x40
 8006ef0:	415b      	adcs	r3, r3
 8006ef2:	647b      	str	r3, [r7, #68]	; 0x44
 8006ef4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006ef8:	1912      	adds	r2, r2, r4
 8006efa:	eb45 0303 	adc.w	r3, r5, r3
 8006efe:	f04f 0000 	mov.w	r0, #0
 8006f02:	f04f 0100 	mov.w	r1, #0
 8006f06:	00d9      	lsls	r1, r3, #3
 8006f08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f0c:	00d0      	lsls	r0, r2, #3
 8006f0e:	4602      	mov	r2, r0
 8006f10:	460b      	mov	r3, r1
 8006f12:	1911      	adds	r1, r2, r4
 8006f14:	6639      	str	r1, [r7, #96]	; 0x60
 8006f16:	416b      	adcs	r3, r5
 8006f18:	667b      	str	r3, [r7, #100]	; 0x64
 8006f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	f04f 0300 	mov.w	r3, #0
 8006f24:	1891      	adds	r1, r2, r2
 8006f26:	63b9      	str	r1, [r7, #56]	; 0x38
 8006f28:	415b      	adcs	r3, r3
 8006f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f30:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006f34:	f7f9 fdba 	bl	8000aac <__aeabi_uldivmod>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	4ba5      	ldr	r3, [pc, #660]	; (80071d4 <UART_SetConfig+0x38c>)
 8006f3e:	fba3 2302 	umull	r2, r3, r3, r2
 8006f42:	095b      	lsrs	r3, r3, #5
 8006f44:	011e      	lsls	r6, r3, #4
 8006f46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f48:	461c      	mov	r4, r3
 8006f4a:	f04f 0500 	mov.w	r5, #0
 8006f4e:	4622      	mov	r2, r4
 8006f50:	462b      	mov	r3, r5
 8006f52:	1891      	adds	r1, r2, r2
 8006f54:	6339      	str	r1, [r7, #48]	; 0x30
 8006f56:	415b      	adcs	r3, r3
 8006f58:	637b      	str	r3, [r7, #52]	; 0x34
 8006f5a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006f5e:	1912      	adds	r2, r2, r4
 8006f60:	eb45 0303 	adc.w	r3, r5, r3
 8006f64:	f04f 0000 	mov.w	r0, #0
 8006f68:	f04f 0100 	mov.w	r1, #0
 8006f6c:	00d9      	lsls	r1, r3, #3
 8006f6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f72:	00d0      	lsls	r0, r2, #3
 8006f74:	4602      	mov	r2, r0
 8006f76:	460b      	mov	r3, r1
 8006f78:	1911      	adds	r1, r2, r4
 8006f7a:	65b9      	str	r1, [r7, #88]	; 0x58
 8006f7c:	416b      	adcs	r3, r5
 8006f7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	461a      	mov	r2, r3
 8006f86:	f04f 0300 	mov.w	r3, #0
 8006f8a:	1891      	adds	r1, r2, r2
 8006f8c:	62b9      	str	r1, [r7, #40]	; 0x28
 8006f8e:	415b      	adcs	r3, r3
 8006f90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f96:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006f9a:	f7f9 fd87 	bl	8000aac <__aeabi_uldivmod>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	4b8c      	ldr	r3, [pc, #560]	; (80071d4 <UART_SetConfig+0x38c>)
 8006fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8006fa8:	095b      	lsrs	r3, r3, #5
 8006faa:	2164      	movs	r1, #100	; 0x64
 8006fac:	fb01 f303 	mul.w	r3, r1, r3
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	00db      	lsls	r3, r3, #3
 8006fb4:	3332      	adds	r3, #50	; 0x32
 8006fb6:	4a87      	ldr	r2, [pc, #540]	; (80071d4 <UART_SetConfig+0x38c>)
 8006fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fbc:	095b      	lsrs	r3, r3, #5
 8006fbe:	005b      	lsls	r3, r3, #1
 8006fc0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006fc4:	441e      	add	r6, r3
 8006fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f04f 0100 	mov.w	r1, #0
 8006fce:	4602      	mov	r2, r0
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	1894      	adds	r4, r2, r2
 8006fd4:	623c      	str	r4, [r7, #32]
 8006fd6:	415b      	adcs	r3, r3
 8006fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8006fda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006fde:	1812      	adds	r2, r2, r0
 8006fe0:	eb41 0303 	adc.w	r3, r1, r3
 8006fe4:	f04f 0400 	mov.w	r4, #0
 8006fe8:	f04f 0500 	mov.w	r5, #0
 8006fec:	00dd      	lsls	r5, r3, #3
 8006fee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006ff2:	00d4      	lsls	r4, r2, #3
 8006ff4:	4622      	mov	r2, r4
 8006ff6:	462b      	mov	r3, r5
 8006ff8:	1814      	adds	r4, r2, r0
 8006ffa:	653c      	str	r4, [r7, #80]	; 0x50
 8006ffc:	414b      	adcs	r3, r1
 8006ffe:	657b      	str	r3, [r7, #84]	; 0x54
 8007000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	461a      	mov	r2, r3
 8007006:	f04f 0300 	mov.w	r3, #0
 800700a:	1891      	adds	r1, r2, r2
 800700c:	61b9      	str	r1, [r7, #24]
 800700e:	415b      	adcs	r3, r3
 8007010:	61fb      	str	r3, [r7, #28]
 8007012:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007016:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800701a:	f7f9 fd47 	bl	8000aac <__aeabi_uldivmod>
 800701e:	4602      	mov	r2, r0
 8007020:	460b      	mov	r3, r1
 8007022:	4b6c      	ldr	r3, [pc, #432]	; (80071d4 <UART_SetConfig+0x38c>)
 8007024:	fba3 1302 	umull	r1, r3, r3, r2
 8007028:	095b      	lsrs	r3, r3, #5
 800702a:	2164      	movs	r1, #100	; 0x64
 800702c:	fb01 f303 	mul.w	r3, r1, r3
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	00db      	lsls	r3, r3, #3
 8007034:	3332      	adds	r3, #50	; 0x32
 8007036:	4a67      	ldr	r2, [pc, #412]	; (80071d4 <UART_SetConfig+0x38c>)
 8007038:	fba2 2303 	umull	r2, r3, r2, r3
 800703c:	095b      	lsrs	r3, r3, #5
 800703e:	f003 0207 	and.w	r2, r3, #7
 8007042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4432      	add	r2, r6
 8007048:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800704a:	e0b9      	b.n	80071c0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800704c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800704e:	461c      	mov	r4, r3
 8007050:	f04f 0500 	mov.w	r5, #0
 8007054:	4622      	mov	r2, r4
 8007056:	462b      	mov	r3, r5
 8007058:	1891      	adds	r1, r2, r2
 800705a:	6139      	str	r1, [r7, #16]
 800705c:	415b      	adcs	r3, r3
 800705e:	617b      	str	r3, [r7, #20]
 8007060:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007064:	1912      	adds	r2, r2, r4
 8007066:	eb45 0303 	adc.w	r3, r5, r3
 800706a:	f04f 0000 	mov.w	r0, #0
 800706e:	f04f 0100 	mov.w	r1, #0
 8007072:	00d9      	lsls	r1, r3, #3
 8007074:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007078:	00d0      	lsls	r0, r2, #3
 800707a:	4602      	mov	r2, r0
 800707c:	460b      	mov	r3, r1
 800707e:	eb12 0804 	adds.w	r8, r2, r4
 8007082:	eb43 0905 	adc.w	r9, r3, r5
 8007086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	4618      	mov	r0, r3
 800708c:	f04f 0100 	mov.w	r1, #0
 8007090:	f04f 0200 	mov.w	r2, #0
 8007094:	f04f 0300 	mov.w	r3, #0
 8007098:	008b      	lsls	r3, r1, #2
 800709a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800709e:	0082      	lsls	r2, r0, #2
 80070a0:	4640      	mov	r0, r8
 80070a2:	4649      	mov	r1, r9
 80070a4:	f7f9 fd02 	bl	8000aac <__aeabi_uldivmod>
 80070a8:	4602      	mov	r2, r0
 80070aa:	460b      	mov	r3, r1
 80070ac:	4b49      	ldr	r3, [pc, #292]	; (80071d4 <UART_SetConfig+0x38c>)
 80070ae:	fba3 2302 	umull	r2, r3, r3, r2
 80070b2:	095b      	lsrs	r3, r3, #5
 80070b4:	011e      	lsls	r6, r3, #4
 80070b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070b8:	4618      	mov	r0, r3
 80070ba:	f04f 0100 	mov.w	r1, #0
 80070be:	4602      	mov	r2, r0
 80070c0:	460b      	mov	r3, r1
 80070c2:	1894      	adds	r4, r2, r2
 80070c4:	60bc      	str	r4, [r7, #8]
 80070c6:	415b      	adcs	r3, r3
 80070c8:	60fb      	str	r3, [r7, #12]
 80070ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80070ce:	1812      	adds	r2, r2, r0
 80070d0:	eb41 0303 	adc.w	r3, r1, r3
 80070d4:	f04f 0400 	mov.w	r4, #0
 80070d8:	f04f 0500 	mov.w	r5, #0
 80070dc:	00dd      	lsls	r5, r3, #3
 80070de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80070e2:	00d4      	lsls	r4, r2, #3
 80070e4:	4622      	mov	r2, r4
 80070e6:	462b      	mov	r3, r5
 80070e8:	1814      	adds	r4, r2, r0
 80070ea:	64bc      	str	r4, [r7, #72]	; 0x48
 80070ec:	414b      	adcs	r3, r1
 80070ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	4618      	mov	r0, r3
 80070f6:	f04f 0100 	mov.w	r1, #0
 80070fa:	f04f 0200 	mov.w	r2, #0
 80070fe:	f04f 0300 	mov.w	r3, #0
 8007102:	008b      	lsls	r3, r1, #2
 8007104:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007108:	0082      	lsls	r2, r0, #2
 800710a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800710e:	f7f9 fccd 	bl	8000aac <__aeabi_uldivmod>
 8007112:	4602      	mov	r2, r0
 8007114:	460b      	mov	r3, r1
 8007116:	4b2f      	ldr	r3, [pc, #188]	; (80071d4 <UART_SetConfig+0x38c>)
 8007118:	fba3 1302 	umull	r1, r3, r3, r2
 800711c:	095b      	lsrs	r3, r3, #5
 800711e:	2164      	movs	r1, #100	; 0x64
 8007120:	fb01 f303 	mul.w	r3, r1, r3
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	011b      	lsls	r3, r3, #4
 8007128:	3332      	adds	r3, #50	; 0x32
 800712a:	4a2a      	ldr	r2, [pc, #168]	; (80071d4 <UART_SetConfig+0x38c>)
 800712c:	fba2 2303 	umull	r2, r3, r2, r3
 8007130:	095b      	lsrs	r3, r3, #5
 8007132:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007136:	441e      	add	r6, r3
 8007138:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800713a:	4618      	mov	r0, r3
 800713c:	f04f 0100 	mov.w	r1, #0
 8007140:	4602      	mov	r2, r0
 8007142:	460b      	mov	r3, r1
 8007144:	1894      	adds	r4, r2, r2
 8007146:	603c      	str	r4, [r7, #0]
 8007148:	415b      	adcs	r3, r3
 800714a:	607b      	str	r3, [r7, #4]
 800714c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007150:	1812      	adds	r2, r2, r0
 8007152:	eb41 0303 	adc.w	r3, r1, r3
 8007156:	f04f 0400 	mov.w	r4, #0
 800715a:	f04f 0500 	mov.w	r5, #0
 800715e:	00dd      	lsls	r5, r3, #3
 8007160:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007164:	00d4      	lsls	r4, r2, #3
 8007166:	4622      	mov	r2, r4
 8007168:	462b      	mov	r3, r5
 800716a:	eb12 0a00 	adds.w	sl, r2, r0
 800716e:	eb43 0b01 	adc.w	fp, r3, r1
 8007172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	4618      	mov	r0, r3
 8007178:	f04f 0100 	mov.w	r1, #0
 800717c:	f04f 0200 	mov.w	r2, #0
 8007180:	f04f 0300 	mov.w	r3, #0
 8007184:	008b      	lsls	r3, r1, #2
 8007186:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800718a:	0082      	lsls	r2, r0, #2
 800718c:	4650      	mov	r0, sl
 800718e:	4659      	mov	r1, fp
 8007190:	f7f9 fc8c 	bl	8000aac <__aeabi_uldivmod>
 8007194:	4602      	mov	r2, r0
 8007196:	460b      	mov	r3, r1
 8007198:	4b0e      	ldr	r3, [pc, #56]	; (80071d4 <UART_SetConfig+0x38c>)
 800719a:	fba3 1302 	umull	r1, r3, r3, r2
 800719e:	095b      	lsrs	r3, r3, #5
 80071a0:	2164      	movs	r1, #100	; 0x64
 80071a2:	fb01 f303 	mul.w	r3, r1, r3
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	011b      	lsls	r3, r3, #4
 80071aa:	3332      	adds	r3, #50	; 0x32
 80071ac:	4a09      	ldr	r2, [pc, #36]	; (80071d4 <UART_SetConfig+0x38c>)
 80071ae:	fba2 2303 	umull	r2, r3, r2, r3
 80071b2:	095b      	lsrs	r3, r3, #5
 80071b4:	f003 020f 	and.w	r2, r3, #15
 80071b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4432      	add	r2, r6
 80071be:	609a      	str	r2, [r3, #8]
}
 80071c0:	bf00      	nop
 80071c2:	377c      	adds	r7, #124	; 0x7c
 80071c4:	46bd      	mov	sp, r7
 80071c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ca:	bf00      	nop
 80071cc:	40011000 	.word	0x40011000
 80071d0:	40011400 	.word	0x40011400
 80071d4:	51eb851f 	.word	0x51eb851f

080071d8 <__errno>:
 80071d8:	4b01      	ldr	r3, [pc, #4]	; (80071e0 <__errno+0x8>)
 80071da:	6818      	ldr	r0, [r3, #0]
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	2000005c 	.word	0x2000005c

080071e4 <__libc_init_array>:
 80071e4:	b570      	push	{r4, r5, r6, lr}
 80071e6:	4d0d      	ldr	r5, [pc, #52]	; (800721c <__libc_init_array+0x38>)
 80071e8:	4c0d      	ldr	r4, [pc, #52]	; (8007220 <__libc_init_array+0x3c>)
 80071ea:	1b64      	subs	r4, r4, r5
 80071ec:	10a4      	asrs	r4, r4, #2
 80071ee:	2600      	movs	r6, #0
 80071f0:	42a6      	cmp	r6, r4
 80071f2:	d109      	bne.n	8007208 <__libc_init_array+0x24>
 80071f4:	4d0b      	ldr	r5, [pc, #44]	; (8007224 <__libc_init_array+0x40>)
 80071f6:	4c0c      	ldr	r4, [pc, #48]	; (8007228 <__libc_init_array+0x44>)
 80071f8:	f000 fc4e 	bl	8007a98 <_init>
 80071fc:	1b64      	subs	r4, r4, r5
 80071fe:	10a4      	asrs	r4, r4, #2
 8007200:	2600      	movs	r6, #0
 8007202:	42a6      	cmp	r6, r4
 8007204:	d105      	bne.n	8007212 <__libc_init_array+0x2e>
 8007206:	bd70      	pop	{r4, r5, r6, pc}
 8007208:	f855 3b04 	ldr.w	r3, [r5], #4
 800720c:	4798      	blx	r3
 800720e:	3601      	adds	r6, #1
 8007210:	e7ee      	b.n	80071f0 <__libc_init_array+0xc>
 8007212:	f855 3b04 	ldr.w	r3, [r5], #4
 8007216:	4798      	blx	r3
 8007218:	3601      	adds	r6, #1
 800721a:	e7f2      	b.n	8007202 <__libc_init_array+0x1e>
 800721c:	08007c14 	.word	0x08007c14
 8007220:	08007c14 	.word	0x08007c14
 8007224:	08007c14 	.word	0x08007c14
 8007228:	08007c18 	.word	0x08007c18

0800722c <memset>:
 800722c:	4402      	add	r2, r0
 800722e:	4603      	mov	r3, r0
 8007230:	4293      	cmp	r3, r2
 8007232:	d100      	bne.n	8007236 <memset+0xa>
 8007234:	4770      	bx	lr
 8007236:	f803 1b01 	strb.w	r1, [r3], #1
 800723a:	e7f9      	b.n	8007230 <memset+0x4>

0800723c <siprintf>:
 800723c:	b40e      	push	{r1, r2, r3}
 800723e:	b500      	push	{lr}
 8007240:	b09c      	sub	sp, #112	; 0x70
 8007242:	ab1d      	add	r3, sp, #116	; 0x74
 8007244:	9002      	str	r0, [sp, #8]
 8007246:	9006      	str	r0, [sp, #24]
 8007248:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800724c:	4809      	ldr	r0, [pc, #36]	; (8007274 <siprintf+0x38>)
 800724e:	9107      	str	r1, [sp, #28]
 8007250:	9104      	str	r1, [sp, #16]
 8007252:	4909      	ldr	r1, [pc, #36]	; (8007278 <siprintf+0x3c>)
 8007254:	f853 2b04 	ldr.w	r2, [r3], #4
 8007258:	9105      	str	r1, [sp, #20]
 800725a:	6800      	ldr	r0, [r0, #0]
 800725c:	9301      	str	r3, [sp, #4]
 800725e:	a902      	add	r1, sp, #8
 8007260:	f000 f868 	bl	8007334 <_svfiprintf_r>
 8007264:	9b02      	ldr	r3, [sp, #8]
 8007266:	2200      	movs	r2, #0
 8007268:	701a      	strb	r2, [r3, #0]
 800726a:	b01c      	add	sp, #112	; 0x70
 800726c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007270:	b003      	add	sp, #12
 8007272:	4770      	bx	lr
 8007274:	2000005c 	.word	0x2000005c
 8007278:	ffff0208 	.word	0xffff0208

0800727c <__ssputs_r>:
 800727c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007280:	688e      	ldr	r6, [r1, #8]
 8007282:	429e      	cmp	r6, r3
 8007284:	4682      	mov	sl, r0
 8007286:	460c      	mov	r4, r1
 8007288:	4690      	mov	r8, r2
 800728a:	461f      	mov	r7, r3
 800728c:	d838      	bhi.n	8007300 <__ssputs_r+0x84>
 800728e:	898a      	ldrh	r2, [r1, #12]
 8007290:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007294:	d032      	beq.n	80072fc <__ssputs_r+0x80>
 8007296:	6825      	ldr	r5, [r4, #0]
 8007298:	6909      	ldr	r1, [r1, #16]
 800729a:	eba5 0901 	sub.w	r9, r5, r1
 800729e:	6965      	ldr	r5, [r4, #20]
 80072a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072a8:	3301      	adds	r3, #1
 80072aa:	444b      	add	r3, r9
 80072ac:	106d      	asrs	r5, r5, #1
 80072ae:	429d      	cmp	r5, r3
 80072b0:	bf38      	it	cc
 80072b2:	461d      	movcc	r5, r3
 80072b4:	0553      	lsls	r3, r2, #21
 80072b6:	d531      	bpl.n	800731c <__ssputs_r+0xa0>
 80072b8:	4629      	mov	r1, r5
 80072ba:	f000 fb47 	bl	800794c <_malloc_r>
 80072be:	4606      	mov	r6, r0
 80072c0:	b950      	cbnz	r0, 80072d8 <__ssputs_r+0x5c>
 80072c2:	230c      	movs	r3, #12
 80072c4:	f8ca 3000 	str.w	r3, [sl]
 80072c8:	89a3      	ldrh	r3, [r4, #12]
 80072ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072ce:	81a3      	strh	r3, [r4, #12]
 80072d0:	f04f 30ff 	mov.w	r0, #4294967295
 80072d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072d8:	6921      	ldr	r1, [r4, #16]
 80072da:	464a      	mov	r2, r9
 80072dc:	f000 fabe 	bl	800785c <memcpy>
 80072e0:	89a3      	ldrh	r3, [r4, #12]
 80072e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80072e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ea:	81a3      	strh	r3, [r4, #12]
 80072ec:	6126      	str	r6, [r4, #16]
 80072ee:	6165      	str	r5, [r4, #20]
 80072f0:	444e      	add	r6, r9
 80072f2:	eba5 0509 	sub.w	r5, r5, r9
 80072f6:	6026      	str	r6, [r4, #0]
 80072f8:	60a5      	str	r5, [r4, #8]
 80072fa:	463e      	mov	r6, r7
 80072fc:	42be      	cmp	r6, r7
 80072fe:	d900      	bls.n	8007302 <__ssputs_r+0x86>
 8007300:	463e      	mov	r6, r7
 8007302:	4632      	mov	r2, r6
 8007304:	6820      	ldr	r0, [r4, #0]
 8007306:	4641      	mov	r1, r8
 8007308:	f000 fab6 	bl	8007878 <memmove>
 800730c:	68a3      	ldr	r3, [r4, #8]
 800730e:	6822      	ldr	r2, [r4, #0]
 8007310:	1b9b      	subs	r3, r3, r6
 8007312:	4432      	add	r2, r6
 8007314:	60a3      	str	r3, [r4, #8]
 8007316:	6022      	str	r2, [r4, #0]
 8007318:	2000      	movs	r0, #0
 800731a:	e7db      	b.n	80072d4 <__ssputs_r+0x58>
 800731c:	462a      	mov	r2, r5
 800731e:	f000 fb6f 	bl	8007a00 <_realloc_r>
 8007322:	4606      	mov	r6, r0
 8007324:	2800      	cmp	r0, #0
 8007326:	d1e1      	bne.n	80072ec <__ssputs_r+0x70>
 8007328:	6921      	ldr	r1, [r4, #16]
 800732a:	4650      	mov	r0, sl
 800732c:	f000 fabe 	bl	80078ac <_free_r>
 8007330:	e7c7      	b.n	80072c2 <__ssputs_r+0x46>
	...

08007334 <_svfiprintf_r>:
 8007334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007338:	4698      	mov	r8, r3
 800733a:	898b      	ldrh	r3, [r1, #12]
 800733c:	061b      	lsls	r3, r3, #24
 800733e:	b09d      	sub	sp, #116	; 0x74
 8007340:	4607      	mov	r7, r0
 8007342:	460d      	mov	r5, r1
 8007344:	4614      	mov	r4, r2
 8007346:	d50e      	bpl.n	8007366 <_svfiprintf_r+0x32>
 8007348:	690b      	ldr	r3, [r1, #16]
 800734a:	b963      	cbnz	r3, 8007366 <_svfiprintf_r+0x32>
 800734c:	2140      	movs	r1, #64	; 0x40
 800734e:	f000 fafd 	bl	800794c <_malloc_r>
 8007352:	6028      	str	r0, [r5, #0]
 8007354:	6128      	str	r0, [r5, #16]
 8007356:	b920      	cbnz	r0, 8007362 <_svfiprintf_r+0x2e>
 8007358:	230c      	movs	r3, #12
 800735a:	603b      	str	r3, [r7, #0]
 800735c:	f04f 30ff 	mov.w	r0, #4294967295
 8007360:	e0d1      	b.n	8007506 <_svfiprintf_r+0x1d2>
 8007362:	2340      	movs	r3, #64	; 0x40
 8007364:	616b      	str	r3, [r5, #20]
 8007366:	2300      	movs	r3, #0
 8007368:	9309      	str	r3, [sp, #36]	; 0x24
 800736a:	2320      	movs	r3, #32
 800736c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007370:	f8cd 800c 	str.w	r8, [sp, #12]
 8007374:	2330      	movs	r3, #48	; 0x30
 8007376:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007520 <_svfiprintf_r+0x1ec>
 800737a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800737e:	f04f 0901 	mov.w	r9, #1
 8007382:	4623      	mov	r3, r4
 8007384:	469a      	mov	sl, r3
 8007386:	f813 2b01 	ldrb.w	r2, [r3], #1
 800738a:	b10a      	cbz	r2, 8007390 <_svfiprintf_r+0x5c>
 800738c:	2a25      	cmp	r2, #37	; 0x25
 800738e:	d1f9      	bne.n	8007384 <_svfiprintf_r+0x50>
 8007390:	ebba 0b04 	subs.w	fp, sl, r4
 8007394:	d00b      	beq.n	80073ae <_svfiprintf_r+0x7a>
 8007396:	465b      	mov	r3, fp
 8007398:	4622      	mov	r2, r4
 800739a:	4629      	mov	r1, r5
 800739c:	4638      	mov	r0, r7
 800739e:	f7ff ff6d 	bl	800727c <__ssputs_r>
 80073a2:	3001      	adds	r0, #1
 80073a4:	f000 80aa 	beq.w	80074fc <_svfiprintf_r+0x1c8>
 80073a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073aa:	445a      	add	r2, fp
 80073ac:	9209      	str	r2, [sp, #36]	; 0x24
 80073ae:	f89a 3000 	ldrb.w	r3, [sl]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	f000 80a2 	beq.w	80074fc <_svfiprintf_r+0x1c8>
 80073b8:	2300      	movs	r3, #0
 80073ba:	f04f 32ff 	mov.w	r2, #4294967295
 80073be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073c2:	f10a 0a01 	add.w	sl, sl, #1
 80073c6:	9304      	str	r3, [sp, #16]
 80073c8:	9307      	str	r3, [sp, #28]
 80073ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073ce:	931a      	str	r3, [sp, #104]	; 0x68
 80073d0:	4654      	mov	r4, sl
 80073d2:	2205      	movs	r2, #5
 80073d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073d8:	4851      	ldr	r0, [pc, #324]	; (8007520 <_svfiprintf_r+0x1ec>)
 80073da:	f7f8 ff29 	bl	8000230 <memchr>
 80073de:	9a04      	ldr	r2, [sp, #16]
 80073e0:	b9d8      	cbnz	r0, 800741a <_svfiprintf_r+0xe6>
 80073e2:	06d0      	lsls	r0, r2, #27
 80073e4:	bf44      	itt	mi
 80073e6:	2320      	movmi	r3, #32
 80073e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073ec:	0711      	lsls	r1, r2, #28
 80073ee:	bf44      	itt	mi
 80073f0:	232b      	movmi	r3, #43	; 0x2b
 80073f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073f6:	f89a 3000 	ldrb.w	r3, [sl]
 80073fa:	2b2a      	cmp	r3, #42	; 0x2a
 80073fc:	d015      	beq.n	800742a <_svfiprintf_r+0xf6>
 80073fe:	9a07      	ldr	r2, [sp, #28]
 8007400:	4654      	mov	r4, sl
 8007402:	2000      	movs	r0, #0
 8007404:	f04f 0c0a 	mov.w	ip, #10
 8007408:	4621      	mov	r1, r4
 800740a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800740e:	3b30      	subs	r3, #48	; 0x30
 8007410:	2b09      	cmp	r3, #9
 8007412:	d94e      	bls.n	80074b2 <_svfiprintf_r+0x17e>
 8007414:	b1b0      	cbz	r0, 8007444 <_svfiprintf_r+0x110>
 8007416:	9207      	str	r2, [sp, #28]
 8007418:	e014      	b.n	8007444 <_svfiprintf_r+0x110>
 800741a:	eba0 0308 	sub.w	r3, r0, r8
 800741e:	fa09 f303 	lsl.w	r3, r9, r3
 8007422:	4313      	orrs	r3, r2
 8007424:	9304      	str	r3, [sp, #16]
 8007426:	46a2      	mov	sl, r4
 8007428:	e7d2      	b.n	80073d0 <_svfiprintf_r+0x9c>
 800742a:	9b03      	ldr	r3, [sp, #12]
 800742c:	1d19      	adds	r1, r3, #4
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	9103      	str	r1, [sp, #12]
 8007432:	2b00      	cmp	r3, #0
 8007434:	bfbb      	ittet	lt
 8007436:	425b      	neglt	r3, r3
 8007438:	f042 0202 	orrlt.w	r2, r2, #2
 800743c:	9307      	strge	r3, [sp, #28]
 800743e:	9307      	strlt	r3, [sp, #28]
 8007440:	bfb8      	it	lt
 8007442:	9204      	strlt	r2, [sp, #16]
 8007444:	7823      	ldrb	r3, [r4, #0]
 8007446:	2b2e      	cmp	r3, #46	; 0x2e
 8007448:	d10c      	bne.n	8007464 <_svfiprintf_r+0x130>
 800744a:	7863      	ldrb	r3, [r4, #1]
 800744c:	2b2a      	cmp	r3, #42	; 0x2a
 800744e:	d135      	bne.n	80074bc <_svfiprintf_r+0x188>
 8007450:	9b03      	ldr	r3, [sp, #12]
 8007452:	1d1a      	adds	r2, r3, #4
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	9203      	str	r2, [sp, #12]
 8007458:	2b00      	cmp	r3, #0
 800745a:	bfb8      	it	lt
 800745c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007460:	3402      	adds	r4, #2
 8007462:	9305      	str	r3, [sp, #20]
 8007464:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007530 <_svfiprintf_r+0x1fc>
 8007468:	7821      	ldrb	r1, [r4, #0]
 800746a:	2203      	movs	r2, #3
 800746c:	4650      	mov	r0, sl
 800746e:	f7f8 fedf 	bl	8000230 <memchr>
 8007472:	b140      	cbz	r0, 8007486 <_svfiprintf_r+0x152>
 8007474:	2340      	movs	r3, #64	; 0x40
 8007476:	eba0 000a 	sub.w	r0, r0, sl
 800747a:	fa03 f000 	lsl.w	r0, r3, r0
 800747e:	9b04      	ldr	r3, [sp, #16]
 8007480:	4303      	orrs	r3, r0
 8007482:	3401      	adds	r4, #1
 8007484:	9304      	str	r3, [sp, #16]
 8007486:	f814 1b01 	ldrb.w	r1, [r4], #1
 800748a:	4826      	ldr	r0, [pc, #152]	; (8007524 <_svfiprintf_r+0x1f0>)
 800748c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007490:	2206      	movs	r2, #6
 8007492:	f7f8 fecd 	bl	8000230 <memchr>
 8007496:	2800      	cmp	r0, #0
 8007498:	d038      	beq.n	800750c <_svfiprintf_r+0x1d8>
 800749a:	4b23      	ldr	r3, [pc, #140]	; (8007528 <_svfiprintf_r+0x1f4>)
 800749c:	bb1b      	cbnz	r3, 80074e6 <_svfiprintf_r+0x1b2>
 800749e:	9b03      	ldr	r3, [sp, #12]
 80074a0:	3307      	adds	r3, #7
 80074a2:	f023 0307 	bic.w	r3, r3, #7
 80074a6:	3308      	adds	r3, #8
 80074a8:	9303      	str	r3, [sp, #12]
 80074aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074ac:	4433      	add	r3, r6
 80074ae:	9309      	str	r3, [sp, #36]	; 0x24
 80074b0:	e767      	b.n	8007382 <_svfiprintf_r+0x4e>
 80074b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80074b6:	460c      	mov	r4, r1
 80074b8:	2001      	movs	r0, #1
 80074ba:	e7a5      	b.n	8007408 <_svfiprintf_r+0xd4>
 80074bc:	2300      	movs	r3, #0
 80074be:	3401      	adds	r4, #1
 80074c0:	9305      	str	r3, [sp, #20]
 80074c2:	4619      	mov	r1, r3
 80074c4:	f04f 0c0a 	mov.w	ip, #10
 80074c8:	4620      	mov	r0, r4
 80074ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074ce:	3a30      	subs	r2, #48	; 0x30
 80074d0:	2a09      	cmp	r2, #9
 80074d2:	d903      	bls.n	80074dc <_svfiprintf_r+0x1a8>
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d0c5      	beq.n	8007464 <_svfiprintf_r+0x130>
 80074d8:	9105      	str	r1, [sp, #20]
 80074da:	e7c3      	b.n	8007464 <_svfiprintf_r+0x130>
 80074dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80074e0:	4604      	mov	r4, r0
 80074e2:	2301      	movs	r3, #1
 80074e4:	e7f0      	b.n	80074c8 <_svfiprintf_r+0x194>
 80074e6:	ab03      	add	r3, sp, #12
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	462a      	mov	r2, r5
 80074ec:	4b0f      	ldr	r3, [pc, #60]	; (800752c <_svfiprintf_r+0x1f8>)
 80074ee:	a904      	add	r1, sp, #16
 80074f0:	4638      	mov	r0, r7
 80074f2:	f3af 8000 	nop.w
 80074f6:	1c42      	adds	r2, r0, #1
 80074f8:	4606      	mov	r6, r0
 80074fa:	d1d6      	bne.n	80074aa <_svfiprintf_r+0x176>
 80074fc:	89ab      	ldrh	r3, [r5, #12]
 80074fe:	065b      	lsls	r3, r3, #25
 8007500:	f53f af2c 	bmi.w	800735c <_svfiprintf_r+0x28>
 8007504:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007506:	b01d      	add	sp, #116	; 0x74
 8007508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800750c:	ab03      	add	r3, sp, #12
 800750e:	9300      	str	r3, [sp, #0]
 8007510:	462a      	mov	r2, r5
 8007512:	4b06      	ldr	r3, [pc, #24]	; (800752c <_svfiprintf_r+0x1f8>)
 8007514:	a904      	add	r1, sp, #16
 8007516:	4638      	mov	r0, r7
 8007518:	f000 f87a 	bl	8007610 <_printf_i>
 800751c:	e7eb      	b.n	80074f6 <_svfiprintf_r+0x1c2>
 800751e:	bf00      	nop
 8007520:	08007bd8 	.word	0x08007bd8
 8007524:	08007be2 	.word	0x08007be2
 8007528:	00000000 	.word	0x00000000
 800752c:	0800727d 	.word	0x0800727d
 8007530:	08007bde 	.word	0x08007bde

08007534 <_printf_common>:
 8007534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007538:	4616      	mov	r6, r2
 800753a:	4699      	mov	r9, r3
 800753c:	688a      	ldr	r2, [r1, #8]
 800753e:	690b      	ldr	r3, [r1, #16]
 8007540:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007544:	4293      	cmp	r3, r2
 8007546:	bfb8      	it	lt
 8007548:	4613      	movlt	r3, r2
 800754a:	6033      	str	r3, [r6, #0]
 800754c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007550:	4607      	mov	r7, r0
 8007552:	460c      	mov	r4, r1
 8007554:	b10a      	cbz	r2, 800755a <_printf_common+0x26>
 8007556:	3301      	adds	r3, #1
 8007558:	6033      	str	r3, [r6, #0]
 800755a:	6823      	ldr	r3, [r4, #0]
 800755c:	0699      	lsls	r1, r3, #26
 800755e:	bf42      	ittt	mi
 8007560:	6833      	ldrmi	r3, [r6, #0]
 8007562:	3302      	addmi	r3, #2
 8007564:	6033      	strmi	r3, [r6, #0]
 8007566:	6825      	ldr	r5, [r4, #0]
 8007568:	f015 0506 	ands.w	r5, r5, #6
 800756c:	d106      	bne.n	800757c <_printf_common+0x48>
 800756e:	f104 0a19 	add.w	sl, r4, #25
 8007572:	68e3      	ldr	r3, [r4, #12]
 8007574:	6832      	ldr	r2, [r6, #0]
 8007576:	1a9b      	subs	r3, r3, r2
 8007578:	42ab      	cmp	r3, r5
 800757a:	dc26      	bgt.n	80075ca <_printf_common+0x96>
 800757c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007580:	1e13      	subs	r3, r2, #0
 8007582:	6822      	ldr	r2, [r4, #0]
 8007584:	bf18      	it	ne
 8007586:	2301      	movne	r3, #1
 8007588:	0692      	lsls	r2, r2, #26
 800758a:	d42b      	bmi.n	80075e4 <_printf_common+0xb0>
 800758c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007590:	4649      	mov	r1, r9
 8007592:	4638      	mov	r0, r7
 8007594:	47c0      	blx	r8
 8007596:	3001      	adds	r0, #1
 8007598:	d01e      	beq.n	80075d8 <_printf_common+0xa4>
 800759a:	6823      	ldr	r3, [r4, #0]
 800759c:	68e5      	ldr	r5, [r4, #12]
 800759e:	6832      	ldr	r2, [r6, #0]
 80075a0:	f003 0306 	and.w	r3, r3, #6
 80075a4:	2b04      	cmp	r3, #4
 80075a6:	bf08      	it	eq
 80075a8:	1aad      	subeq	r5, r5, r2
 80075aa:	68a3      	ldr	r3, [r4, #8]
 80075ac:	6922      	ldr	r2, [r4, #16]
 80075ae:	bf0c      	ite	eq
 80075b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075b4:	2500      	movne	r5, #0
 80075b6:	4293      	cmp	r3, r2
 80075b8:	bfc4      	itt	gt
 80075ba:	1a9b      	subgt	r3, r3, r2
 80075bc:	18ed      	addgt	r5, r5, r3
 80075be:	2600      	movs	r6, #0
 80075c0:	341a      	adds	r4, #26
 80075c2:	42b5      	cmp	r5, r6
 80075c4:	d11a      	bne.n	80075fc <_printf_common+0xc8>
 80075c6:	2000      	movs	r0, #0
 80075c8:	e008      	b.n	80075dc <_printf_common+0xa8>
 80075ca:	2301      	movs	r3, #1
 80075cc:	4652      	mov	r2, sl
 80075ce:	4649      	mov	r1, r9
 80075d0:	4638      	mov	r0, r7
 80075d2:	47c0      	blx	r8
 80075d4:	3001      	adds	r0, #1
 80075d6:	d103      	bne.n	80075e0 <_printf_common+0xac>
 80075d8:	f04f 30ff 	mov.w	r0, #4294967295
 80075dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075e0:	3501      	adds	r5, #1
 80075e2:	e7c6      	b.n	8007572 <_printf_common+0x3e>
 80075e4:	18e1      	adds	r1, r4, r3
 80075e6:	1c5a      	adds	r2, r3, #1
 80075e8:	2030      	movs	r0, #48	; 0x30
 80075ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075ee:	4422      	add	r2, r4
 80075f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075f8:	3302      	adds	r3, #2
 80075fa:	e7c7      	b.n	800758c <_printf_common+0x58>
 80075fc:	2301      	movs	r3, #1
 80075fe:	4622      	mov	r2, r4
 8007600:	4649      	mov	r1, r9
 8007602:	4638      	mov	r0, r7
 8007604:	47c0      	blx	r8
 8007606:	3001      	adds	r0, #1
 8007608:	d0e6      	beq.n	80075d8 <_printf_common+0xa4>
 800760a:	3601      	adds	r6, #1
 800760c:	e7d9      	b.n	80075c2 <_printf_common+0x8e>
	...

08007610 <_printf_i>:
 8007610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007614:	460c      	mov	r4, r1
 8007616:	4691      	mov	r9, r2
 8007618:	7e27      	ldrb	r7, [r4, #24]
 800761a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800761c:	2f78      	cmp	r7, #120	; 0x78
 800761e:	4680      	mov	r8, r0
 8007620:	469a      	mov	sl, r3
 8007622:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007626:	d807      	bhi.n	8007638 <_printf_i+0x28>
 8007628:	2f62      	cmp	r7, #98	; 0x62
 800762a:	d80a      	bhi.n	8007642 <_printf_i+0x32>
 800762c:	2f00      	cmp	r7, #0
 800762e:	f000 80d8 	beq.w	80077e2 <_printf_i+0x1d2>
 8007632:	2f58      	cmp	r7, #88	; 0x58
 8007634:	f000 80a3 	beq.w	800777e <_printf_i+0x16e>
 8007638:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800763c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007640:	e03a      	b.n	80076b8 <_printf_i+0xa8>
 8007642:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007646:	2b15      	cmp	r3, #21
 8007648:	d8f6      	bhi.n	8007638 <_printf_i+0x28>
 800764a:	a001      	add	r0, pc, #4	; (adr r0, 8007650 <_printf_i+0x40>)
 800764c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007650:	080076a9 	.word	0x080076a9
 8007654:	080076bd 	.word	0x080076bd
 8007658:	08007639 	.word	0x08007639
 800765c:	08007639 	.word	0x08007639
 8007660:	08007639 	.word	0x08007639
 8007664:	08007639 	.word	0x08007639
 8007668:	080076bd 	.word	0x080076bd
 800766c:	08007639 	.word	0x08007639
 8007670:	08007639 	.word	0x08007639
 8007674:	08007639 	.word	0x08007639
 8007678:	08007639 	.word	0x08007639
 800767c:	080077c9 	.word	0x080077c9
 8007680:	080076ed 	.word	0x080076ed
 8007684:	080077ab 	.word	0x080077ab
 8007688:	08007639 	.word	0x08007639
 800768c:	08007639 	.word	0x08007639
 8007690:	080077eb 	.word	0x080077eb
 8007694:	08007639 	.word	0x08007639
 8007698:	080076ed 	.word	0x080076ed
 800769c:	08007639 	.word	0x08007639
 80076a0:	08007639 	.word	0x08007639
 80076a4:	080077b3 	.word	0x080077b3
 80076a8:	680b      	ldr	r3, [r1, #0]
 80076aa:	1d1a      	adds	r2, r3, #4
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	600a      	str	r2, [r1, #0]
 80076b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80076b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076b8:	2301      	movs	r3, #1
 80076ba:	e0a3      	b.n	8007804 <_printf_i+0x1f4>
 80076bc:	6825      	ldr	r5, [r4, #0]
 80076be:	6808      	ldr	r0, [r1, #0]
 80076c0:	062e      	lsls	r6, r5, #24
 80076c2:	f100 0304 	add.w	r3, r0, #4
 80076c6:	d50a      	bpl.n	80076de <_printf_i+0xce>
 80076c8:	6805      	ldr	r5, [r0, #0]
 80076ca:	600b      	str	r3, [r1, #0]
 80076cc:	2d00      	cmp	r5, #0
 80076ce:	da03      	bge.n	80076d8 <_printf_i+0xc8>
 80076d0:	232d      	movs	r3, #45	; 0x2d
 80076d2:	426d      	negs	r5, r5
 80076d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076d8:	485e      	ldr	r0, [pc, #376]	; (8007854 <_printf_i+0x244>)
 80076da:	230a      	movs	r3, #10
 80076dc:	e019      	b.n	8007712 <_printf_i+0x102>
 80076de:	f015 0f40 	tst.w	r5, #64	; 0x40
 80076e2:	6805      	ldr	r5, [r0, #0]
 80076e4:	600b      	str	r3, [r1, #0]
 80076e6:	bf18      	it	ne
 80076e8:	b22d      	sxthne	r5, r5
 80076ea:	e7ef      	b.n	80076cc <_printf_i+0xbc>
 80076ec:	680b      	ldr	r3, [r1, #0]
 80076ee:	6825      	ldr	r5, [r4, #0]
 80076f0:	1d18      	adds	r0, r3, #4
 80076f2:	6008      	str	r0, [r1, #0]
 80076f4:	0628      	lsls	r0, r5, #24
 80076f6:	d501      	bpl.n	80076fc <_printf_i+0xec>
 80076f8:	681d      	ldr	r5, [r3, #0]
 80076fa:	e002      	b.n	8007702 <_printf_i+0xf2>
 80076fc:	0669      	lsls	r1, r5, #25
 80076fe:	d5fb      	bpl.n	80076f8 <_printf_i+0xe8>
 8007700:	881d      	ldrh	r5, [r3, #0]
 8007702:	4854      	ldr	r0, [pc, #336]	; (8007854 <_printf_i+0x244>)
 8007704:	2f6f      	cmp	r7, #111	; 0x6f
 8007706:	bf0c      	ite	eq
 8007708:	2308      	moveq	r3, #8
 800770a:	230a      	movne	r3, #10
 800770c:	2100      	movs	r1, #0
 800770e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007712:	6866      	ldr	r6, [r4, #4]
 8007714:	60a6      	str	r6, [r4, #8]
 8007716:	2e00      	cmp	r6, #0
 8007718:	bfa2      	ittt	ge
 800771a:	6821      	ldrge	r1, [r4, #0]
 800771c:	f021 0104 	bicge.w	r1, r1, #4
 8007720:	6021      	strge	r1, [r4, #0]
 8007722:	b90d      	cbnz	r5, 8007728 <_printf_i+0x118>
 8007724:	2e00      	cmp	r6, #0
 8007726:	d04d      	beq.n	80077c4 <_printf_i+0x1b4>
 8007728:	4616      	mov	r6, r2
 800772a:	fbb5 f1f3 	udiv	r1, r5, r3
 800772e:	fb03 5711 	mls	r7, r3, r1, r5
 8007732:	5dc7      	ldrb	r7, [r0, r7]
 8007734:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007738:	462f      	mov	r7, r5
 800773a:	42bb      	cmp	r3, r7
 800773c:	460d      	mov	r5, r1
 800773e:	d9f4      	bls.n	800772a <_printf_i+0x11a>
 8007740:	2b08      	cmp	r3, #8
 8007742:	d10b      	bne.n	800775c <_printf_i+0x14c>
 8007744:	6823      	ldr	r3, [r4, #0]
 8007746:	07df      	lsls	r7, r3, #31
 8007748:	d508      	bpl.n	800775c <_printf_i+0x14c>
 800774a:	6923      	ldr	r3, [r4, #16]
 800774c:	6861      	ldr	r1, [r4, #4]
 800774e:	4299      	cmp	r1, r3
 8007750:	bfde      	ittt	le
 8007752:	2330      	movle	r3, #48	; 0x30
 8007754:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007758:	f106 36ff 	addle.w	r6, r6, #4294967295
 800775c:	1b92      	subs	r2, r2, r6
 800775e:	6122      	str	r2, [r4, #16]
 8007760:	f8cd a000 	str.w	sl, [sp]
 8007764:	464b      	mov	r3, r9
 8007766:	aa03      	add	r2, sp, #12
 8007768:	4621      	mov	r1, r4
 800776a:	4640      	mov	r0, r8
 800776c:	f7ff fee2 	bl	8007534 <_printf_common>
 8007770:	3001      	adds	r0, #1
 8007772:	d14c      	bne.n	800780e <_printf_i+0x1fe>
 8007774:	f04f 30ff 	mov.w	r0, #4294967295
 8007778:	b004      	add	sp, #16
 800777a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800777e:	4835      	ldr	r0, [pc, #212]	; (8007854 <_printf_i+0x244>)
 8007780:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007784:	6823      	ldr	r3, [r4, #0]
 8007786:	680e      	ldr	r6, [r1, #0]
 8007788:	061f      	lsls	r7, r3, #24
 800778a:	f856 5b04 	ldr.w	r5, [r6], #4
 800778e:	600e      	str	r6, [r1, #0]
 8007790:	d514      	bpl.n	80077bc <_printf_i+0x1ac>
 8007792:	07d9      	lsls	r1, r3, #31
 8007794:	bf44      	itt	mi
 8007796:	f043 0320 	orrmi.w	r3, r3, #32
 800779a:	6023      	strmi	r3, [r4, #0]
 800779c:	b91d      	cbnz	r5, 80077a6 <_printf_i+0x196>
 800779e:	6823      	ldr	r3, [r4, #0]
 80077a0:	f023 0320 	bic.w	r3, r3, #32
 80077a4:	6023      	str	r3, [r4, #0]
 80077a6:	2310      	movs	r3, #16
 80077a8:	e7b0      	b.n	800770c <_printf_i+0xfc>
 80077aa:	6823      	ldr	r3, [r4, #0]
 80077ac:	f043 0320 	orr.w	r3, r3, #32
 80077b0:	6023      	str	r3, [r4, #0]
 80077b2:	2378      	movs	r3, #120	; 0x78
 80077b4:	4828      	ldr	r0, [pc, #160]	; (8007858 <_printf_i+0x248>)
 80077b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80077ba:	e7e3      	b.n	8007784 <_printf_i+0x174>
 80077bc:	065e      	lsls	r6, r3, #25
 80077be:	bf48      	it	mi
 80077c0:	b2ad      	uxthmi	r5, r5
 80077c2:	e7e6      	b.n	8007792 <_printf_i+0x182>
 80077c4:	4616      	mov	r6, r2
 80077c6:	e7bb      	b.n	8007740 <_printf_i+0x130>
 80077c8:	680b      	ldr	r3, [r1, #0]
 80077ca:	6826      	ldr	r6, [r4, #0]
 80077cc:	6960      	ldr	r0, [r4, #20]
 80077ce:	1d1d      	adds	r5, r3, #4
 80077d0:	600d      	str	r5, [r1, #0]
 80077d2:	0635      	lsls	r5, r6, #24
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	d501      	bpl.n	80077dc <_printf_i+0x1cc>
 80077d8:	6018      	str	r0, [r3, #0]
 80077da:	e002      	b.n	80077e2 <_printf_i+0x1d2>
 80077dc:	0671      	lsls	r1, r6, #25
 80077de:	d5fb      	bpl.n	80077d8 <_printf_i+0x1c8>
 80077e0:	8018      	strh	r0, [r3, #0]
 80077e2:	2300      	movs	r3, #0
 80077e4:	6123      	str	r3, [r4, #16]
 80077e6:	4616      	mov	r6, r2
 80077e8:	e7ba      	b.n	8007760 <_printf_i+0x150>
 80077ea:	680b      	ldr	r3, [r1, #0]
 80077ec:	1d1a      	adds	r2, r3, #4
 80077ee:	600a      	str	r2, [r1, #0]
 80077f0:	681e      	ldr	r6, [r3, #0]
 80077f2:	6862      	ldr	r2, [r4, #4]
 80077f4:	2100      	movs	r1, #0
 80077f6:	4630      	mov	r0, r6
 80077f8:	f7f8 fd1a 	bl	8000230 <memchr>
 80077fc:	b108      	cbz	r0, 8007802 <_printf_i+0x1f2>
 80077fe:	1b80      	subs	r0, r0, r6
 8007800:	6060      	str	r0, [r4, #4]
 8007802:	6863      	ldr	r3, [r4, #4]
 8007804:	6123      	str	r3, [r4, #16]
 8007806:	2300      	movs	r3, #0
 8007808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800780c:	e7a8      	b.n	8007760 <_printf_i+0x150>
 800780e:	6923      	ldr	r3, [r4, #16]
 8007810:	4632      	mov	r2, r6
 8007812:	4649      	mov	r1, r9
 8007814:	4640      	mov	r0, r8
 8007816:	47d0      	blx	sl
 8007818:	3001      	adds	r0, #1
 800781a:	d0ab      	beq.n	8007774 <_printf_i+0x164>
 800781c:	6823      	ldr	r3, [r4, #0]
 800781e:	079b      	lsls	r3, r3, #30
 8007820:	d413      	bmi.n	800784a <_printf_i+0x23a>
 8007822:	68e0      	ldr	r0, [r4, #12]
 8007824:	9b03      	ldr	r3, [sp, #12]
 8007826:	4298      	cmp	r0, r3
 8007828:	bfb8      	it	lt
 800782a:	4618      	movlt	r0, r3
 800782c:	e7a4      	b.n	8007778 <_printf_i+0x168>
 800782e:	2301      	movs	r3, #1
 8007830:	4632      	mov	r2, r6
 8007832:	4649      	mov	r1, r9
 8007834:	4640      	mov	r0, r8
 8007836:	47d0      	blx	sl
 8007838:	3001      	adds	r0, #1
 800783a:	d09b      	beq.n	8007774 <_printf_i+0x164>
 800783c:	3501      	adds	r5, #1
 800783e:	68e3      	ldr	r3, [r4, #12]
 8007840:	9903      	ldr	r1, [sp, #12]
 8007842:	1a5b      	subs	r3, r3, r1
 8007844:	42ab      	cmp	r3, r5
 8007846:	dcf2      	bgt.n	800782e <_printf_i+0x21e>
 8007848:	e7eb      	b.n	8007822 <_printf_i+0x212>
 800784a:	2500      	movs	r5, #0
 800784c:	f104 0619 	add.w	r6, r4, #25
 8007850:	e7f5      	b.n	800783e <_printf_i+0x22e>
 8007852:	bf00      	nop
 8007854:	08007be9 	.word	0x08007be9
 8007858:	08007bfa 	.word	0x08007bfa

0800785c <memcpy>:
 800785c:	440a      	add	r2, r1
 800785e:	4291      	cmp	r1, r2
 8007860:	f100 33ff 	add.w	r3, r0, #4294967295
 8007864:	d100      	bne.n	8007868 <memcpy+0xc>
 8007866:	4770      	bx	lr
 8007868:	b510      	push	{r4, lr}
 800786a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800786e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007872:	4291      	cmp	r1, r2
 8007874:	d1f9      	bne.n	800786a <memcpy+0xe>
 8007876:	bd10      	pop	{r4, pc}

08007878 <memmove>:
 8007878:	4288      	cmp	r0, r1
 800787a:	b510      	push	{r4, lr}
 800787c:	eb01 0402 	add.w	r4, r1, r2
 8007880:	d902      	bls.n	8007888 <memmove+0x10>
 8007882:	4284      	cmp	r4, r0
 8007884:	4623      	mov	r3, r4
 8007886:	d807      	bhi.n	8007898 <memmove+0x20>
 8007888:	1e43      	subs	r3, r0, #1
 800788a:	42a1      	cmp	r1, r4
 800788c:	d008      	beq.n	80078a0 <memmove+0x28>
 800788e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007892:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007896:	e7f8      	b.n	800788a <memmove+0x12>
 8007898:	4402      	add	r2, r0
 800789a:	4601      	mov	r1, r0
 800789c:	428a      	cmp	r2, r1
 800789e:	d100      	bne.n	80078a2 <memmove+0x2a>
 80078a0:	bd10      	pop	{r4, pc}
 80078a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80078aa:	e7f7      	b.n	800789c <memmove+0x24>

080078ac <_free_r>:
 80078ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078ae:	2900      	cmp	r1, #0
 80078b0:	d048      	beq.n	8007944 <_free_r+0x98>
 80078b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078b6:	9001      	str	r0, [sp, #4]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f1a1 0404 	sub.w	r4, r1, #4
 80078be:	bfb8      	it	lt
 80078c0:	18e4      	addlt	r4, r4, r3
 80078c2:	f000 f8d3 	bl	8007a6c <__malloc_lock>
 80078c6:	4a20      	ldr	r2, [pc, #128]	; (8007948 <_free_r+0x9c>)
 80078c8:	9801      	ldr	r0, [sp, #4]
 80078ca:	6813      	ldr	r3, [r2, #0]
 80078cc:	4615      	mov	r5, r2
 80078ce:	b933      	cbnz	r3, 80078de <_free_r+0x32>
 80078d0:	6063      	str	r3, [r4, #4]
 80078d2:	6014      	str	r4, [r2, #0]
 80078d4:	b003      	add	sp, #12
 80078d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078da:	f000 b8cd 	b.w	8007a78 <__malloc_unlock>
 80078de:	42a3      	cmp	r3, r4
 80078e0:	d90b      	bls.n	80078fa <_free_r+0x4e>
 80078e2:	6821      	ldr	r1, [r4, #0]
 80078e4:	1862      	adds	r2, r4, r1
 80078e6:	4293      	cmp	r3, r2
 80078e8:	bf04      	itt	eq
 80078ea:	681a      	ldreq	r2, [r3, #0]
 80078ec:	685b      	ldreq	r3, [r3, #4]
 80078ee:	6063      	str	r3, [r4, #4]
 80078f0:	bf04      	itt	eq
 80078f2:	1852      	addeq	r2, r2, r1
 80078f4:	6022      	streq	r2, [r4, #0]
 80078f6:	602c      	str	r4, [r5, #0]
 80078f8:	e7ec      	b.n	80078d4 <_free_r+0x28>
 80078fa:	461a      	mov	r2, r3
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	b10b      	cbz	r3, 8007904 <_free_r+0x58>
 8007900:	42a3      	cmp	r3, r4
 8007902:	d9fa      	bls.n	80078fa <_free_r+0x4e>
 8007904:	6811      	ldr	r1, [r2, #0]
 8007906:	1855      	adds	r5, r2, r1
 8007908:	42a5      	cmp	r5, r4
 800790a:	d10b      	bne.n	8007924 <_free_r+0x78>
 800790c:	6824      	ldr	r4, [r4, #0]
 800790e:	4421      	add	r1, r4
 8007910:	1854      	adds	r4, r2, r1
 8007912:	42a3      	cmp	r3, r4
 8007914:	6011      	str	r1, [r2, #0]
 8007916:	d1dd      	bne.n	80078d4 <_free_r+0x28>
 8007918:	681c      	ldr	r4, [r3, #0]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	6053      	str	r3, [r2, #4]
 800791e:	4421      	add	r1, r4
 8007920:	6011      	str	r1, [r2, #0]
 8007922:	e7d7      	b.n	80078d4 <_free_r+0x28>
 8007924:	d902      	bls.n	800792c <_free_r+0x80>
 8007926:	230c      	movs	r3, #12
 8007928:	6003      	str	r3, [r0, #0]
 800792a:	e7d3      	b.n	80078d4 <_free_r+0x28>
 800792c:	6825      	ldr	r5, [r4, #0]
 800792e:	1961      	adds	r1, r4, r5
 8007930:	428b      	cmp	r3, r1
 8007932:	bf04      	itt	eq
 8007934:	6819      	ldreq	r1, [r3, #0]
 8007936:	685b      	ldreq	r3, [r3, #4]
 8007938:	6063      	str	r3, [r4, #4]
 800793a:	bf04      	itt	eq
 800793c:	1949      	addeq	r1, r1, r5
 800793e:	6021      	streq	r1, [r4, #0]
 8007940:	6054      	str	r4, [r2, #4]
 8007942:	e7c7      	b.n	80078d4 <_free_r+0x28>
 8007944:	b003      	add	sp, #12
 8007946:	bd30      	pop	{r4, r5, pc}
 8007948:	200001bc 	.word	0x200001bc

0800794c <_malloc_r>:
 800794c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800794e:	1ccd      	adds	r5, r1, #3
 8007950:	f025 0503 	bic.w	r5, r5, #3
 8007954:	3508      	adds	r5, #8
 8007956:	2d0c      	cmp	r5, #12
 8007958:	bf38      	it	cc
 800795a:	250c      	movcc	r5, #12
 800795c:	2d00      	cmp	r5, #0
 800795e:	4606      	mov	r6, r0
 8007960:	db01      	blt.n	8007966 <_malloc_r+0x1a>
 8007962:	42a9      	cmp	r1, r5
 8007964:	d903      	bls.n	800796e <_malloc_r+0x22>
 8007966:	230c      	movs	r3, #12
 8007968:	6033      	str	r3, [r6, #0]
 800796a:	2000      	movs	r0, #0
 800796c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800796e:	f000 f87d 	bl	8007a6c <__malloc_lock>
 8007972:	4921      	ldr	r1, [pc, #132]	; (80079f8 <_malloc_r+0xac>)
 8007974:	680a      	ldr	r2, [r1, #0]
 8007976:	4614      	mov	r4, r2
 8007978:	b99c      	cbnz	r4, 80079a2 <_malloc_r+0x56>
 800797a:	4f20      	ldr	r7, [pc, #128]	; (80079fc <_malloc_r+0xb0>)
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	b923      	cbnz	r3, 800798a <_malloc_r+0x3e>
 8007980:	4621      	mov	r1, r4
 8007982:	4630      	mov	r0, r6
 8007984:	f000 f862 	bl	8007a4c <_sbrk_r>
 8007988:	6038      	str	r0, [r7, #0]
 800798a:	4629      	mov	r1, r5
 800798c:	4630      	mov	r0, r6
 800798e:	f000 f85d 	bl	8007a4c <_sbrk_r>
 8007992:	1c43      	adds	r3, r0, #1
 8007994:	d123      	bne.n	80079de <_malloc_r+0x92>
 8007996:	230c      	movs	r3, #12
 8007998:	6033      	str	r3, [r6, #0]
 800799a:	4630      	mov	r0, r6
 800799c:	f000 f86c 	bl	8007a78 <__malloc_unlock>
 80079a0:	e7e3      	b.n	800796a <_malloc_r+0x1e>
 80079a2:	6823      	ldr	r3, [r4, #0]
 80079a4:	1b5b      	subs	r3, r3, r5
 80079a6:	d417      	bmi.n	80079d8 <_malloc_r+0x8c>
 80079a8:	2b0b      	cmp	r3, #11
 80079aa:	d903      	bls.n	80079b4 <_malloc_r+0x68>
 80079ac:	6023      	str	r3, [r4, #0]
 80079ae:	441c      	add	r4, r3
 80079b0:	6025      	str	r5, [r4, #0]
 80079b2:	e004      	b.n	80079be <_malloc_r+0x72>
 80079b4:	6863      	ldr	r3, [r4, #4]
 80079b6:	42a2      	cmp	r2, r4
 80079b8:	bf0c      	ite	eq
 80079ba:	600b      	streq	r3, [r1, #0]
 80079bc:	6053      	strne	r3, [r2, #4]
 80079be:	4630      	mov	r0, r6
 80079c0:	f000 f85a 	bl	8007a78 <__malloc_unlock>
 80079c4:	f104 000b 	add.w	r0, r4, #11
 80079c8:	1d23      	adds	r3, r4, #4
 80079ca:	f020 0007 	bic.w	r0, r0, #7
 80079ce:	1ac2      	subs	r2, r0, r3
 80079d0:	d0cc      	beq.n	800796c <_malloc_r+0x20>
 80079d2:	1a1b      	subs	r3, r3, r0
 80079d4:	50a3      	str	r3, [r4, r2]
 80079d6:	e7c9      	b.n	800796c <_malloc_r+0x20>
 80079d8:	4622      	mov	r2, r4
 80079da:	6864      	ldr	r4, [r4, #4]
 80079dc:	e7cc      	b.n	8007978 <_malloc_r+0x2c>
 80079de:	1cc4      	adds	r4, r0, #3
 80079e0:	f024 0403 	bic.w	r4, r4, #3
 80079e4:	42a0      	cmp	r0, r4
 80079e6:	d0e3      	beq.n	80079b0 <_malloc_r+0x64>
 80079e8:	1a21      	subs	r1, r4, r0
 80079ea:	4630      	mov	r0, r6
 80079ec:	f000 f82e 	bl	8007a4c <_sbrk_r>
 80079f0:	3001      	adds	r0, #1
 80079f2:	d1dd      	bne.n	80079b0 <_malloc_r+0x64>
 80079f4:	e7cf      	b.n	8007996 <_malloc_r+0x4a>
 80079f6:	bf00      	nop
 80079f8:	200001bc 	.word	0x200001bc
 80079fc:	200001c0 	.word	0x200001c0

08007a00 <_realloc_r>:
 8007a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a02:	4607      	mov	r7, r0
 8007a04:	4614      	mov	r4, r2
 8007a06:	460e      	mov	r6, r1
 8007a08:	b921      	cbnz	r1, 8007a14 <_realloc_r+0x14>
 8007a0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007a0e:	4611      	mov	r1, r2
 8007a10:	f7ff bf9c 	b.w	800794c <_malloc_r>
 8007a14:	b922      	cbnz	r2, 8007a20 <_realloc_r+0x20>
 8007a16:	f7ff ff49 	bl	80078ac <_free_r>
 8007a1a:	4625      	mov	r5, r4
 8007a1c:	4628      	mov	r0, r5
 8007a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a20:	f000 f830 	bl	8007a84 <_malloc_usable_size_r>
 8007a24:	42a0      	cmp	r0, r4
 8007a26:	d20f      	bcs.n	8007a48 <_realloc_r+0x48>
 8007a28:	4621      	mov	r1, r4
 8007a2a:	4638      	mov	r0, r7
 8007a2c:	f7ff ff8e 	bl	800794c <_malloc_r>
 8007a30:	4605      	mov	r5, r0
 8007a32:	2800      	cmp	r0, #0
 8007a34:	d0f2      	beq.n	8007a1c <_realloc_r+0x1c>
 8007a36:	4631      	mov	r1, r6
 8007a38:	4622      	mov	r2, r4
 8007a3a:	f7ff ff0f 	bl	800785c <memcpy>
 8007a3e:	4631      	mov	r1, r6
 8007a40:	4638      	mov	r0, r7
 8007a42:	f7ff ff33 	bl	80078ac <_free_r>
 8007a46:	e7e9      	b.n	8007a1c <_realloc_r+0x1c>
 8007a48:	4635      	mov	r5, r6
 8007a4a:	e7e7      	b.n	8007a1c <_realloc_r+0x1c>

08007a4c <_sbrk_r>:
 8007a4c:	b538      	push	{r3, r4, r5, lr}
 8007a4e:	4d06      	ldr	r5, [pc, #24]	; (8007a68 <_sbrk_r+0x1c>)
 8007a50:	2300      	movs	r3, #0
 8007a52:	4604      	mov	r4, r0
 8007a54:	4608      	mov	r0, r1
 8007a56:	602b      	str	r3, [r5, #0]
 8007a58:	f7fa fb24 	bl	80020a4 <_sbrk>
 8007a5c:	1c43      	adds	r3, r0, #1
 8007a5e:	d102      	bne.n	8007a66 <_sbrk_r+0x1a>
 8007a60:	682b      	ldr	r3, [r5, #0]
 8007a62:	b103      	cbz	r3, 8007a66 <_sbrk_r+0x1a>
 8007a64:	6023      	str	r3, [r4, #0]
 8007a66:	bd38      	pop	{r3, r4, r5, pc}
 8007a68:	200003a4 	.word	0x200003a4

08007a6c <__malloc_lock>:
 8007a6c:	4801      	ldr	r0, [pc, #4]	; (8007a74 <__malloc_lock+0x8>)
 8007a6e:	f000 b811 	b.w	8007a94 <__retarget_lock_acquire_recursive>
 8007a72:	bf00      	nop
 8007a74:	200003ac 	.word	0x200003ac

08007a78 <__malloc_unlock>:
 8007a78:	4801      	ldr	r0, [pc, #4]	; (8007a80 <__malloc_unlock+0x8>)
 8007a7a:	f000 b80c 	b.w	8007a96 <__retarget_lock_release_recursive>
 8007a7e:	bf00      	nop
 8007a80:	200003ac 	.word	0x200003ac

08007a84 <_malloc_usable_size_r>:
 8007a84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a88:	1f18      	subs	r0, r3, #4
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	bfbc      	itt	lt
 8007a8e:	580b      	ldrlt	r3, [r1, r0]
 8007a90:	18c0      	addlt	r0, r0, r3
 8007a92:	4770      	bx	lr

08007a94 <__retarget_lock_acquire_recursive>:
 8007a94:	4770      	bx	lr

08007a96 <__retarget_lock_release_recursive>:
 8007a96:	4770      	bx	lr

08007a98 <_init>:
 8007a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a9a:	bf00      	nop
 8007a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a9e:	bc08      	pop	{r3}
 8007aa0:	469e      	mov	lr, r3
 8007aa2:	4770      	bx	lr

08007aa4 <_fini>:
 8007aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aa6:	bf00      	nop
 8007aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aaa:	bc08      	pop	{r3}
 8007aac:	469e      	mov	lr, r3
 8007aae:	4770      	bx	lr
