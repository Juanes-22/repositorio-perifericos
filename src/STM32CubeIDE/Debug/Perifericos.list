
Perifericos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007714  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  080078e4  080078e4  000178e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a10  08007a10  000200c8  2**0
                  CONTENTS
  4 .ARM          00000008  08007a10  08007a10  00017a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a18  08007a18  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a18  08007a18  00017a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a1c  08007a1c  00017a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08007a20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  200000c8  08007ae8  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  08007ae8  00020394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002152c  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048cd  00000000  00000000  00041624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  00045ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  00047210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027e3b  00000000  00000000  000482e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ed68  00000000  00000000  00070123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2bf5  00000000  00000000  0008ee8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00171a80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f34  00000000  00000000  00171ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c8 	.word	0x200000c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080078cc 	.word	0x080078cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000cc 	.word	0x200000cc
 800020c:	080078cc 	.word	0x080078cc

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b96e 	b.w	8000e00 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9d08      	ldr	r5, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	468c      	mov	ip, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f040 8083 	bne.w	8000c52 <__udivmoddi4+0x116>
 8000b4c:	428a      	cmp	r2, r1
 8000b4e:	4617      	mov	r7, r2
 8000b50:	d947      	bls.n	8000be2 <__udivmoddi4+0xa6>
 8000b52:	fab2 f282 	clz	r2, r2
 8000b56:	b142      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b58:	f1c2 0020 	rsb	r0, r2, #32
 8000b5c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b60:	4091      	lsls	r1, r2
 8000b62:	4097      	lsls	r7, r2
 8000b64:	ea40 0c01 	orr.w	ip, r0, r1
 8000b68:	4094      	lsls	r4, r2
 8000b6a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b6e:	0c23      	lsrs	r3, r4, #16
 8000b70:	fbbc f6f8 	udiv	r6, ip, r8
 8000b74:	fa1f fe87 	uxth.w	lr, r7
 8000b78:	fb08 c116 	mls	r1, r8, r6, ip
 8000b7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b80:	fb06 f10e 	mul.w	r1, r6, lr
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x60>
 8000b88:	18fb      	adds	r3, r7, r3
 8000b8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b8e:	f080 8119 	bcs.w	8000dc4 <__udivmoddi4+0x288>
 8000b92:	4299      	cmp	r1, r3
 8000b94:	f240 8116 	bls.w	8000dc4 <__udivmoddi4+0x288>
 8000b98:	3e02      	subs	r6, #2
 8000b9a:	443b      	add	r3, r7
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ba4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bb0:	45a6      	cmp	lr, r4
 8000bb2:	d909      	bls.n	8000bc8 <__udivmoddi4+0x8c>
 8000bb4:	193c      	adds	r4, r7, r4
 8000bb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bba:	f080 8105 	bcs.w	8000dc8 <__udivmoddi4+0x28c>
 8000bbe:	45a6      	cmp	lr, r4
 8000bc0:	f240 8102 	bls.w	8000dc8 <__udivmoddi4+0x28c>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	443c      	add	r4, r7
 8000bc8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bcc:	eba4 040e 	sub.w	r4, r4, lr
 8000bd0:	2600      	movs	r6, #0
 8000bd2:	b11d      	cbz	r5, 8000bdc <__udivmoddi4+0xa0>
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bdc:	4631      	mov	r1, r6
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	b902      	cbnz	r2, 8000be6 <__udivmoddi4+0xaa>
 8000be4:	deff      	udf	#255	; 0xff
 8000be6:	fab2 f282 	clz	r2, r2
 8000bea:	2a00      	cmp	r2, #0
 8000bec:	d150      	bne.n	8000c90 <__udivmoddi4+0x154>
 8000bee:	1bcb      	subs	r3, r1, r7
 8000bf0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf4:	fa1f f887 	uxth.w	r8, r7
 8000bf8:	2601      	movs	r6, #1
 8000bfa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bfe:	0c21      	lsrs	r1, r4, #16
 8000c00:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c08:	fb08 f30c 	mul.w	r3, r8, ip
 8000c0c:	428b      	cmp	r3, r1
 8000c0e:	d907      	bls.n	8000c20 <__udivmoddi4+0xe4>
 8000c10:	1879      	adds	r1, r7, r1
 8000c12:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0xe2>
 8000c18:	428b      	cmp	r3, r1
 8000c1a:	f200 80e9 	bhi.w	8000df0 <__udivmoddi4+0x2b4>
 8000c1e:	4684      	mov	ip, r0
 8000c20:	1ac9      	subs	r1, r1, r3
 8000c22:	b2a3      	uxth	r3, r4
 8000c24:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c28:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c2c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c30:	fb08 f800 	mul.w	r8, r8, r0
 8000c34:	45a0      	cmp	r8, r4
 8000c36:	d907      	bls.n	8000c48 <__udivmoddi4+0x10c>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x10a>
 8000c40:	45a0      	cmp	r8, r4
 8000c42:	f200 80d9 	bhi.w	8000df8 <__udivmoddi4+0x2bc>
 8000c46:	4618      	mov	r0, r3
 8000c48:	eba4 0408 	sub.w	r4, r4, r8
 8000c4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c50:	e7bf      	b.n	8000bd2 <__udivmoddi4+0x96>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0x12e>
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	f000 80b1 	beq.w	8000dbe <__udivmoddi4+0x282>
 8000c5c:	2600      	movs	r6, #0
 8000c5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c62:	4630      	mov	r0, r6
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	fab3 f683 	clz	r6, r3
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d14a      	bne.n	8000d08 <__udivmoddi4+0x1cc>
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d302      	bcc.n	8000c7c <__udivmoddi4+0x140>
 8000c76:	4282      	cmp	r2, r0
 8000c78:	f200 80b8 	bhi.w	8000dec <__udivmoddi4+0x2b0>
 8000c7c:	1a84      	subs	r4, r0, r2
 8000c7e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c82:	2001      	movs	r0, #1
 8000c84:	468c      	mov	ip, r1
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	d0a8      	beq.n	8000bdc <__udivmoddi4+0xa0>
 8000c8a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c8e:	e7a5      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000c90:	f1c2 0320 	rsb	r3, r2, #32
 8000c94:	fa20 f603 	lsr.w	r6, r0, r3
 8000c98:	4097      	lsls	r7, r2
 8000c9a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c9e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca2:	40d9      	lsrs	r1, r3
 8000ca4:	4330      	orrs	r0, r6
 8000ca6:	0c03      	lsrs	r3, r0, #16
 8000ca8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cac:	fa1f f887 	uxth.w	r8, r7
 8000cb0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb8:	fb06 f108 	mul.w	r1, r6, r8
 8000cbc:	4299      	cmp	r1, r3
 8000cbe:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x19c>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cca:	f080 808d 	bcs.w	8000de8 <__udivmoddi4+0x2ac>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 808a 	bls.w	8000de8 <__udivmoddi4+0x2ac>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b281      	uxth	r1, r0
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce8:	fb00 f308 	mul.w	r3, r0, r8
 8000cec:	428b      	cmp	r3, r1
 8000cee:	d907      	bls.n	8000d00 <__udivmoddi4+0x1c4>
 8000cf0:	1879      	adds	r1, r7, r1
 8000cf2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cf6:	d273      	bcs.n	8000de0 <__udivmoddi4+0x2a4>
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d971      	bls.n	8000de0 <__udivmoddi4+0x2a4>
 8000cfc:	3802      	subs	r0, #2
 8000cfe:	4439      	add	r1, r7
 8000d00:	1acb      	subs	r3, r1, r3
 8000d02:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d06:	e778      	b.n	8000bfa <__udivmoddi4+0xbe>
 8000d08:	f1c6 0c20 	rsb	ip, r6, #32
 8000d0c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d10:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d14:	431c      	orrs	r4, r3
 8000d16:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d1e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d22:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d26:	431f      	orrs	r7, r3
 8000d28:	0c3b      	lsrs	r3, r7, #16
 8000d2a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d2e:	fa1f f884 	uxth.w	r8, r4
 8000d32:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d36:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d3a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d3e:	458a      	cmp	sl, r1
 8000d40:	fa02 f206 	lsl.w	r2, r2, r6
 8000d44:	fa00 f306 	lsl.w	r3, r0, r6
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x220>
 8000d4a:	1861      	adds	r1, r4, r1
 8000d4c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d50:	d248      	bcs.n	8000de4 <__udivmoddi4+0x2a8>
 8000d52:	458a      	cmp	sl, r1
 8000d54:	d946      	bls.n	8000de4 <__udivmoddi4+0x2a8>
 8000d56:	f1a9 0902 	sub.w	r9, r9, #2
 8000d5a:	4421      	add	r1, r4
 8000d5c:	eba1 010a 	sub.w	r1, r1, sl
 8000d60:	b2bf      	uxth	r7, r7
 8000d62:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d66:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d6a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d6e:	fb00 f808 	mul.w	r8, r0, r8
 8000d72:	45b8      	cmp	r8, r7
 8000d74:	d907      	bls.n	8000d86 <__udivmoddi4+0x24a>
 8000d76:	19e7      	adds	r7, r4, r7
 8000d78:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d7c:	d22e      	bcs.n	8000ddc <__udivmoddi4+0x2a0>
 8000d7e:	45b8      	cmp	r8, r7
 8000d80:	d92c      	bls.n	8000ddc <__udivmoddi4+0x2a0>
 8000d82:	3802      	subs	r0, #2
 8000d84:	4427      	add	r7, r4
 8000d86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d8a:	eba7 0708 	sub.w	r7, r7, r8
 8000d8e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d92:	454f      	cmp	r7, r9
 8000d94:	46c6      	mov	lr, r8
 8000d96:	4649      	mov	r1, r9
 8000d98:	d31a      	bcc.n	8000dd0 <__udivmoddi4+0x294>
 8000d9a:	d017      	beq.n	8000dcc <__udivmoddi4+0x290>
 8000d9c:	b15d      	cbz	r5, 8000db6 <__udivmoddi4+0x27a>
 8000d9e:	ebb3 020e 	subs.w	r2, r3, lr
 8000da2:	eb67 0701 	sbc.w	r7, r7, r1
 8000da6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000daa:	40f2      	lsrs	r2, r6
 8000dac:	ea4c 0202 	orr.w	r2, ip, r2
 8000db0:	40f7      	lsrs	r7, r6
 8000db2:	e9c5 2700 	strd	r2, r7, [r5]
 8000db6:	2600      	movs	r6, #0
 8000db8:	4631      	mov	r1, r6
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	462e      	mov	r6, r5
 8000dc0:	4628      	mov	r0, r5
 8000dc2:	e70b      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000dc4:	4606      	mov	r6, r0
 8000dc6:	e6e9      	b.n	8000b9c <__udivmoddi4+0x60>
 8000dc8:	4618      	mov	r0, r3
 8000dca:	e6fd      	b.n	8000bc8 <__udivmoddi4+0x8c>
 8000dcc:	4543      	cmp	r3, r8
 8000dce:	d2e5      	bcs.n	8000d9c <__udivmoddi4+0x260>
 8000dd0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dd4:	eb69 0104 	sbc.w	r1, r9, r4
 8000dd8:	3801      	subs	r0, #1
 8000dda:	e7df      	b.n	8000d9c <__udivmoddi4+0x260>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	e7d2      	b.n	8000d86 <__udivmoddi4+0x24a>
 8000de0:	4660      	mov	r0, ip
 8000de2:	e78d      	b.n	8000d00 <__udivmoddi4+0x1c4>
 8000de4:	4681      	mov	r9, r0
 8000de6:	e7b9      	b.n	8000d5c <__udivmoddi4+0x220>
 8000de8:	4666      	mov	r6, ip
 8000dea:	e775      	b.n	8000cd8 <__udivmoddi4+0x19c>
 8000dec:	4630      	mov	r0, r6
 8000dee:	e74a      	b.n	8000c86 <__udivmoddi4+0x14a>
 8000df0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df4:	4439      	add	r1, r7
 8000df6:	e713      	b.n	8000c20 <__udivmoddi4+0xe4>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	443c      	add	r4, r7
 8000dfc:	e724      	b.n	8000c48 <__udivmoddi4+0x10c>
 8000dfe:	bf00      	nop

08000e00 <__aeabi_idiv0>:
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop

08000e04 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e16:	4b22      	ldr	r3, [pc, #136]	; (8000ea0 <MX_ADC1_Init+0x9c>)
 8000e18:	4a22      	ldr	r2, [pc, #136]	; (8000ea4 <MX_ADC1_Init+0xa0>)
 8000e1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e1c:	4b20      	ldr	r3, [pc, #128]	; (8000ea0 <MX_ADC1_Init+0x9c>)
 8000e1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e24:	4b1e      	ldr	r3, [pc, #120]	; (8000ea0 <MX_ADC1_Init+0x9c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <MX_ADC1_Init+0x9c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e30:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <MX_ADC1_Init+0x9c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e36:	4b1a      	ldr	r3, [pc, #104]	; (8000ea0 <MX_ADC1_Init+0x9c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e3e:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <MX_ADC1_Init+0x9c>)
 8000e40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e44:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000e46:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <MX_ADC1_Init+0x9c>)
 8000e48:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000e4c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e4e:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <MX_ADC1_Init+0x9c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <MX_ADC1_Init+0x9c>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <MX_ADC1_Init+0x9c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <MX_ADC1_Init+0x9c>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e68:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <MX_ADC1_Init+0x9c>)
 8000e6a:	f001 fd0b 	bl	8002884 <HAL_ADC_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000e74:	f000 fcfa 	bl	800186c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e78:	2308      	movs	r3, #8
 8000e7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e80:	2300      	movs	r3, #0
 8000e82:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e84:	463b      	mov	r3, r7
 8000e86:	4619      	mov	r1, r3
 8000e88:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <MX_ADC1_Init+0x9c>)
 8000e8a:	f001 ffad 	bl	8002de8 <HAL_ADC_ConfigChannel>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000e94:	f000 fcea 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e98:	bf00      	nop
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	200001a4 	.word	0x200001a4
 8000ea4:	40012000 	.word	0x40012000

08000ea8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	; 0x28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a32      	ldr	r2, [pc, #200]	; (8000f90 <HAL_ADC_MspInit+0xe8>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d15e      	bne.n	8000f88 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	4b31      	ldr	r3, [pc, #196]	; (8000f94 <HAL_ADC_MspInit+0xec>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed2:	4a30      	ldr	r2, [pc, #192]	; (8000f94 <HAL_ADC_MspInit+0xec>)
 8000ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eda:	4b2e      	ldr	r3, [pc, #184]	; (8000f94 <HAL_ADC_MspInit+0xec>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b2a      	ldr	r3, [pc, #168]	; (8000f94 <HAL_ADC_MspInit+0xec>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a29      	ldr	r2, [pc, #164]	; (8000f94 <HAL_ADC_MspInit+0xec>)
 8000ef0:	f043 0302 	orr.w	r3, r3, #2
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b27      	ldr	r3, [pc, #156]	; (8000f94 <HAL_ADC_MspInit+0xec>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f02:	2301      	movs	r3, #1
 8000f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f06:	2303      	movs	r3, #3
 8000f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4619      	mov	r1, r3
 8000f14:	4820      	ldr	r0, [pc, #128]	; (8000f98 <HAL_ADC_MspInit+0xf0>)
 8000f16:	f003 fd05 	bl	8004924 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f1a:	4b20      	ldr	r3, [pc, #128]	; (8000f9c <HAL_ADC_MspInit+0xf4>)
 8000f1c:	4a20      	ldr	r2, [pc, #128]	; (8000fa0 <HAL_ADC_MspInit+0xf8>)
 8000f1e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f20:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <HAL_ADC_MspInit+0xf4>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f26:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <HAL_ADC_MspInit+0xf4>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f2c:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <HAL_ADC_MspInit+0xf4>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f32:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <HAL_ADC_MspInit+0xf4>)
 8000f34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f38:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f3a:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <HAL_ADC_MspInit+0xf4>)
 8000f3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f40:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f42:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <HAL_ADC_MspInit+0xf4>)
 8000f44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f48:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000f4a:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <HAL_ADC_MspInit+0xf4>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <HAL_ADC_MspInit+0xf4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <HAL_ADC_MspInit+0xf4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f5c:	480f      	ldr	r0, [pc, #60]	; (8000f9c <HAL_ADC_MspInit+0xf4>)
 8000f5e:	f003 f971 	bl	8004244 <HAL_DMA_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000f68:	f000 fc80 	bl	800186c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a0b      	ldr	r2, [pc, #44]	; (8000f9c <HAL_ADC_MspInit+0xf4>)
 8000f70:	639a      	str	r2, [r3, #56]	; 0x38
 8000f72:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <HAL_ADC_MspInit+0xf4>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	2012      	movs	r0, #18
 8000f7e:	f003 f92a 	bl	80041d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000f82:	2012      	movs	r0, #18
 8000f84:	f003 f943 	bl	800420e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f88:	bf00      	nop
 8000f8a:	3728      	adds	r7, #40	; 0x28
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40012000 	.word	0x40012000
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020400 	.word	0x40020400
 8000f9c:	200001ec 	.word	0x200001ec
 8000fa0:	40026410 	.word	0x40026410

08000fa4 <MX_APP_Init>:
/***********************************************************************************************************************
 * Public functions implementation
 **********************************************************************************************************************/

void MX_APP_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
    /* Initialize board LEDs */
    BSP_LED_Init(LED1);
 8000faa:	2000      	movs	r0, #0
 8000fac:	f001 fa42 	bl	8002434 <BSP_LED_Init>
    BSP_LED_Init(LED2);
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f001 fa3f 	bl	8002434 <BSP_LED_Init>
    BSP_LED_Init(LED3);
 8000fb6:	2002      	movs	r0, #2
 8000fb8:	f001 fa3c 	bl	8002434 <BSP_LED_Init>

    /* Initialize board buzzer */
    BSP_BUZZER_Init();
 8000fbc:	f001 f99a 	bl	80022f4 <BSP_BUZZER_Init>

    /* Initialize hardware */
    BOTONES_HW_Init();
 8000fc0:	f000 f920 	bl	8001204 <BOTONES_HW_Init>
    PEDAL_HW_Init();
 8000fc4:	f000 ff5c 	bl	8001e80 <PEDAL_HW_Init>
    PANTALLA_HW_Init();
 8000fc8:	f000 fed8 	bl	8001d7c <PANTALLA_HW_Init>
    CAN_HW_Init();
 8000fcc:	f000 f9b4 	bl	8001338 <CAN_HW_Init>

    /* Indicate that initialization was completed */
    for(int i=0; i<3; i++)
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	e01a      	b.n	800100c <MX_APP_Init+0x68>
    {
    	BSP_LED_On(LED1);
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f001 fa74 	bl	80024c4 <BSP_LED_On>
    	BSP_LED_On(LED2);
 8000fdc:	2001      	movs	r0, #1
 8000fde:	f001 fa71 	bl	80024c4 <BSP_LED_On>
    	BSP_LED_On(LED3);
 8000fe2:	2002      	movs	r0, #2
 8000fe4:	f001 fa6e 	bl	80024c4 <BSP_LED_On>

    	HAL_Delay(200);
 8000fe8:	20c8      	movs	r0, #200	; 0xc8
 8000fea:	f001 fc27 	bl	800283c <HAL_Delay>

    	BSP_LED_Off(LED1);
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f001 fa82 	bl	80024f8 <BSP_LED_Off>
    	BSP_LED_Off(LED2);
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f001 fa7f 	bl	80024f8 <BSP_LED_Off>
    	BSP_LED_Off(LED3);
 8000ffa:	2002      	movs	r0, #2
 8000ffc:	f001 fa7c 	bl	80024f8 <BSP_LED_Off>

    	HAL_Delay(200);
 8001000:	20c8      	movs	r0, #200	; 0xc8
 8001002:	f001 fc1b 	bl	800283c <HAL_Delay>
    for(int i=0; i<3; i++)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3301      	adds	r3, #1
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2b02      	cmp	r3, #2
 8001010:	dde1      	ble.n	8000fd6 <MX_APP_Init+0x32>
    }
}
 8001012:	bf00      	nop
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <MX_APP_Process>:

void MX_APP_Process(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	switch (app_state)
 8001020:	4b22      	ldr	r3, [pc, #136]	; (80010ac <MX_APP_Process+0x90>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <MX_APP_Process+0x12>
 8001028:	2b01      	cmp	r3, #1
 800102a:	d027      	beq.n	800107c <MX_APP_Process+0x60>

	    //CAN_APP_Process();

		break;
	}
}
 800102c:	e03b      	b.n	80010a6 <MX_APP_Process+0x8a>
		blink_tickstart = HAL_GetTick();
 800102e:	f001 fbf9 	bl	8002824 <HAL_GetTick>
 8001032:	4603      	mov	r3, r0
 8001034:	4a1e      	ldr	r2, [pc, #120]	; (80010b0 <MX_APP_Process+0x94>)
 8001036:	6013      	str	r3, [r2, #0]
			if( (HAL_GetTick() - blink_tickstart) > BLINK_TIME )
 8001038:	f001 fbf4 	bl	8002824 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <MX_APP_Process+0x94>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2bfa      	cmp	r3, #250	; 0xfa
 8001046:	d907      	bls.n	8001058 <MX_APP_Process+0x3c>
				BSP_LED_Toggle(LED1);
 8001048:	2000      	movs	r0, #0
 800104a:	f001 fa6f 	bl	800252c <BSP_LED_Toggle>
				blink_tickstart = HAL_GetTick();
 800104e:	f001 fbe9 	bl	8002824 <HAL_GetTick>
 8001052:	4603      	mov	r3, r0
 8001054:	4a16      	ldr	r2, [pc, #88]	; (80010b0 <MX_APP_Process+0x94>)
 8001056:	6013      	str	r3, [r2, #0]
			if (bus_can_input.control_ok == CAN_VALUE_MODULE_OK)
 8001058:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <MX_APP_Process+0x98>)
 800105a:	789b      	ldrb	r3, [r3, #2]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d1eb      	bne.n	8001038 <MX_APP_Process+0x1c>
				HAL_Delay(500);
 8001060:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001064:	f001 fbea 	bl	800283c <HAL_Delay>
				bus_can_output.perifericos_ok = CAN_VALUE_MODULE_OK;
 8001068:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <MX_APP_Process+0x9c>)
 800106a:	2201      	movs	r2, #1
 800106c:	70da      	strb	r2, [r3, #3]
				INDICATORS_Finish_StartUp();
 800106e:	f000 fb25 	bl	80016bc <INDICATORS_Finish_StartUp>
				app_state = kRUNNING;
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <MX_APP_Process+0x90>)
 8001074:	2201      	movs	r2, #1
 8001076:	701a      	strb	r2, [r3, #0]
				break;
 8001078:	bf00      	nop
		break;
 800107a:	e014      	b.n	80010a6 <MX_APP_Process+0x8a>
	    BOTONES_Process();
 800107c:	f000 f820 	bl	80010c0 <BOTONES_Process>
	    PEDAL_Process();
 8001080:	f000 fe82 	bl	8001d88 <PEDAL_Process>
	    PANTALLA_Process();
 8001084:	f000 fbf7 	bl	8001876 <PANTALLA_Process>
	    INDICATORS_Process();
 8001088:	f000 fb5f 	bl	800174a <INDICATORS_Process>
	    DECODE_DATA_Process();
 800108c:	f000 f99e 	bl	80013cc <DECODE_DATA_Process>
	    if (flag_rx_can == CAN_MSG_RECEIVED) {
 8001090:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <MX_APP_Process+0xa0>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d105      	bne.n	80010a4 <MX_APP_Process+0x88>
	    	flag_rx_can = CAN_MSG_NOT_RECEIVED;
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <MX_APP_Process+0xa0>)
 800109a:	2201      	movs	r2, #1
 800109c:	701a      	strb	r2, [r3, #0]
	    	BSP_LED_Toggle(LED2);
 800109e:	2001      	movs	r0, #1
 80010a0:	f001 fa44 	bl	800252c <BSP_LED_Toggle>
		break;
 80010a4:	bf00      	nop
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200000e4 	.word	0x200000e4
 80010b0:	200000e8 	.word	0x200000e8
 80010b4:	20000030 	.word	0x20000030
 80010b8:	2000002c 	.word	0x2000002c
 80010bc:	20000038 	.word	0x20000038

080010c0 <BOTONES_Process>:
 *
 * @param   None
 * @retval  None
 */
void BOTONES_Process(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	BOTONES_Update_HM_Btns();									// actualice pulsadores de hombre muerto en bus de datos
 80010c4:	f000 f814 	bl	80010f0 <BOTONES_Update_HM_Btns>

	BOTONES_Update_HM_State();									// actualice estado de hombre muerto en bus de datos
 80010c8:	f000 f836 	bl	8001138 <BOTONES_Update_HM_State>

	BOTONES_Send_HM_State( 	bus_data.hm_state,
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <BOTONES_Process+0x28>)
 80010ce:	78db      	ldrb	r3, [r3, #3]
 80010d0:	4906      	ldr	r1, [pc, #24]	; (80010ec <BOTONES_Process+0x2c>)
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f850 	bl	8001178 <BOTONES_Send_HM_State>
							&bus_can_output);					// envie estado hombre muerto a bus de salida CAN

	BOTONES_Send_DrivingMode_Btn( 	bus_data.btn_modo_manejo,
 80010d8:	4b03      	ldr	r3, [pc, #12]	; (80010e8 <BOTONES_Process+0x28>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	4903      	ldr	r1, [pc, #12]	; (80010ec <BOTONES_Process+0x2c>)
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 f864 	bl	80011ac <BOTONES_Send_DrivingMode_Btn>
									&bus_can_output);			// envie modo de manejo presionado a bus de salida CAN
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000000 	.word	0x20000000
 80010ec:	2000002c 	.word	0x2000002c

080010f0 <BOTONES_Update_HM_Btns>:
 *
 * @param None
 * @retval None
 */
static void BOTONES_Update_HM_Btns(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	/* Pulsador 1 hombre muerto */
	if(HAL_GPIO_ReadPin(BTN_HM1_GPIO_Port, BTN_HM1_Pin) == GPIO_PIN_RESET)
 80010f4:	2108      	movs	r1, #8
 80010f6:	480e      	ldr	r0, [pc, #56]	; (8001130 <BOTONES_Update_HM_Btns+0x40>)
 80010f8:	f003 fda8 	bl	8004c4c <HAL_GPIO_ReadPin>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d103      	bne.n	800110a <BOTONES_Update_HM_Btns+0x1a>
	{
		bus_data.btn_hm1 = kBTN_PRESSED;
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <BOTONES_Update_HM_Btns+0x44>)
 8001104:	2201      	movs	r2, #1
 8001106:	705a      	strb	r2, [r3, #1]
 8001108:	e002      	b.n	8001110 <BOTONES_Update_HM_Btns+0x20>
	}
	else
	{
		bus_data.btn_hm1 = kBTN_NOT_PRESSED;
 800110a:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <BOTONES_Update_HM_Btns+0x44>)
 800110c:	2200      	movs	r2, #0
 800110e:	705a      	strb	r2, [r3, #1]
	}

	/* Pulsador 2 hombre muerto */
	if(HAL_GPIO_ReadPin(BTN_HM2_GPIO_Port, BTN_HM2_Pin) == GPIO_PIN_RESET)
 8001110:	2110      	movs	r1, #16
 8001112:	4807      	ldr	r0, [pc, #28]	; (8001130 <BOTONES_Update_HM_Btns+0x40>)
 8001114:	f003 fd9a 	bl	8004c4c <HAL_GPIO_ReadPin>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d103      	bne.n	8001126 <BOTONES_Update_HM_Btns+0x36>
	{
		bus_data.btn_hm2 = kBTN_PRESSED;
 800111e:	4b05      	ldr	r3, [pc, #20]	; (8001134 <BOTONES_Update_HM_Btns+0x44>)
 8001120:	2201      	movs	r2, #1
 8001122:	709a      	strb	r2, [r3, #2]
	}
	else
	{
		bus_data.btn_hm2 = kBTN_NOT_PRESSED;
	}
}
 8001124:	e002      	b.n	800112c <BOTONES_Update_HM_Btns+0x3c>
		bus_data.btn_hm2 = kBTN_NOT_PRESSED;
 8001126:	4b03      	ldr	r3, [pc, #12]	; (8001134 <BOTONES_Update_HM_Btns+0x44>)
 8001128:	2200      	movs	r2, #0
 800112a:	709a      	strb	r2, [r3, #2]
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40021000 	.word	0x40021000
 8001134:	20000000 	.word	0x20000000

08001138 <BOTONES_Update_HM_State>:
 *
 * @param None
 * @retval None
 */
static void BOTONES_Update_HM_State(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
	/* Ambos pulsadores de hombre muerto no presionados */
	if(bus_data.btn_hm1 == kBTN_NOT_PRESSED && bus_data.btn_hm2 == kBTN_NOT_PRESSED)
 800113c:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <BOTONES_Update_HM_State+0x3c>)
 800113e:	785b      	ldrb	r3, [r3, #1]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d107      	bne.n	8001154 <BOTONES_Update_HM_State+0x1c>
 8001144:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <BOTONES_Update_HM_State+0x3c>)
 8001146:	789b      	ldrb	r3, [r3, #2]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d103      	bne.n	8001154 <BOTONES_Update_HM_State+0x1c>
	{
		bus_data.hm_state = kHOMBRE_MUERTO_ON;
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <BOTONES_Update_HM_State+0x3c>)
 800114e:	2201      	movs	r2, #1
 8001150:	70da      	strb	r2, [r3, #3]
	/* Cualquiera de los pulsadores de hombre muerto presionados */
	else if(bus_data.btn_hm1 == kBTN_PRESSED || bus_data.btn_hm2 == kBTN_PRESSED)
	{
		bus_data.hm_state = kHOMBRE_MUERTO_OFF;
	}
}
 8001152:	e00a      	b.n	800116a <BOTONES_Update_HM_State+0x32>
	else if(bus_data.btn_hm1 == kBTN_PRESSED || bus_data.btn_hm2 == kBTN_PRESSED)
 8001154:	4b07      	ldr	r3, [pc, #28]	; (8001174 <BOTONES_Update_HM_State+0x3c>)
 8001156:	785b      	ldrb	r3, [r3, #1]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d003      	beq.n	8001164 <BOTONES_Update_HM_State+0x2c>
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <BOTONES_Update_HM_State+0x3c>)
 800115e:	789b      	ldrb	r3, [r3, #2]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d102      	bne.n	800116a <BOTONES_Update_HM_State+0x32>
		bus_data.hm_state = kHOMBRE_MUERTO_OFF;
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <BOTONES_Update_HM_State+0x3c>)
 8001166:	2200      	movs	r2, #0
 8001168:	70da      	strb	r2, [r3, #3]
}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	20000000 	.word	0x20000000

08001178 <BOTONES_Send_HM_State>:
 *
 * @param to_send           Estado de hombre muerto a enviar
 * @param bus_can_output    Puntero a estructura de tipo typedef_bus2_t (bus de salida CAN)
 */
static void BOTONES_Send_HM_State(hm_state_t to_send, typedef_bus2_t* bus_can_output)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	6039      	str	r1, [r7, #0]
 8001182:	71fb      	strb	r3, [r7, #7]
    /* Envío a bus de salida CAN */
    switch (to_send)
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d005      	beq.n	8001196 <BOTONES_Send_HM_State+0x1e>
 800118a:	2b01      	cmp	r3, #1
 800118c:	d107      	bne.n	800119e <BOTONES_Send_HM_State+0x26>
    {
    case kHOMBRE_MUERTO_ON:
        bus_can_output->hombre_muerto = CAN_VALUE_HM_PRESSED;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	2201      	movs	r2, #1
 8001192:	705a      	strb	r2, [r3, #1]
        break;
 8001194:	e004      	b.n	80011a0 <BOTONES_Send_HM_State+0x28>
    case kHOMBRE_MUERTO_OFF:
        bus_can_output->hombre_muerto = CAN_VALUE_HM_NOT_PRESSED;
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	2202      	movs	r2, #2
 800119a:	705a      	strb	r2, [r3, #1]
        break;
 800119c:	e000      	b.n	80011a0 <BOTONES_Send_HM_State+0x28>
    default:
        break;
 800119e:	bf00      	nop
    }
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <BOTONES_Send_DrivingMode_Btn>:
 *
 * @param to_send           Modo de manejo presionado a enviar
 * @param bus_can_output    Puntero a estructura de tipo typedef_bus2_t (bus de salida CAN)
 */
static void BOTONES_Send_DrivingMode_Btn(btn_modo_manejo_t to_send, typedef_bus2_t* bus_can_output)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	71fb      	strb	r3, [r7, #7]
    /* Envío a bus de salida CAN */
    switch (to_send)
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	2b03      	cmp	r3, #3
 80011bc:	d81a      	bhi.n	80011f4 <BOTONES_Send_DrivingMode_Btn+0x48>
 80011be:	a201      	add	r2, pc, #4	; (adr r2, 80011c4 <BOTONES_Send_DrivingMode_Btn+0x18>)
 80011c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c4:	080011d5 	.word	0x080011d5
 80011c8:	080011dd 	.word	0x080011dd
 80011cc:	080011e5 	.word	0x080011e5
 80011d0:	080011ed 	.word	0x080011ed
    {
    case kBTN_NONE:
        bus_can_output->botones_cambio_estado = CAN_VALUE_BTN_NONE;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	2204      	movs	r2, #4
 80011d8:	709a      	strb	r2, [r3, #2]
        break;
 80011da:	e00c      	b.n	80011f6 <BOTONES_Send_DrivingMode_Btn+0x4a>
    case kBTN_ECO:
        bus_can_output->botones_cambio_estado = CAN_VALUE_BTN_ECO;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	2202      	movs	r2, #2
 80011e0:	709a      	strb	r2, [r3, #2]
        break;
 80011e2:	e008      	b.n	80011f6 <BOTONES_Send_DrivingMode_Btn+0x4a>
    case kBTN_NORMAL:
        bus_can_output->botones_cambio_estado = CAN_VALUE_BTN_NORMAL;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	2201      	movs	r2, #1
 80011e8:	709a      	strb	r2, [r3, #2]
        break;
 80011ea:	e004      	b.n	80011f6 <BOTONES_Send_DrivingMode_Btn+0x4a>
    case kBTN_SPORT:
        bus_can_output->botones_cambio_estado = CAN_VALUE_BTN_SPORT;
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	2203      	movs	r2, #3
 80011f0:	709a      	strb	r2, [r3, #2]
        break;
 80011f2:	e000      	b.n	80011f6 <BOTONES_Send_DrivingMode_Btn+0x4a>
    default:
        break;
 80011f4:	bf00      	nop
    }
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop

08001204 <BOTONES_HW_Init>:
/***********************************************************************************************************************
 * Public functions implementation
 **********************************************************************************************************************/

void BOTONES_HW_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
    MX_GPIO_Init();
 8001208:	f000 f9b6 	bl	8001578 <MX_GPIO_Init>
}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}

08001210 <MX_CAN2_Init>:

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <MX_CAN2_Init+0x64>)
 8001216:	4a18      	ldr	r2, [pc, #96]	; (8001278 <MX_CAN2_Init+0x68>)
 8001218:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 800121a:	4b16      	ldr	r3, [pc, #88]	; (8001274 <MX_CAN2_Init+0x64>)
 800121c:	2210      	movs	r2, #16
 800121e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <MX_CAN2_Init+0x64>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001226:	4b13      	ldr	r3, [pc, #76]	; (8001274 <MX_CAN2_Init+0x64>)
 8001228:	2200      	movs	r2, #0
 800122a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_5TQ;
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_CAN2_Init+0x64>)
 800122e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001232:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001234:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <MX_CAN2_Init+0x64>)
 8001236:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800123a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800123c:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <MX_CAN2_Init+0x64>)
 800123e:	2200      	movs	r2, #0
 8001240:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001242:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <MX_CAN2_Init+0x64>)
 8001244:	2200      	movs	r2, #0
 8001246:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001248:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <MX_CAN2_Init+0x64>)
 800124a:	2200      	movs	r2, #0
 800124c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <MX_CAN2_Init+0x64>)
 8001250:	2201      	movs	r2, #1
 8001252:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001254:	4b07      	ldr	r3, [pc, #28]	; (8001274 <MX_CAN2_Init+0x64>)
 8001256:	2200      	movs	r2, #0
 8001258:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <MX_CAN2_Init+0x64>)
 800125c:	2200      	movs	r2, #0
 800125e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001260:	4804      	ldr	r0, [pc, #16]	; (8001274 <MX_CAN2_Init+0x64>)
 8001262:	f002 f87b 	bl	800335c <HAL_CAN_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 800126c:	f000 fafe 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	2000024c 	.word	0x2000024c
 8001278:	40006800 	.word	0x40006800

0800127c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	; 0x28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN2)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a24      	ldr	r2, [pc, #144]	; (800132c <HAL_CAN_MspInit+0xb0>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d142      	bne.n	8001324 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* CAN2 clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	4b23      	ldr	r3, [pc, #140]	; (8001330 <HAL_CAN_MspInit+0xb4>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	4a22      	ldr	r2, [pc, #136]	; (8001330 <HAL_CAN_MspInit+0xb4>)
 80012a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012ac:	6413      	str	r3, [r2, #64]	; 0x40
 80012ae:	4b20      	ldr	r3, [pc, #128]	; (8001330 <HAL_CAN_MspInit+0xb4>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	4b1c      	ldr	r3, [pc, #112]	; (8001330 <HAL_CAN_MspInit+0xb4>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	4a1b      	ldr	r2, [pc, #108]	; (8001330 <HAL_CAN_MspInit+0xb4>)
 80012c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012c8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ca:	4b19      	ldr	r3, [pc, #100]	; (8001330 <HAL_CAN_MspInit+0xb4>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <HAL_CAN_MspInit+0xb4>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a14      	ldr	r2, [pc, #80]	; (8001330 <HAL_CAN_MspInit+0xb4>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b12      	ldr	r3, [pc, #72]	; (8001330 <HAL_CAN_MspInit+0xb4>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80012f2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80012f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001300:	2303      	movs	r3, #3
 8001302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001304:	2309      	movs	r3, #9
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	4619      	mov	r1, r3
 800130e:	4809      	ldr	r0, [pc, #36]	; (8001334 <HAL_CAN_MspInit+0xb8>)
 8001310:	f003 fb08 	bl	8004924 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8001314:	2200      	movs	r2, #0
 8001316:	2100      	movs	r1, #0
 8001318:	2040      	movs	r0, #64	; 0x40
 800131a:	f002 ff5c 	bl	80041d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800131e:	2040      	movs	r0, #64	; 0x40
 8001320:	f002 ff75 	bl	800420e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001324:	bf00      	nop
 8001326:	3728      	adds	r7, #40	; 0x28
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40006800 	.word	0x40006800
 8001330:	40023800 	.word	0x40023800
 8001334:	40020400 	.word	0x40020400

08001338 <CAN_HW_Init>:
/***********************************************************************************************************************
 * Public functions implementation
 **********************************************************************************************************************/

void CAN_HW_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af04      	add	r7, sp, #16
#if USE_CUSTOM_CAN_API_DRIVER == 1
	/* Inicializa CAN usando driver */
	CAN_API_Init(	&can_obj,
 800133e:	4b07      	ldr	r3, [pc, #28]	; (800135c <CAN_HW_Init+0x24>)
 8001340:	9302      	str	r3, [sp, #8]
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <CAN_HW_Init+0x28>)
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	4b07      	ldr	r3, [pc, #28]	; (8001364 <CAN_HW_Init+0x2c>)
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <CAN_HW_Init+0x30>)
 800134c:	2200      	movs	r2, #0
 800134e:	2100      	movs	r1, #0
 8001350:	4806      	ldr	r0, [pc, #24]	; (800136c <CAN_HW_Init+0x34>)
 8001352:	f001 f905 	bl	8002560 <CAN_API_Init>

		/* Start time base trigger CAN timer */
		HAL_TIM_Base_Start_IT(&htim7);

#endif /* (USE_CUSTOM_CAN_API_DRIVER) */
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	080026c1 	.word	0x080026c1
 8001360:	08002691 	.word	0x08002691
 8001364:	0800262d 	.word	0x0800262d
 8001368:	080025d5 	.word	0x080025d5
 800136c:	20000274 	.word	0x20000274

08001370 <HAL_CAN_RxFifo0MsgPendingCallback>:

/*
 *  Callback mensaje CAN recibido
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
    /* The flag indicates that the callback was called */
    flag_rx_can = CAN_MSG_RECEIVED;
 8001378:	4b07      	ldr	r3, [pc, #28]	; (8001398 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]
	if(HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
	{
		Error_Handler();
	}
#else
	if(CAN_API_Read_Message(&can_obj) != CAN_STATUS_OK)
 800137e:	4807      	ldr	r0, [pc, #28]	; (800139c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001380:	f001 f916 	bl	80025b0 <CAN_API_Read_Message>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		Error_Handler();
 800138a:	f000 fa6f 	bl	800186c <Error_Handler>
	}
#endif /* (USE_CUSTOM_CAN_API_DRIVER) */
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000038 	.word	0x20000038
 800139c:	20000274 	.word	0x20000274

080013a0 <HAL_TIM_PeriodElapsedCallback>:

/*
 * Callback timer trigger de transmisión de datos de bus de salida CAN a módulo CAN
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	if(htim == &htim7)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a06      	ldr	r2, [pc, #24]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d105      	bne.n	80013bc <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		/* Toggle LED 1 (Red LED) */
		BSP_LED_Toggle(LED1);
 80013b0:	2000      	movs	r0, #0
 80013b2:	f001 f8bb 	bl	800252c <BSP_LED_Toggle>

		/* The flag indicates that the callback was called */
		flag_tx_can = CAN_TX_READY;
 80013b6:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
	}
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	200002f4 	.word	0x200002f4
 80013c8:	200000ec 	.word	0x200000ec

080013cc <DECODE_DATA_Process>:
 *
 * @param None
 * @retval None
 */
void DECODE_DATA_Process(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
    if (flag_decodificar == DECODIFICA)
 80013d0:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <DECODE_DATA_Process+0x24>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d108      	bne.n	80013ea <DECODE_DATA_Process+0x1e>
    {
    	DECODE_DATA_Decode_Control();
 80013d8:	f000 f80c 	bl	80013f4 <DECODE_DATA_Decode_Control>

    	DECODE_DATA_Decode_Bms();
 80013dc:	f000 f862 	bl	80014a4 <DECODE_DATA_Decode_Bms>

    	DECODE_DATA_Decode_Inversor();
 80013e0:	f000 f894 	bl	800150c <DECODE_DATA_Decode_Inversor>

        flag_decodificar = NO_DECODIFICA;
 80013e4:	4b02      	ldr	r3, [pc, #8]	; (80013f0 <DECODE_DATA_Process+0x24>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	701a      	strb	r2, [r3, #0]
    }
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000039 	.word	0x20000039

080013f4 <DECODE_DATA_Decode_Control>:
 * los datos en la estructura Rx_Control del tipo rx_control_vars_t y que
 * se encuentra en el bus_data.
 *
 */
static void DECODE_DATA_Decode_Control(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
    /* Decodifica info de Control */
    switch (bus_can_input.control_ok)
 80013f8:	4b28      	ldr	r3, [pc, #160]	; (800149c <DECODE_DATA_Decode_Control+0xa8>)
 80013fa:	789b      	ldrb	r3, [r3, #2]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d002      	beq.n	8001406 <DECODE_DATA_Decode_Control+0x12>
 8001400:	2b02      	cmp	r3, #2
 8001402:	d005      	beq.n	8001410 <DECODE_DATA_Decode_Control+0x1c>
 8001404:	e009      	b.n	800141a <DECODE_DATA_Decode_Control+0x26>
    {
    case CAN_VALUE_MODULE_OK:
        Rx_Control->control_ok = kMODULE_INFO_OK;
 8001406:	4b26      	ldr	r3, [pc, #152]	; (80014a0 <DECODE_DATA_Decode_Control+0xac>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2200      	movs	r2, #0
 800140c:	709a      	strb	r2, [r3, #2]
        break;
 800140e:	e004      	b.n	800141a <DECODE_DATA_Decode_Control+0x26>
    case CAN_VALUE_MODULE_ERROR:
        Rx_Control->control_ok = kMODULE_INFO_ERROR;
 8001410:	4b23      	ldr	r3, [pc, #140]	; (80014a0 <DECODE_DATA_Decode_Control+0xac>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2201      	movs	r2, #1
 8001416:	709a      	strb	r2, [r3, #2]
        break;
 8001418:	bf00      	nop
    }

	/* Decodifica modos de manejo de Control */
    switch (bus_can_input.estado_manejo)
 800141a:	4b20      	ldr	r3, [pc, #128]	; (800149c <DECODE_DATA_Decode_Control+0xa8>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b04      	cmp	r3, #4
 8001420:	d00f      	beq.n	8001442 <DECODE_DATA_Decode_Control+0x4e>
 8001422:	2b04      	cmp	r3, #4
 8001424:	dc12      	bgt.n	800144c <DECODE_DATA_Decode_Control+0x58>
 8001426:	2b02      	cmp	r3, #2
 8001428:	d006      	beq.n	8001438 <DECODE_DATA_Decode_Control+0x44>
 800142a:	2b03      	cmp	r3, #3
 800142c:	d10e      	bne.n	800144c <DECODE_DATA_Decode_Control+0x58>
    {
    case CAN_VALUE_DRIVING_MODE_ECO:
    	Rx_Control->driving_mode = kDRIVING_MODE_ECO;
 800142e:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <DECODE_DATA_Decode_Control+0xac>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2200      	movs	r2, #0
 8001434:	701a      	strb	r2, [r3, #0]
        break;
 8001436:	e009      	b.n	800144c <DECODE_DATA_Decode_Control+0x58>
    case CAN_VALUE_DRIVING_MODE_NORMAL:
    	Rx_Control->driving_mode = kDRIVING_MODE_NORMAL;
 8001438:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <DECODE_DATA_Decode_Control+0xac>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2201      	movs	r2, #1
 800143e:	701a      	strb	r2, [r3, #0]
        break;
 8001440:	e004      	b.n	800144c <DECODE_DATA_Decode_Control+0x58>
    case CAN_VALUE_DRIVING_MODE_SPORT:
    	Rx_Control->driving_mode = kDRIVING_MODE_SPORT;
 8001442:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <DECODE_DATA_Decode_Control+0xac>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2202      	movs	r2, #2
 8001448:	701a      	strb	r2, [r3, #0]
        break;
 800144a:	bf00      	nop
    }

    /* Decodifica fallas de Control */
    switch (bus_can_input.estado_falla)
 800144c:	4b13      	ldr	r3, [pc, #76]	; (800149c <DECODE_DATA_Decode_Control+0xa8>)
 800144e:	785b      	ldrb	r3, [r3, #1]
 8001450:	2b03      	cmp	r3, #3
 8001452:	d81e      	bhi.n	8001492 <DECODE_DATA_Decode_Control+0x9e>
 8001454:	a201      	add	r2, pc, #4	; (adr r2, 800145c <DECODE_DATA_Decode_Control+0x68>)
 8001456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145a:	bf00      	nop
 800145c:	0800146d 	.word	0x0800146d
 8001460:	08001477 	.word	0x08001477
 8001464:	08001481 	.word	0x08001481
 8001468:	08001489 	.word	0x08001489
    {
    case CAN_VALUE_FAILURE_OK:
    	Rx_Control->failure = kFAILURE_OK;
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <DECODE_DATA_Decode_Control+0xac>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2200      	movs	r2, #0
 8001472:	705a      	strb	r2, [r3, #1]
        break;
 8001474:	e00d      	b.n	8001492 <DECODE_DATA_Decode_Control+0x9e>
    case CAN_VALUE_FAILURE_CAUTION1:
    	Rx_Control->failure = kFAILURE_CAUTION1;
 8001476:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <DECODE_DATA_Decode_Control+0xac>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2201      	movs	r2, #1
 800147c:	705a      	strb	r2, [r3, #1]
        break;
 800147e:	e008      	b.n	8001492 <DECODE_DATA_Decode_Control+0x9e>
    case CAN_VALUE_FAILURE_CAUTION2:
    	Rx_Control->failure = kFAILURE_CAUTION2;
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <DECODE_DATA_Decode_Control+0xac>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2202      	movs	r2, #2
 8001486:	705a      	strb	r2, [r3, #1]
    case CAN_VALUE_FAILURE_AUTOKILL:
    	Rx_Control->failure = kFAILURE_AUTOKILL;
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <DECODE_DATA_Decode_Control+0xac>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2203      	movs	r2, #3
 800148e:	705a      	strb	r2, [r3, #1]
        break;
 8001490:	bf00      	nop
    }
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	20000030 	.word	0x20000030
 80014a0:	2000003c 	.word	0x2000003c

080014a4 <DECODE_DATA_Decode_Bms>:
 * los datos en la estructura Rx_Bms del tipo rx_bms_vars_t y que
 * se encuentra en el bus_data.
 *
 */
static void DECODE_DATA_Decode_Bms(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
	/* Decodifica las variables analógicas de BMS */
    Rx_Bms->voltaje = (rx_var_t)bus_can_input.voltaje_bms;
 80014a8:	4b16      	ldr	r3, [pc, #88]	; (8001504 <DECODE_DATA_Decode_Bms+0x60>)
 80014aa:	78da      	ldrb	r2, [r3, #3]
 80014ac:	4b16      	ldr	r3, [pc, #88]	; (8001508 <DECODE_DATA_Decode_Bms+0x64>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	ee07 2a90 	vmov	s15, r2
 80014b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014b8:	edc3 7a00 	vstr	s15, [r3]

    Rx_Bms->corriente = (rx_var_t)bus_can_input.corriente_bms;
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <DECODE_DATA_Decode_Bms+0x60>)
 80014be:	791a      	ldrb	r2, [r3, #4]
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <DECODE_DATA_Decode_Bms+0x64>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	ee07 2a90 	vmov	s15, r2
 80014c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014cc:	edc3 7a01 	vstr	s15, [r3, #4]

    Rx_Bms->potencia = (rx_var_t)bus_can_input.potencia_bms;
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <DECODE_DATA_Decode_Bms+0x60>)
 80014d2:	795a      	ldrb	r2, [r3, #5]
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <DECODE_DATA_Decode_Bms+0x64>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	ee07 2a90 	vmov	s15, r2
 80014dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014e0:	edc3 7a03 	vstr	s15, [r3, #12]

    Rx_Bms->nivel_bateria = (rx_var_t)bus_can_input.nivel_bateria_bms;
 80014e4:	4b07      	ldr	r3, [pc, #28]	; (8001504 <DECODE_DATA_Decode_Bms+0x60>)
 80014e6:	799a      	ldrb	r2, [r3, #6]
 80014e8:	4b07      	ldr	r3, [pc, #28]	; (8001508 <DECODE_DATA_Decode_Bms+0x64>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	ee07 2a90 	vmov	s15, r2
 80014f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014f4:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000030 	.word	0x20000030
 8001508:	20000040 	.word	0x20000040

0800150c <DECODE_DATA_Decode_Inversor>:
 * los datos en la estructura Rx_Inversor del tipo rx_inversor_vars_t y
 * que se encuentra en el bus_data.
 *
 */
static void DECODE_DATA_Decode_Inversor(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
	/* Decodifica las variables analógicas de Inversor */
    Rx_Inversor->velocidad = (rx_var_t)bus_can_input.velocidad_inv;
 8001510:	4b07      	ldr	r3, [pc, #28]	; (8001530 <DECODE_DATA_Decode_Inversor+0x24>)
 8001512:	79da      	ldrb	r2, [r3, #7]
 8001514:	4b07      	ldr	r3, [pc, #28]	; (8001534 <DECODE_DATA_Decode_Inversor+0x28>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	ee07 2a90 	vmov	s15, r2
 800151c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001520:	edc3 7a00 	vstr	s15, [r3]
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	20000030 	.word	0x20000030
 8001534:	20000044 	.word	0x20000044

08001538 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <MX_DMA_Init+0x3c>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a0b      	ldr	r2, [pc, #44]	; (8001574 <MX_DMA_Init+0x3c>)
 8001548:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <MX_DMA_Init+0x3c>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	2100      	movs	r1, #0
 800155e:	2038      	movs	r0, #56	; 0x38
 8001560:	f002 fe39 	bl	80041d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001564:	2038      	movs	r0, #56	; 0x38
 8001566:	f002 fe52 	bl	800420e <HAL_NVIC_EnableIRQ>

}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40023800 	.word	0x40023800

08001578 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
 800158c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	4b46      	ldr	r3, [pc, #280]	; (80016ac <MX_GPIO_Init+0x134>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a45      	ldr	r2, [pc, #276]	; (80016ac <MX_GPIO_Init+0x134>)
 8001598:	f043 0310 	orr.w	r3, r3, #16
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b43      	ldr	r3, [pc, #268]	; (80016ac <MX_GPIO_Init+0x134>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	4b3f      	ldr	r3, [pc, #252]	; (80016ac <MX_GPIO_Init+0x134>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a3e      	ldr	r2, [pc, #248]	; (80016ac <MX_GPIO_Init+0x134>)
 80015b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b3c      	ldr	r3, [pc, #240]	; (80016ac <MX_GPIO_Init+0x134>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	4b38      	ldr	r3, [pc, #224]	; (80016ac <MX_GPIO_Init+0x134>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a37      	ldr	r2, [pc, #220]	; (80016ac <MX_GPIO_Init+0x134>)
 80015d0:	f043 0302 	orr.w	r3, r3, #2
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b35      	ldr	r3, [pc, #212]	; (80016ac <MX_GPIO_Init+0x134>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	4b31      	ldr	r3, [pc, #196]	; (80016ac <MX_GPIO_Init+0x134>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a30      	ldr	r2, [pc, #192]	; (80016ac <MX_GPIO_Init+0x134>)
 80015ec:	f043 0304 	orr.w	r3, r3, #4
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b2e      	ldr	r3, [pc, #184]	; (80016ac <MX_GPIO_Init+0x134>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0304 	and.w	r3, r3, #4
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	603b      	str	r3, [r7, #0]
 8001602:	4b2a      	ldr	r3, [pc, #168]	; (80016ac <MX_GPIO_Init+0x134>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a29      	ldr	r2, [pc, #164]	; (80016ac <MX_GPIO_Init+0x134>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b27      	ldr	r3, [pc, #156]	; (80016ac <MX_GPIO_Init+0x134>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	603b      	str	r3, [r7, #0]
 8001618:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ECO_GPIO_Port, LED_ECO_Pin, GPIO_PIN_RESET);
 800161a:	2200      	movs	r2, #0
 800161c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001620:	4823      	ldr	r0, [pc, #140]	; (80016b0 <MX_GPIO_Init+0x138>)
 8001622:	f003 fb2b 	bl	8004c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_NORMAL_Pin|LED_SPORT_Pin, GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 800162c:	4821      	ldr	r0, [pc, #132]	; (80016b4 <MX_GPIO_Init+0x13c>)
 800162e:	f003 fb25 	bl	8004c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BTN_HM1_Pin|BTN_HM2_Pin;
 8001632:	2318      	movs	r3, #24
 8001634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001636:	2300      	movs	r3, #0
 8001638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	4619      	mov	r1, r3
 8001644:	481c      	ldr	r0, [pc, #112]	; (80016b8 <MX_GPIO_Init+0x140>)
 8001646:	f003 f96d 	bl	8004924 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_ECO_Pin;
 800164a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800164e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001650:	2301      	movs	r3, #1
 8001652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_ECO_GPIO_Port, &GPIO_InitStruct);
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	4619      	mov	r1, r3
 8001662:	4813      	ldr	r0, [pc, #76]	; (80016b0 <MX_GPIO_Init+0x138>)
 8001664:	f003 f95e 	bl	8004924 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BTN_ECO_Pin|BTN_NORMAL_Pin|BTN_SPORT_Pin;
 8001668:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 800166c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800166e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	4619      	mov	r1, r3
 800167e:	480d      	ldr	r0, [pc, #52]	; (80016b4 <MX_GPIO_Init+0x13c>)
 8001680:	f003 f950 	bl	8004924 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_NORMAL_Pin|LED_SPORT_Pin;
 8001684:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168a:	2301      	movs	r3, #1
 800168c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2300      	movs	r3, #0
 8001694:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001696:	f107 0314 	add.w	r3, r7, #20
 800169a:	4619      	mov	r1, r3
 800169c:	4805      	ldr	r0, [pc, #20]	; (80016b4 <MX_GPIO_Init+0x13c>)
 800169e:	f003 f941 	bl	8004924 <HAL_GPIO_Init>

}
 80016a2:	bf00      	nop
 80016a4:	3728      	adds	r7, #40	; 0x28
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40020800 	.word	0x40020800
 80016b4:	40020000 	.word	0x40020000
 80016b8:	40021000 	.word	0x40021000

080016bc <INDICATORS_Finish_StartUp>:
 *
 * @param None
 * @retval None
 */
void INDICATORS_Finish_StartUp(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
    uint32_t tickstart;

    uint32_t blink_tickstart;

    BSP_BUZZER_On();
 80016c2:	f000 fe9f 	bl	8002404 <BSP_BUZZER_On>

    tickstart = HAL_GetTick();      // get ticks for the turn off time of LEDs and buzzer
 80016c6:	f001 f8ad 	bl	8002824 <HAL_GetTick>
 80016ca:	6038      	str	r0, [r7, #0]

    blink_tickstart = tickstart;    // ticks for the blinking of the LEDs
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	607b      	str	r3, [r7, #4]

    BSP_LED_Off(LED1);
 80016d0:	2000      	movs	r0, #0
 80016d2:	f000 ff11 	bl	80024f8 <BSP_LED_Off>
    BSP_LED_Off(LED2);
 80016d6:	2001      	movs	r0, #1
 80016d8:	f000 ff0e 	bl	80024f8 <BSP_LED_Off>
    BSP_LED_Off(LED3);
 80016dc:	2002      	movs	r0, #2
 80016de:	f000 ff0b 	bl	80024f8 <BSP_LED_Off>

    while(1)
    {
        if( (HAL_GetTick() - blink_tickstart) > BLINK_TIME )  		// 250ms
 80016e2:	f001 f89f 	bl	8002824 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2bfa      	cmp	r3, #250	; 0xfa
 80016ee:	d90b      	bls.n	8001708 <INDICATORS_Finish_StartUp+0x4c>
        {
            BSP_LED_Toggle(LED1);
 80016f0:	2000      	movs	r0, #0
 80016f2:	f000 ff1b 	bl	800252c <BSP_LED_Toggle>
            BSP_LED_Toggle(LED2);
 80016f6:	2001      	movs	r0, #1
 80016f8:	f000 ff18 	bl	800252c <BSP_LED_Toggle>
            BSP_LED_Toggle(LED3);
 80016fc:	2002      	movs	r0, #2
 80016fe:	f000 ff15 	bl	800252c <BSP_LED_Toggle>

            blink_tickstart = HAL_GetTick();
 8001702:	f001 f88f 	bl	8002824 <HAL_GetTick>
 8001706:	6078      	str	r0, [r7, #4]
        }

        if( (HAL_GetTick() - tickstart) > BUZZER_TURNOFF_TIME )   	// 2s
 8001708:	f001 f88c 	bl	8002824 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001716:	d901      	bls.n	800171c <INDICATORS_Finish_StartUp+0x60>
        {
            BSP_BUZZER_Off();
 8001718:	f000 fe80 	bl	800241c <BSP_BUZZER_Off>
        }

        if( (HAL_GetTick() - tickstart) > LEDS_TURNOFF_TIME )   	// 3s
 800171c:	f001 f882 	bl	8002824 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800172a:	4293      	cmp	r3, r2
 800172c:	d9d9      	bls.n	80016e2 <INDICATORS_Finish_StartUp+0x26>
        {
            BSP_LED_Off(LED1);
 800172e:	2000      	movs	r0, #0
 8001730:	f000 fee2 	bl	80024f8 <BSP_LED_Off>
            BSP_LED_Off(LED2);
 8001734:	2001      	movs	r0, #1
 8001736:	f000 fedf 	bl	80024f8 <BSP_LED_Off>
            BSP_LED_Off(LED3);
 800173a:	2002      	movs	r0, #2
 800173c:	f000 fedc 	bl	80024f8 <BSP_LED_Off>

            break;  // startup is completed
 8001740:	bf00      	nop
        }
    }
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <INDICATORS_Process>:
 *
 * @param None
 * @retval None
 */
void INDICATORS_Process(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0
	//BSP_LED_Off(LED1);
	//BSP_LED_Off(LED2);
	//BSP_LED_Off(LED3);
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800175c:	f000 fffc 	bl	8002758 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001760:	f000 f818 	bl	8001794 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* USER CODE BEGIN 2 */

  /* Turn driving modes buttons LEDs on */
  HAL_GPIO_TogglePin(LED_ECO_GPIO_Port, LED_ECO_Pin);
 8001764:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001768:	4808      	ldr	r0, [pc, #32]	; (800178c <main+0x34>)
 800176a:	f003 faa0 	bl	8004cae <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(LED_NORMAL_GPIO_Port, LED_NORMAL_Pin);
 800176e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001772:	4807      	ldr	r0, [pc, #28]	; (8001790 <main+0x38>)
 8001774:	f003 fa9b 	bl	8004cae <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(LED_SPORT_GPIO_Port, LED_SPORT_Pin);
 8001778:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800177c:	4804      	ldr	r0, [pc, #16]	; (8001790 <main+0x38>)
 800177e:	f003 fa96 	bl	8004cae <HAL_GPIO_TogglePin>

  MX_APP_Init();
 8001782:	f7ff fc0f 	bl	8000fa4 <MX_APP_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	MX_APP_Process();
 8001786:	f7ff fc49 	bl	800101c <MX_APP_Process>
 800178a:	e7fc      	b.n	8001786 <main+0x2e>
 800178c:	40020800 	.word	0x40020800
 8001790:	40020000 	.word	0x40020000

08001794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b094      	sub	sp, #80	; 0x50
 8001798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800179a:	f107 031c 	add.w	r3, r7, #28
 800179e:	2234      	movs	r2, #52	; 0x34
 80017a0:	2100      	movs	r1, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f005 fc5c 	bl	8007060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a8:	f107 0308 	add.w	r3, r7, #8
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b8:	2300      	movs	r3, #0
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	4b29      	ldr	r3, [pc, #164]	; (8001864 <SystemClock_Config+0xd0>)
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	4a28      	ldr	r2, [pc, #160]	; (8001864 <SystemClock_Config+0xd0>)
 80017c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c6:	6413      	str	r3, [r2, #64]	; 0x40
 80017c8:	4b26      	ldr	r3, [pc, #152]	; (8001864 <SystemClock_Config+0xd0>)
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d0:	607b      	str	r3, [r7, #4]
 80017d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80017d4:	2300      	movs	r3, #0
 80017d6:	603b      	str	r3, [r7, #0]
 80017d8:	4b23      	ldr	r3, [pc, #140]	; (8001868 <SystemClock_Config+0xd4>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017e0:	4a21      	ldr	r2, [pc, #132]	; (8001868 <SystemClock_Config+0xd4>)
 80017e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	4b1f      	ldr	r3, [pc, #124]	; (8001868 <SystemClock_Config+0xd4>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017f0:	603b      	str	r3, [r7, #0]
 80017f2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017f4:	2302      	movs	r3, #2
 80017f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017f8:	2301      	movs	r3, #1
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017fc:	2310      	movs	r3, #16
 80017fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001800:	2302      	movs	r3, #2
 8001802:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001804:	2300      	movs	r3, #0
 8001806:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001808:	2308      	movs	r3, #8
 800180a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 800180c:	2350      	movs	r3, #80	; 0x50
 800180e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001810:	2302      	movs	r3, #2
 8001812:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001814:	2302      	movs	r3, #2
 8001816:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001818:	2302      	movs	r3, #2
 800181a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800181c:	f107 031c 	add.w	r3, r7, #28
 8001820:	4618      	mov	r0, r3
 8001822:	f003 fd2b 	bl	800527c <HAL_RCC_OscConfig>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800182c:	f000 f81e 	bl	800186c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001830:	230f      	movs	r3, #15
 8001832:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001834:	2302      	movs	r3, #2
 8001836:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001838:	2300      	movs	r3, #0
 800183a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800183c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001840:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001842:	2300      	movs	r3, #0
 8001844:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001846:	f107 0308 	add.w	r3, r7, #8
 800184a:	2102      	movs	r1, #2
 800184c:	4618      	mov	r0, r3
 800184e:	f003 fa49 	bl	8004ce4 <HAL_RCC_ClockConfig>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001858:	f000 f808 	bl	800186c <Error_Handler>
  }
}
 800185c:	bf00      	nop
 800185e:	3750      	adds	r7, #80	; 0x50
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40023800 	.word	0x40023800
 8001868:	40007000 	.word	0x40007000

0800186c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001870:	b672      	cpsid	i
}
 8001872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001874:	e7fe      	b.n	8001874 <Error_Handler+0x8>

08001876 <PANTALLA_Process>:
 *
 * @param None
 * @retval None
 */
void PANTALLA_Process(void)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	af00      	add	r7, sp, #0
    PANTALLA_Demo();
 800187a:	f000 f803 	bl	8001884 <PANTALLA_Demo>
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <PANTALLA_Demo>:
/***********************************************************************************************************************
 * Private functions implementation
 **********************************************************************************************************************/

static void PANTALLA_Demo(void)
{
 8001884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001886:	b091      	sub	sp, #68	; 0x44
 8001888:	af10      	add	r7, sp, #64	; 0x40
	/* Ticks for serial transmit to Nextion display */
	tickstart = HAL_GetTick();
 800188a:	f000 ffcb 	bl	8002824 <HAL_GetTick>
 800188e:	4603      	mov	r3, r0
 8001890:	4a70      	ldr	r2, [pc, #448]	; (8001a54 <PANTALLA_Demo+0x1d0>)
 8001892:	6013      	str	r3, [r2, #0]

	if( (HAL_GetTick() - tickstart) > DISPLAY_TRANSMIT_INTERVAL )
 8001894:	f000 ffc6 	bl	8002824 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	4b6e      	ldr	r3, [pc, #440]	; (8001a54 <PANTALLA_Demo+0x1d0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b64      	cmp	r3, #100	; 0x64
 80018a2:	f240 80d2 	bls.w	8001a4a <PANTALLA_Demo+0x1c6>
	{
		/* Hombre muerto */
		if(bus_data.hm_state == kHOMBRE_MUERTO_ON)
 80018a6:	4b6c      	ldr	r3, [pc, #432]	; (8001a58 <PANTALLA_Demo+0x1d4>)
 80018a8:	78db      	ldrb	r3, [r3, #3]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d114      	bne.n	80018d8 <PANTALLA_Demo+0x54>
		{
			PANTALLA_API_SendtoNum("is_warning.val", 1, huart6);
 80018ae:	4e6b      	ldr	r6, [pc, #428]	; (8001a5c <PANTALLA_Demo+0x1d8>)
 80018b0:	466d      	mov	r5, sp
 80018b2:	f106 0408 	add.w	r4, r6, #8
 80018b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018c2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80018c6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80018ca:	e896 000c 	ldmia.w	r6, {r2, r3}
 80018ce:	2101      	movs	r1, #1
 80018d0:	4863      	ldr	r0, [pc, #396]	; (8001a60 <PANTALLA_Demo+0x1dc>)
 80018d2:	f000 f8cf 	bl	8001a74 <PANTALLA_API_SendtoNum>
 80018d6:	e017      	b.n	8001908 <PANTALLA_Demo+0x84>
		}
		else if(bus_data.hm_state == kHOMBRE_MUERTO_OFF)
 80018d8:	4b5f      	ldr	r3, [pc, #380]	; (8001a58 <PANTALLA_Demo+0x1d4>)
 80018da:	78db      	ldrb	r3, [r3, #3]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d113      	bne.n	8001908 <PANTALLA_Demo+0x84>
		{
			PANTALLA_API_SendtoNum("is_warning.val", 0, huart6);
 80018e0:	4e5e      	ldr	r6, [pc, #376]	; (8001a5c <PANTALLA_Demo+0x1d8>)
 80018e2:	466d      	mov	r5, sp
 80018e4:	f106 0408 	add.w	r4, r6, #8
 80018e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80018f8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80018fc:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001900:	2100      	movs	r1, #0
 8001902:	4857      	ldr	r0, [pc, #348]	; (8001a60 <PANTALLA_Demo+0x1dc>)
 8001904:	f000 f8b6 	bl	8001a74 <PANTALLA_API_SendtoNum>
		}

		/* Modo de manejo */
		if(bus_data.btn_modo_manejo == kBTN_ECO)
 8001908:	4b53      	ldr	r3, [pc, #332]	; (8001a58 <PANTALLA_Demo+0x1d4>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d114      	bne.n	800193a <PANTALLA_Demo+0xb6>
		{
			PANTALLA_API_SendtoImage("driving_mode.pic", 1, huart6);
 8001910:	4e52      	ldr	r6, [pc, #328]	; (8001a5c <PANTALLA_Demo+0x1d8>)
 8001912:	466d      	mov	r5, sp
 8001914:	f106 0408 	add.w	r4, r6, #8
 8001918:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800191a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800191c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800191e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001920:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001922:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001924:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001928:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800192c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001930:	2101      	movs	r1, #1
 8001932:	484c      	ldr	r0, [pc, #304]	; (8001a64 <PANTALLA_Demo+0x1e0>)
 8001934:	f000 f96a 	bl	8001c0c <PANTALLA_API_SendtoImage>
 8001938:	e030      	b.n	800199c <PANTALLA_Demo+0x118>
		}
		else if(bus_data.btn_modo_manejo == kBTN_NORMAL)
 800193a:	4b47      	ldr	r3, [pc, #284]	; (8001a58 <PANTALLA_Demo+0x1d4>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b02      	cmp	r3, #2
 8001940:	d114      	bne.n	800196c <PANTALLA_Demo+0xe8>
		{
			PANTALLA_API_SendtoImage("driving_mode.pic", 2, huart6);
 8001942:	4e46      	ldr	r6, [pc, #280]	; (8001a5c <PANTALLA_Demo+0x1d8>)
 8001944:	466d      	mov	r5, sp
 8001946:	f106 0408 	add.w	r4, r6, #8
 800194a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800194c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800194e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001950:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001952:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001954:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001956:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800195a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800195e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001962:	2102      	movs	r1, #2
 8001964:	483f      	ldr	r0, [pc, #252]	; (8001a64 <PANTALLA_Demo+0x1e0>)
 8001966:	f000 f951 	bl	8001c0c <PANTALLA_API_SendtoImage>
 800196a:	e017      	b.n	800199c <PANTALLA_Demo+0x118>
		}
		else if(bus_data.btn_modo_manejo == kBTN_SPORT)
 800196c:	4b3a      	ldr	r3, [pc, #232]	; (8001a58 <PANTALLA_Demo+0x1d4>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b03      	cmp	r3, #3
 8001972:	d113      	bne.n	800199c <PANTALLA_Demo+0x118>
		{
			PANTALLA_API_SendtoImage("driving_mode.pic", 3, huart6);
 8001974:	4e39      	ldr	r6, [pc, #228]	; (8001a5c <PANTALLA_Demo+0x1d8>)
 8001976:	466d      	mov	r5, sp
 8001978:	f106 0408 	add.w	r4, r6, #8
 800197c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800197e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001980:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001982:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001986:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001988:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800198c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001990:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001994:	2103      	movs	r1, #3
 8001996:	4833      	ldr	r0, [pc, #204]	; (8001a64 <PANTALLA_Demo+0x1e0>)
 8001998:	f000 f938 	bl	8001c0c <PANTALLA_API_SendtoImage>
		}

		/* Velocidad */
		value = (int) bus_data.pedal;
 800199c:	4b2e      	ldr	r3, [pc, #184]	; (8001a58 <PANTALLA_Demo+0x1d4>)
 800199e:	edd3 7a02 	vldr	s15, [r3, #8]
 80019a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019a6:	ee17 2a90 	vmov	r2, s15
 80019aa:	4b2f      	ldr	r3, [pc, #188]	; (8001a68 <PANTALLA_Demo+0x1e4>)
 80019ac:	601a      	str	r2, [r3, #0]

		if(value == 100)
 80019ae:	4b2e      	ldr	r3, [pc, #184]	; (8001a68 <PANTALLA_Demo+0x1e4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2b64      	cmp	r3, #100	; 0x64
 80019b4:	d114      	bne.n	80019e0 <PANTALLA_Demo+0x15c>
		{
			PANTALLA_API_SendtoTxt("speed.txt", 99, huart6);
 80019b6:	4e29      	ldr	r6, [pc, #164]	; (8001a5c <PANTALLA_Demo+0x1d8>)
 80019b8:	466d      	mov	r5, sp
 80019ba:	f106 0408 	add.w	r4, r6, #8
 80019be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ca:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80019ce:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80019d2:	e896 000c 	ldmia.w	r6, {r2, r3}
 80019d6:	2163      	movs	r1, #99	; 0x63
 80019d8:	4824      	ldr	r0, [pc, #144]	; (8001a6c <PANTALLA_Demo+0x1e8>)
 80019da:	f000 f87b 	bl	8001ad4 <PANTALLA_API_SendtoTxt>
 80019de:	e02f      	b.n	8001a40 <PANTALLA_Demo+0x1bc>
		}
		else
		{
			PANTALLA_API_SendtoTxt("speed.txt", value, huart6);
 80019e0:	4b21      	ldr	r3, [pc, #132]	; (8001a68 <PANTALLA_Demo+0x1e4>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	fa1f fc83 	uxth.w	ip, r3
 80019e8:	4e1c      	ldr	r6, [pc, #112]	; (8001a5c <PANTALLA_Demo+0x1d8>)
 80019ea:	466d      	mov	r5, sp
 80019ec:	f106 0408 	add.w	r4, r6, #8
 80019f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019fc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001a00:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001a04:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001a08:	4661      	mov	r1, ip
 8001a0a:	4818      	ldr	r0, [pc, #96]	; (8001a6c <PANTALLA_Demo+0x1e8>)
 8001a0c:	f000 f862 	bl	8001ad4 <PANTALLA_API_SendtoTxt>
			PANTALLA_API_SendtoPB("speed_bar.val", value, huart6);
 8001a10:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <PANTALLA_Demo+0x1e4>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	fa1f fc83 	uxth.w	ip, r3
 8001a18:	4e10      	ldr	r6, [pc, #64]	; (8001a5c <PANTALLA_Demo+0x1d8>)
 8001a1a:	466d      	mov	r5, sp
 8001a1c:	f106 0408 	add.w	r4, r6, #8
 8001a20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a2c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001a30:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001a34:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001a38:	4661      	mov	r1, ip
 8001a3a:	480d      	ldr	r0, [pc, #52]	; (8001a70 <PANTALLA_Demo+0x1ec>)
 8001a3c:	f000 f8b6 	bl	8001bac <PANTALLA_API_SendtoPB>
		}

		/* Reset ticks */
		tickstart = HAL_GetTick();
 8001a40:	f000 fef0 	bl	8002824 <HAL_GetTick>
 8001a44:	4603      	mov	r3, r0
 8001a46:	4a03      	ldr	r2, [pc, #12]	; (8001a54 <PANTALLA_Demo+0x1d0>)
 8001a48:	6013      	str	r3, [r2, #0]
	}
}
 8001a4a:	bf00      	nop
 8001a4c:	3704      	adds	r7, #4
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000294 	.word	0x20000294
 8001a58:	20000000 	.word	0x20000000
 8001a5c:	2000033c 	.word	0x2000033c
 8001a60:	080078e4 	.word	0x080078e4
 8001a64:	080078f4 	.word	0x080078f4
 8001a68:	200000f0 	.word	0x200000f0
 8001a6c:	08007908 	.word	0x08007908
 8001a70:	08007914 	.word	0x08007914

08001a74 <PANTALLA_API_SendtoNum>:
    HAL_UART_Transmit(&huart, (uint8_t *)buf, len, 1000);
    HAL_UART_Transmit(&huart, Cmd_End, 3, 3000);
}

void PANTALLA_API_SendtoNum(char *obj, uint16_t value,UART_HandleTypeDef huart)
{
 8001a74:	b082      	sub	sp, #8
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b08c      	sub	sp, #48	; 0x30
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
 8001a7e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001a82:	e880 000c 	stmia.w	r0, {r2, r3}
 8001a86:	460b      	mov	r3, r1
 8001a88:	807b      	strh	r3, [r7, #2]
	char buf[30];

	int len = sprintf (buf,"%s=%u",obj,value);
 8001a8a:	887b      	ldrh	r3, [r7, #2]
 8001a8c:	f107 000c 	add.w	r0, r7, #12
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	490e      	ldr	r1, [pc, #56]	; (8001acc <PANTALLA_API_SendtoNum+0x58>)
 8001a94:	f005 faec 	bl	8007070 <siprintf>
 8001a98:	62f8      	str	r0, [r7, #44]	; 0x2c

	HAL_UART_Transmit(&huart, (uint8_t *)buf, len, 1000);
 8001a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	f107 010c 	add.w	r1, r7, #12
 8001aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aa6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001aaa:	f004 ffe6 	bl	8006a7a <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart, Cmd_End, 3, 3000);
 8001aae:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	4906      	ldr	r1, [pc, #24]	; (8001ad0 <PANTALLA_API_SendtoNum+0x5c>)
 8001ab6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001aba:	f004 ffde 	bl	8006a7a <HAL_UART_Transmit>
}
 8001abe:	bf00      	nop
 8001ac0:	3730      	adds	r7, #48	; 0x30
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ac8:	b002      	add	sp, #8
 8001aca:	4770      	bx	lr
 8001acc:	08007924 	.word	0x08007924
 8001ad0:	20000048 	.word	0x20000048

08001ad4 <PANTALLA_API_SendtoTxt>:

void PANTALLA_API_SendtoTxt(char *obj, uint16_t value,UART_HandleTypeDef huart)
{
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b08c      	sub	sp, #48	; 0x30
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001ae2:	e880 000c 	stmia.w	r0, {r2, r3}
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	807b      	strh	r3, [r7, #2]
	char buf[30];
	int len;


	if(strcmp("bat_level.txt",obj)==0){
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	4827      	ldr	r0, [pc, #156]	; (8001b8c <PANTALLA_API_SendtoTxt+0xb8>)
 8001aee:	f7fe fb8f 	bl	8000210 <strcmp>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d108      	bne.n	8001b0a <PANTALLA_API_SendtoTxt+0x36>

		len = sprintf (buf,"%s=\"%u%%\"",obj,value);
 8001af8:	887b      	ldrh	r3, [r7, #2]
 8001afa:	f107 000c 	add.w	r0, r7, #12
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	4923      	ldr	r1, [pc, #140]	; (8001b90 <PANTALLA_API_SendtoTxt+0xbc>)
 8001b02:	f005 fab5 	bl	8007070 <siprintf>
 8001b06:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001b08:	e027      	b.n	8001b5a <PANTALLA_API_SendtoTxt+0x86>

	}else if(strcmp("power.txt",obj)==0){
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	4821      	ldr	r0, [pc, #132]	; (8001b94 <PANTALLA_API_SendtoTxt+0xc0>)
 8001b0e:	f7fe fb7f 	bl	8000210 <strcmp>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d108      	bne.n	8001b2a <PANTALLA_API_SendtoTxt+0x56>

		len = sprintf (buf,"%s=\"%u W\"",obj,value);
 8001b18:	887b      	ldrh	r3, [r7, #2]
 8001b1a:	f107 000c 	add.w	r0, r7, #12
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	491d      	ldr	r1, [pc, #116]	; (8001b98 <PANTALLA_API_SendtoTxt+0xc4>)
 8001b22:	f005 faa5 	bl	8007070 <siprintf>
 8001b26:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001b28:	e017      	b.n	8001b5a <PANTALLA_API_SendtoTxt+0x86>

	}else if(strcmp("bat_voltage.txt",obj)==0){
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	481b      	ldr	r0, [pc, #108]	; (8001b9c <PANTALLA_API_SendtoTxt+0xc8>)
 8001b2e:	f7fe fb6f 	bl	8000210 <strcmp>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d108      	bne.n	8001b4a <PANTALLA_API_SendtoTxt+0x76>

		len = sprintf (buf,"%s=\"%u V\"",obj,value);
 8001b38:	887b      	ldrh	r3, [r7, #2]
 8001b3a:	f107 000c 	add.w	r0, r7, #12
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	4917      	ldr	r1, [pc, #92]	; (8001ba0 <PANTALLA_API_SendtoTxt+0xcc>)
 8001b42:	f005 fa95 	bl	8007070 <siprintf>
 8001b46:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001b48:	e007      	b.n	8001b5a <PANTALLA_API_SendtoTxt+0x86>

	}else{
		len = sprintf (buf,"%s=\"%u\"",obj,value);
 8001b4a:	887b      	ldrh	r3, [r7, #2]
 8001b4c:	f107 000c 	add.w	r0, r7, #12
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	4914      	ldr	r1, [pc, #80]	; (8001ba4 <PANTALLA_API_SendtoTxt+0xd0>)
 8001b54:	f005 fa8c 	bl	8007070 <siprintf>
 8001b58:	62f8      	str	r0, [r7, #44]	; 0x2c
	}


	HAL_UART_Transmit(&huart, (uint8_t *)buf, len, 1000);
 8001b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	f107 010c 	add.w	r1, r7, #12
 8001b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b66:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001b6a:	f004 ff86 	bl	8006a7a <HAL_UART_Transmit>


	HAL_UART_Transmit(&huart, Cmd_End, 3, 3000);
 8001b6e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001b72:	2203      	movs	r2, #3
 8001b74:	490c      	ldr	r1, [pc, #48]	; (8001ba8 <PANTALLA_API_SendtoTxt+0xd4>)
 8001b76:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001b7a:	f004 ff7e 	bl	8006a7a <HAL_UART_Transmit>

}
 8001b7e:	bf00      	nop
 8001b80:	3730      	adds	r7, #48	; 0x30
 8001b82:	46bd      	mov	sp, r7
 8001b84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b88:	b002      	add	sp, #8
 8001b8a:	4770      	bx	lr
 8001b8c:	0800792c 	.word	0x0800792c
 8001b90:	0800793c 	.word	0x0800793c
 8001b94:	08007948 	.word	0x08007948
 8001b98:	08007954 	.word	0x08007954
 8001b9c:	08007960 	.word	0x08007960
 8001ba0:	08007970 	.word	0x08007970
 8001ba4:	0800797c 	.word	0x0800797c
 8001ba8:	20000048 	.word	0x20000048

08001bac <PANTALLA_API_SendtoPB>:

void PANTALLA_API_SendtoPB(char *obj, uint16_t value,UART_HandleTypeDef huart)
{
 8001bac:	b082      	sub	sp, #8
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b08c      	sub	sp, #48	; 0x30
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001bba:	e880 000c 	stmia.w	r0, {r2, r3}
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	807b      	strh	r3, [r7, #2]
    char buf[30];

    int len = sprintf(buf, "%s=%u", obj, value);
 8001bc2:	887b      	ldrh	r3, [r7, #2]
 8001bc4:	f107 000c 	add.w	r0, r7, #12
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	490e      	ldr	r1, [pc, #56]	; (8001c04 <PANTALLA_API_SendtoPB+0x58>)
 8001bcc:	f005 fa50 	bl	8007070 <siprintf>
 8001bd0:	62f8      	str	r0, [r7, #44]	; 0x2c

    HAL_UART_Transmit(&huart, (uint8_t *)buf, len, 1000);
 8001bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	f107 010c 	add.w	r1, r7, #12
 8001bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bde:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001be2:	f004 ff4a 	bl	8006a7a <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart, Cmd_End, 3, 3000);
 8001be6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001bea:	2203      	movs	r2, #3
 8001bec:	4906      	ldr	r1, [pc, #24]	; (8001c08 <PANTALLA_API_SendtoPB+0x5c>)
 8001bee:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001bf2:	f004 ff42 	bl	8006a7a <HAL_UART_Transmit>
}
 8001bf6:	bf00      	nop
 8001bf8:	3730      	adds	r7, #48	; 0x30
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c00:	b002      	add	sp, #8
 8001c02:	4770      	bx	lr
 8001c04:	08007924 	.word	0x08007924
 8001c08:	20000048 	.word	0x20000048

08001c0c <PANTALLA_API_SendtoImage>:

void PANTALLA_API_SendtoImage(char *obj, uint16_t value,UART_HandleTypeDef huart){
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b08c      	sub	sp, #48	; 0x30
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001c1a:	e880 000c 	stmia.w	r0, {r2, r3}
 8001c1e:	460b      	mov	r3, r1
 8001c20:	807b      	strh	r3, [r7, #2]

    char buf[30];
    int len;
    int pic;

    if (strcmp(obj, "bat_icon.pic") == 0)
 8001c22:	4951      	ldr	r1, [pc, #324]	; (8001d68 <PANTALLA_API_SendtoImage+0x15c>)
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7fe faf3 	bl	8000210 <strcmp>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d12f      	bne.n	8001c90 <PANTALLA_API_SendtoImage+0x84>
    {
        if (value >= 0 && value <= 33)
 8001c30:	887b      	ldrh	r3, [r7, #2]
 8001c32:	2b21      	cmp	r3, #33	; 0x21
 8001c34:	d80a      	bhi.n	8001c4c <PANTALLA_API_SendtoImage+0x40>
        {
            pic = 28; // una barra
 8001c36:	231c      	movs	r3, #28
 8001c38:	62bb      	str	r3, [r7, #40]	; 0x28
            len = sprintf(buf, "%s=%u", obj, pic);
 8001c3a:	f107 0008 	add.w	r0, r7, #8
 8001c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	494a      	ldr	r1, [pc, #296]	; (8001d6c <PANTALLA_API_SendtoImage+0x160>)
 8001c44:	f005 fa14 	bl	8007070 <siprintf>
 8001c48:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001c4a:	e074      	b.n	8001d36 <PANTALLA_API_SendtoImage+0x12a>
        }
        else if (value > 33 && value <= 66)
 8001c4c:	887b      	ldrh	r3, [r7, #2]
 8001c4e:	2b21      	cmp	r3, #33	; 0x21
 8001c50:	d90d      	bls.n	8001c6e <PANTALLA_API_SendtoImage+0x62>
 8001c52:	887b      	ldrh	r3, [r7, #2]
 8001c54:	2b42      	cmp	r3, #66	; 0x42
 8001c56:	d80a      	bhi.n	8001c6e <PANTALLA_API_SendtoImage+0x62>
        {
            pic = 29; // dos barras
 8001c58:	231d      	movs	r3, #29
 8001c5a:	62bb      	str	r3, [r7, #40]	; 0x28
            len = sprintf(buf, "%s=%u", obj, pic);
 8001c5c:	f107 0008 	add.w	r0, r7, #8
 8001c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	4941      	ldr	r1, [pc, #260]	; (8001d6c <PANTALLA_API_SendtoImage+0x160>)
 8001c66:	f005 fa03 	bl	8007070 <siprintf>
 8001c6a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001c6c:	e063      	b.n	8001d36 <PANTALLA_API_SendtoImage+0x12a>
        }
        else if (value > 66 && value <= 100)
 8001c6e:	887b      	ldrh	r3, [r7, #2]
 8001c70:	2b42      	cmp	r3, #66	; 0x42
 8001c72:	d960      	bls.n	8001d36 <PANTALLA_API_SendtoImage+0x12a>
 8001c74:	887b      	ldrh	r3, [r7, #2]
 8001c76:	2b64      	cmp	r3, #100	; 0x64
 8001c78:	d85d      	bhi.n	8001d36 <PANTALLA_API_SendtoImage+0x12a>
        {
            pic = 27; // tres barras
 8001c7a:	231b      	movs	r3, #27
 8001c7c:	62bb      	str	r3, [r7, #40]	; 0x28
            len = sprintf(buf, "%s=%u", obj, pic);
 8001c7e:	f107 0008 	add.w	r0, r7, #8
 8001c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	4939      	ldr	r1, [pc, #228]	; (8001d6c <PANTALLA_API_SendtoImage+0x160>)
 8001c88:	f005 f9f2 	bl	8007070 <siprintf>
 8001c8c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001c8e:	e052      	b.n	8001d36 <PANTALLA_API_SendtoImage+0x12a>
        }
    }
    else if (strcmp(obj, "driving_mode.pic") == 0)
 8001c90:	4937      	ldr	r1, [pc, #220]	; (8001d70 <PANTALLA_API_SendtoImage+0x164>)
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7fe fabc 	bl	8000210 <strcmp>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d129      	bne.n	8001cf2 <PANTALLA_API_SendtoImage+0xe6>
    {
        if (value == 1)
 8001c9e:	887b      	ldrh	r3, [r7, #2]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d10a      	bne.n	8001cba <PANTALLA_API_SendtoImage+0xae>
        {
            pic = 23; // eco
 8001ca4:	2317      	movs	r3, #23
 8001ca6:	62bb      	str	r3, [r7, #40]	; 0x28
            len = sprintf(buf, "%s=%u", obj, pic);
 8001ca8:	f107 0008 	add.w	r0, r7, #8
 8001cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	492e      	ldr	r1, [pc, #184]	; (8001d6c <PANTALLA_API_SendtoImage+0x160>)
 8001cb2:	f005 f9dd 	bl	8007070 <siprintf>
 8001cb6:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001cb8:	e03d      	b.n	8001d36 <PANTALLA_API_SendtoImage+0x12a>
        }
        else if (value == 2)
 8001cba:	887b      	ldrh	r3, [r7, #2]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d10a      	bne.n	8001cd6 <PANTALLA_API_SendtoImage+0xca>
        {
            pic = 24; // normal
 8001cc0:	2318      	movs	r3, #24
 8001cc2:	62bb      	str	r3, [r7, #40]	; 0x28
            len = sprintf(buf, "%s=%u", obj, pic);
 8001cc4:	f107 0008 	add.w	r0, r7, #8
 8001cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	4927      	ldr	r1, [pc, #156]	; (8001d6c <PANTALLA_API_SendtoImage+0x160>)
 8001cce:	f005 f9cf 	bl	8007070 <siprintf>
 8001cd2:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001cd4:	e02f      	b.n	8001d36 <PANTALLA_API_SendtoImage+0x12a>
        }
        else if (value == 3)
 8001cd6:	887b      	ldrh	r3, [r7, #2]
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d12c      	bne.n	8001d36 <PANTALLA_API_SendtoImage+0x12a>
        {
            pic = 25; // sport
 8001cdc:	2319      	movs	r3, #25
 8001cde:	62bb      	str	r3, [r7, #40]	; 0x28
            len = sprintf(buf, "%s=%u", obj, pic);
 8001ce0:	f107 0008 	add.w	r0, r7, #8
 8001ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	4920      	ldr	r1, [pc, #128]	; (8001d6c <PANTALLA_API_SendtoImage+0x160>)
 8001cea:	f005 f9c1 	bl	8007070 <siprintf>
 8001cee:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001cf0:	e021      	b.n	8001d36 <PANTALLA_API_SendtoImage+0x12a>
        }
    }
    else if (strcmp(obj, "warning.pic") == 0)
 8001cf2:	4920      	ldr	r1, [pc, #128]	; (8001d74 <PANTALLA_API_SendtoImage+0x168>)
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7fe fa8b 	bl	8000210 <strcmp>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d11a      	bne.n	8001d36 <PANTALLA_API_SendtoImage+0x12a>
    {
        if (value == 1)
 8001d00:	887b      	ldrh	r3, [r7, #2]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d10a      	bne.n	8001d1c <PANTALLA_API_SendtoImage+0x110>
        {
            pic = 33; // warning
 8001d06:	2321      	movs	r3, #33	; 0x21
 8001d08:	62bb      	str	r3, [r7, #40]	; 0x28
            len = sprintf(buf, "%s=%u", obj, pic);
 8001d0a:	f107 0008 	add.w	r0, r7, #8
 8001d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	4916      	ldr	r1, [pc, #88]	; (8001d6c <PANTALLA_API_SendtoImage+0x160>)
 8001d14:	f005 f9ac 	bl	8007070 <siprintf>
 8001d18:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001d1a:	e00c      	b.n	8001d36 <PANTALLA_API_SendtoImage+0x12a>
        }
        else if (value == 0)
 8001d1c:	887b      	ldrh	r3, [r7, #2]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d109      	bne.n	8001d36 <PANTALLA_API_SendtoImage+0x12a>
        {
            pic = 32; // no warning
 8001d22:	2320      	movs	r3, #32
 8001d24:	62bb      	str	r3, [r7, #40]	; 0x28
            len = sprintf(buf, "%s=%u", obj, pic);
 8001d26:	f107 0008 	add.w	r0, r7, #8
 8001d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	490f      	ldr	r1, [pc, #60]	; (8001d6c <PANTALLA_API_SendtoImage+0x160>)
 8001d30:	f005 f99e 	bl	8007070 <siprintf>
 8001d34:	62f8      	str	r0, [r7, #44]	; 0x2c
        }
    }

    HAL_UART_Transmit(&huart, (uint8_t *)buf, len, 1000);
 8001d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	f107 0108 	add.w	r1, r7, #8
 8001d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d42:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001d46:	f004 fe98 	bl	8006a7a <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart, Cmd_End, 3, 3000);
 8001d4a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001d4e:	2203      	movs	r2, #3
 8001d50:	4909      	ldr	r1, [pc, #36]	; (8001d78 <PANTALLA_API_SendtoImage+0x16c>)
 8001d52:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001d56:	f004 fe90 	bl	8006a7a <HAL_UART_Transmit>
}
 8001d5a:	bf00      	nop
 8001d5c:	3730      	adds	r7, #48	; 0x30
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d64:	b002      	add	sp, #8
 8001d66:	4770      	bx	lr
 8001d68:	08007984 	.word	0x08007984
 8001d6c:	08007924 	.word	0x08007924
 8001d70:	08007994 	.word	0x08007994
 8001d74:	080079a8 	.word	0x080079a8
 8001d78:	20000048 	.word	0x20000048

08001d7c <PANTALLA_HW_Init>:
/***********************************************************************************************************************
 * Public functions implementation
 **********************************************************************************************************************/

void PANTALLA_HW_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
    MX_USART6_UART_Init();
 8001d80:	f000 fa1c 	bl	80021bc <MX_USART6_UART_Init>
}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <PEDAL_Process>:
 *
 * @param   None
 * @retval  None
 */
void PEDAL_Process(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
	/* Mapeo de lectura ADC pedal */
	PEDAL_Map_ADC_Reading();
 8001d8c:	f000 f810 	bl	8001db0 <PEDAL_Map_ADC_Reading>

	/* Envío de valor de pedal mapeado a bus de salida CAN */
	PEDAL_Send_Pedal_Value(bus_data.pedal, &bus_can_output);
 8001d90:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <PEDAL_Process+0x20>)
 8001d92:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d9a:	4904      	ldr	r1, [pc, #16]	; (8001dac <PEDAL_Process+0x24>)
 8001d9c:	ee17 0a90 	vmov	r0, s15
 8001da0:	f000 f85e 	bl	8001e60 <PEDAL_Send_Pedal_Value>
}
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20000000 	.word	0x20000000
 8001dac:	2000002c 	.word	0x2000002c

08001db0 <PEDAL_Map_ADC_Reading>:
 *
 * @param None
 * @retval None
 */
static void PEDAL_Map_ADC_Reading(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
	if(flag_adc == ADC_CONV_COMPLETED)
 8001db4:	4b24      	ldr	r3, [pc, #144]	; (8001e48 <PEDAL_Map_ADC_Reading+0x98>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d13e      	bne.n	8001e3a <PEDAL_Map_ADC_Reading+0x8a>
	{
		/* Guarda lectura de ADC en bus de datos */
		bus_data.adc_reading = adc_buf[0];
 8001dbc:	4b23      	ldr	r3, [pc, #140]	; (8001e4c <PEDAL_Map_ADC_Reading+0x9c>)
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4b23      	ldr	r3, [pc, #140]	; (8001e50 <PEDAL_Map_ADC_Reading+0xa0>)
 8001dc4:	605a      	str	r2, [r3, #4]

		/* ADC reading mapping */
		if(bus_data.adc_reading < MIN_ADC_VAL)
 8001dc6:	4b22      	ldr	r3, [pc, #136]	; (8001e50 <PEDAL_Map_ADC_Reading+0xa0>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b41      	cmp	r3, #65	; 0x41
 8001dcc:	d804      	bhi.n	8001dd8 <PEDAL_Map_ADC_Reading+0x28>
		{
			bus_data.pedal = 0.0;
 8001dce:	4b20      	ldr	r3, [pc, #128]	; (8001e50 <PEDAL_Map_ADC_Reading+0xa0>)
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
 8001dd6:	e02d      	b.n	8001e34 <PEDAL_Map_ADC_Reading+0x84>
		}
		else if(bus_data.adc_reading > MAX_ADC_VAL)
 8001dd8:	4b1d      	ldr	r3, [pc, #116]	; (8001e50 <PEDAL_Map_ADC_Reading+0xa0>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f5b3 6f4a 	cmp.w	r3, #3232	; 0xca0
 8001de0:	d303      	bcc.n	8001dea <PEDAL_Map_ADC_Reading+0x3a>
		{
			bus_data.pedal = 100.0;
 8001de2:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <PEDAL_Map_ADC_Reading+0xa0>)
 8001de4:	4a1b      	ldr	r2, [pc, #108]	; (8001e54 <PEDAL_Map_ADC_Reading+0xa4>)
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	e024      	b.n	8001e34 <PEDAL_Map_ADC_Reading+0x84>
		}
		else
		{
			bus_data.pedal = ((bus_data.adc_reading - MIN_ADC_VAL) / (MAX_ADC_VAL - MIN_ADC_VAL)) * 100;
 8001dea:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <PEDAL_Map_ADC_Reading+0xa0>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fbb0 	bl	8000554 <__aeabi_ui2d>
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <PEDAL_Map_ADC_Reading+0xa8>)
 8001dfa:	f7fe fa6d 	bl	80002d8 <__aeabi_dsub>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4610      	mov	r0, r2
 8001e04:	4619      	mov	r1, r3
 8001e06:	a30e      	add	r3, pc, #56	; (adr r3, 8001e40 <PEDAL_Map_ADC_Reading+0x90>)
 8001e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0c:	f7fe fd46 	bl	800089c <__aeabi_ddiv>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4610      	mov	r0, r2
 8001e16:	4619      	mov	r1, r3
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <PEDAL_Map_ADC_Reading+0xac>)
 8001e1e:	f7fe fc13 	bl	8000648 <__aeabi_dmul>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4610      	mov	r0, r2
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f7fe fe1f 	bl	8000a6c <__aeabi_d2f>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	4a07      	ldr	r2, [pc, #28]	; (8001e50 <PEDAL_Map_ADC_Reading+0xa0>)
 8001e32:	6093      	str	r3, [r2, #8]
		}

		/* Clear ADC conversion flag */
		flag_adc = ADC_CONV_NOT_COMPLETED;
 8001e34:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <PEDAL_Map_ADC_Reading+0x98>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	701a      	strb	r2, [r3, #0]
	}
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	00000000 	.word	0x00000000
 8001e44:	40a8ba00 	.word	0x40a8ba00
 8001e48:	2000004b 	.word	0x2000004b
 8001e4c:	20000298 	.word	0x20000298
 8001e50:	20000000 	.word	0x20000000
 8001e54:	42c80000 	.word	0x42c80000
 8001e58:	40508000 	.word	0x40508000
 8001e5c:	40590000 	.word	0x40590000

08001e60 <PEDAL_Send_Pedal_Value>:
 *
 * @param to_send           Valor de pedal a enviar
 * @param bus_can_output    Puntero a estructura de tipo typedef_bus2_t (bus de salida can)
 */
static void PEDAL_Send_Pedal_Value(uint32_t to_send, typedef_bus2_t* bus_can_output)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
	bus_can_output->pedal = (uint8_t) to_send;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	701a      	strb	r2, [r3, #0]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <PEDAL_HW_Init>:
/***********************************************************************************************************************
 * Public functions implementation
 **********************************************************************************************************************/

void PEDAL_HW_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
	/* Initialize DMA */
	MX_DMA_Init();
 8001e84:	f7ff fb58 	bl	8001538 <MX_DMA_Init>

	/* Initialize ADC1 */
	MX_ADC1_Init();
 8001e88:	f7fe ffbc 	bl	8000e04 <MX_ADC1_Init>

	/* Initialize time base timer for ADC triggering */
	MX_TIM2_Init();
 8001e8c:	f000 f8d8 	bl	8002040 <MX_TIM2_Init>

	/* Start ADC with DMA */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8001e90:	220a      	movs	r2, #10
 8001e92:	4904      	ldr	r1, [pc, #16]	; (8001ea4 <PEDAL_HW_Init+0x24>)
 8001e94:	4804      	ldr	r0, [pc, #16]	; (8001ea8 <PEDAL_HW_Init+0x28>)
 8001e96:	f000 fe79 	bl	8002b8c <HAL_ADC_Start_DMA>

	/* Start time base trigger ADC timer */
	HAL_TIM_Base_Start(&htim2);
 8001e9a:	4804      	ldr	r0, [pc, #16]	; (8001eac <PEDAL_HW_Init+0x2c>)
 8001e9c:	f003 fcdc 	bl	8005858 <HAL_TIM_Base_Start>
}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000298 	.word	0x20000298
 8001ea8:	200001a4 	.word	0x200001a4
 8001eac:	200002ac 	.word	0x200002ac

08001eb0 <HAL_ADC_ConvCpltCallback>:
 * Exported functions implementation
 **********************************************************************************************************************/

/* Called when buffer is completely filled */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	/* Turn on LED 3 (yellow LED) */
	BSP_LED_Toggle(LED3);
 8001eb8:	2002      	movs	r0, #2
 8001eba:	f000 fb37 	bl	800252c <BSP_LED_Toggle>

	/* Start ADC DMA again */
	HAL_ADC_Start_DMA(hadc, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8001ebe:	220a      	movs	r2, #10
 8001ec0:	4905      	ldr	r1, [pc, #20]	; (8001ed8 <HAL_ADC_ConvCpltCallback+0x28>)
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 fe62 	bl	8002b8c <HAL_ADC_Start_DMA>

	/* The flag indicates that the callback was called */
	flag_adc = ADC_CONV_COMPLETED;
 8001ec8:	4b04      	ldr	r3, [pc, #16]	; (8001edc <HAL_ADC_ConvCpltCallback+0x2c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	701a      	strb	r2, [r3, #0]
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000298 	.word	0x20000298
 8001edc:	2000004b 	.word	0x2000004b

08001ee0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	607b      	str	r3, [r7, #4]
 8001eea:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <HAL_MspInit+0x4c>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	4a0f      	ldr	r2, [pc, #60]	; (8001f2c <HAL_MspInit+0x4c>)
 8001ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef6:	4b0d      	ldr	r3, [pc, #52]	; (8001f2c <HAL_MspInit+0x4c>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efe:	607b      	str	r3, [r7, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	603b      	str	r3, [r7, #0]
 8001f06:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <HAL_MspInit+0x4c>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	4a08      	ldr	r2, [pc, #32]	; (8001f2c <HAL_MspInit+0x4c>)
 8001f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f10:	6413      	str	r3, [r2, #64]	; 0x40
 8001f12:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_MspInit+0x4c>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1a:	603b      	str	r3, [r7, #0]
 8001f1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40023800 	.word	0x40023800

08001f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f34:	e7fe      	b.n	8001f34 <NMI_Handler+0x4>

08001f36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f3a:	e7fe      	b.n	8001f3a <HardFault_Handler+0x4>

08001f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f40:	e7fe      	b.n	8001f40 <MemManage_Handler+0x4>

08001f42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f46:	e7fe      	b.n	8001f46 <BusFault_Handler+0x4>

08001f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <UsageFault_Handler+0x4>

08001f4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f7c:	f000 fc3e 	bl	80027fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f88:	4802      	ldr	r0, [pc, #8]	; (8001f94 <ADC_IRQHandler+0x10>)
 8001f8a:	f000 fcbe 	bl	800290a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	200001a4 	.word	0x200001a4

08001f98 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001f9c:	4802      	ldr	r0, [pc, #8]	; (8001fa8 <TIM7_IRQHandler+0x10>)
 8001f9e:	f003 fec5 	bl	8005d2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	200002f4 	.word	0x200002f4

08001fac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001fb0:	4802      	ldr	r0, [pc, #8]	; (8001fbc <DMA2_Stream0_IRQHandler+0x10>)
 8001fb2:	f002 fa4d 	bl	8004450 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	200001ec 	.word	0x200001ec

08001fc0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001fc4:	4802      	ldr	r0, [pc, #8]	; (8001fd0 <CAN2_RX0_IRQHandler+0x10>)
 8001fc6:	f001 fdfc 	bl	8003bc2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	2000024c 	.word	0x2000024c

08001fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fdc:	4a14      	ldr	r2, [pc, #80]	; (8002030 <_sbrk+0x5c>)
 8001fde:	4b15      	ldr	r3, [pc, #84]	; (8002034 <_sbrk+0x60>)
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fe8:	4b13      	ldr	r3, [pc, #76]	; (8002038 <_sbrk+0x64>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d102      	bne.n	8001ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ff0:	4b11      	ldr	r3, [pc, #68]	; (8002038 <_sbrk+0x64>)
 8001ff2:	4a12      	ldr	r2, [pc, #72]	; (800203c <_sbrk+0x68>)
 8001ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ff6:	4b10      	ldr	r3, [pc, #64]	; (8002038 <_sbrk+0x64>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	429a      	cmp	r2, r3
 8002002:	d207      	bcs.n	8002014 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002004:	f005 f802 	bl	800700c <__errno>
 8002008:	4603      	mov	r3, r0
 800200a:	220c      	movs	r2, #12
 800200c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800200e:	f04f 33ff 	mov.w	r3, #4294967295
 8002012:	e009      	b.n	8002028 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002014:	4b08      	ldr	r3, [pc, #32]	; (8002038 <_sbrk+0x64>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800201a:	4b07      	ldr	r3, [pc, #28]	; (8002038 <_sbrk+0x64>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4413      	add	r3, r2
 8002022:	4a05      	ldr	r2, [pc, #20]	; (8002038 <_sbrk+0x64>)
 8002024:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002026:	68fb      	ldr	r3, [r7, #12]
}
 8002028:	4618      	mov	r0, r3
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20020000 	.word	0x20020000
 8002034:	00000400 	.word	0x00000400
 8002038:	200000f4 	.word	0x200000f4
 800203c:	20000398 	.word	0x20000398

08002040 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002046:	f107 0308 	add.w	r3, r7, #8
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	605a      	str	r2, [r3, #4]
 8002050:	609a      	str	r2, [r3, #8]
 8002052:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002054:	463b      	mov	r3, r7
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800205c:	4b1d      	ldr	r3, [pc, #116]	; (80020d4 <MX_TIM2_Init+0x94>)
 800205e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002062:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8002064:	4b1b      	ldr	r3, [pc, #108]	; (80020d4 <MX_TIM2_Init+0x94>)
 8002066:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800206a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800206c:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <MX_TIM2_Init+0x94>)
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002072:	4b18      	ldr	r3, [pc, #96]	; (80020d4 <MX_TIM2_Init+0x94>)
 8002074:	2263      	movs	r2, #99	; 0x63
 8002076:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002078:	4b16      	ldr	r3, [pc, #88]	; (80020d4 <MX_TIM2_Init+0x94>)
 800207a:	2200      	movs	r2, #0
 800207c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800207e:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <MX_TIM2_Init+0x94>)
 8002080:	2200      	movs	r2, #0
 8002082:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002084:	4813      	ldr	r0, [pc, #76]	; (80020d4 <MX_TIM2_Init+0x94>)
 8002086:	f003 fb97 	bl	80057b8 <HAL_TIM_Base_Init>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002090:	f7ff fbec 	bl	800186c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002098:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800209a:	f107 0308 	add.w	r3, r7, #8
 800209e:	4619      	mov	r1, r3
 80020a0:	480c      	ldr	r0, [pc, #48]	; (80020d4 <MX_TIM2_Init+0x94>)
 80020a2:	f004 f80d 	bl	80060c0 <HAL_TIM_ConfigClockSource>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80020ac:	f7ff fbde 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80020b0:	2320      	movs	r3, #32
 80020b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80020b4:	2380      	movs	r3, #128	; 0x80
 80020b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020b8:	463b      	mov	r3, r7
 80020ba:	4619      	mov	r1, r3
 80020bc:	4805      	ldr	r0, [pc, #20]	; (80020d4 <MX_TIM2_Init+0x94>)
 80020be:	f004 fbff 	bl	80068c0 <HAL_TIMEx_MasterConfigSynchronization>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80020c8:	f7ff fbd0 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020cc:	bf00      	nop
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	200002ac 	.word	0x200002ac

080020d8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020de:	463b      	mov	r3, r7
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80020e6:	4b15      	ldr	r3, [pc, #84]	; (800213c <MX_TIM7_Init+0x64>)
 80020e8:	4a15      	ldr	r2, [pc, #84]	; (8002140 <MX_TIM7_Init+0x68>)
 80020ea:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8000-1;
 80020ec:	4b13      	ldr	r3, [pc, #76]	; (800213c <MX_TIM7_Init+0x64>)
 80020ee:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80020f2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f4:	4b11      	ldr	r3, [pc, #68]	; (800213c <MX_TIM7_Init+0x64>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000-1;
 80020fa:	4b10      	ldr	r3, [pc, #64]	; (800213c <MX_TIM7_Init+0x64>)
 80020fc:	f242 720f 	movw	r2, #9999	; 0x270f
 8002100:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002102:	4b0e      	ldr	r3, [pc, #56]	; (800213c <MX_TIM7_Init+0x64>)
 8002104:	2200      	movs	r2, #0
 8002106:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002108:	480c      	ldr	r0, [pc, #48]	; (800213c <MX_TIM7_Init+0x64>)
 800210a:	f003 fb55 	bl	80057b8 <HAL_TIM_Base_Init>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002114:	f7ff fbaa 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002118:	2300      	movs	r3, #0
 800211a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800211c:	2300      	movs	r3, #0
 800211e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002120:	463b      	mov	r3, r7
 8002122:	4619      	mov	r1, r3
 8002124:	4805      	ldr	r0, [pc, #20]	; (800213c <MX_TIM7_Init+0x64>)
 8002126:	f004 fbcb 	bl	80068c0 <HAL_TIMEx_MasterConfigSynchronization>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002130:	f7ff fb9c 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002134:	bf00      	nop
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	200002f4 	.word	0x200002f4
 8002140:	40001400 	.word	0x40001400

08002144 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002154:	d10e      	bne.n	8002174 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	4b16      	ldr	r3, [pc, #88]	; (80021b4 <HAL_TIM_Base_MspInit+0x70>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	4a15      	ldr	r2, [pc, #84]	; (80021b4 <HAL_TIM_Base_MspInit+0x70>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	6413      	str	r3, [r2, #64]	; 0x40
 8002166:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <HAL_TIM_Base_MspInit+0x70>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002172:	e01a      	b.n	80021aa <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM7)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a0f      	ldr	r2, [pc, #60]	; (80021b8 <HAL_TIM_Base_MspInit+0x74>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d115      	bne.n	80021aa <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <HAL_TIM_Base_MspInit+0x70>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	4a0b      	ldr	r2, [pc, #44]	; (80021b4 <HAL_TIM_Base_MspInit+0x70>)
 8002188:	f043 0320 	orr.w	r3, r3, #32
 800218c:	6413      	str	r3, [r2, #64]	; 0x40
 800218e:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <HAL_TIM_Base_MspInit+0x70>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	f003 0320 	and.w	r3, r3, #32
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800219a:	2200      	movs	r2, #0
 800219c:	2100      	movs	r1, #0
 800219e:	2037      	movs	r0, #55	; 0x37
 80021a0:	f002 f819 	bl	80041d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80021a4:	2037      	movs	r0, #55	; 0x37
 80021a6:	f002 f832 	bl	800420e <HAL_NVIC_EnableIRQ>
}
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40001400 	.word	0x40001400

080021bc <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80021c0:	4b11      	ldr	r3, [pc, #68]	; (8002208 <MX_USART6_UART_Init+0x4c>)
 80021c2:	4a12      	ldr	r2, [pc, #72]	; (800220c <MX_USART6_UART_Init+0x50>)
 80021c4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80021c6:	4b10      	ldr	r3, [pc, #64]	; (8002208 <MX_USART6_UART_Init+0x4c>)
 80021c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021cc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80021ce:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <MX_USART6_UART_Init+0x4c>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80021d4:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <MX_USART6_UART_Init+0x4c>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80021da:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <MX_USART6_UART_Init+0x4c>)
 80021dc:	2200      	movs	r2, #0
 80021de:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80021e0:	4b09      	ldr	r3, [pc, #36]	; (8002208 <MX_USART6_UART_Init+0x4c>)
 80021e2:	220c      	movs	r2, #12
 80021e4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021e6:	4b08      	ldr	r3, [pc, #32]	; (8002208 <MX_USART6_UART_Init+0x4c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80021ec:	4b06      	ldr	r3, [pc, #24]	; (8002208 <MX_USART6_UART_Init+0x4c>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80021f2:	4805      	ldr	r0, [pc, #20]	; (8002208 <MX_USART6_UART_Init+0x4c>)
 80021f4:	f004 fbf4 	bl	80069e0 <HAL_UART_Init>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80021fe:	f7ff fb35 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	2000033c 	.word	0x2000033c
 800220c:	40011400 	.word	0x40011400

08002210 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08a      	sub	sp, #40	; 0x28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 0314 	add.w	r3, r7, #20
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a19      	ldr	r2, [pc, #100]	; (8002294 <HAL_UART_MspInit+0x84>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d12b      	bne.n	800228a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	613b      	str	r3, [r7, #16]
 8002236:	4b18      	ldr	r3, [pc, #96]	; (8002298 <HAL_UART_MspInit+0x88>)
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	4a17      	ldr	r2, [pc, #92]	; (8002298 <HAL_UART_MspInit+0x88>)
 800223c:	f043 0320 	orr.w	r3, r3, #32
 8002240:	6453      	str	r3, [r2, #68]	; 0x44
 8002242:	4b15      	ldr	r3, [pc, #84]	; (8002298 <HAL_UART_MspInit+0x88>)
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	f003 0320 	and.w	r3, r3, #32
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	4b11      	ldr	r3, [pc, #68]	; (8002298 <HAL_UART_MspInit+0x88>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a10      	ldr	r2, [pc, #64]	; (8002298 <HAL_UART_MspInit+0x88>)
 8002258:	f043 0304 	orr.w	r3, r3, #4
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b0e      	ldr	r3, [pc, #56]	; (8002298 <HAL_UART_MspInit+0x88>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0304 	and.w	r3, r3, #4
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800226a:	23c0      	movs	r3, #192	; 0xc0
 800226c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226e:	2302      	movs	r3, #2
 8002270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002276:	2303      	movs	r3, #3
 8002278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800227a:	2308      	movs	r3, #8
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800227e:	f107 0314 	add.w	r3, r7, #20
 8002282:	4619      	mov	r1, r3
 8002284:	4805      	ldr	r0, [pc, #20]	; (800229c <HAL_UART_MspInit+0x8c>)
 8002286:	f002 fb4d 	bl	8004924 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800228a:	bf00      	nop
 800228c:	3728      	adds	r7, #40	; 0x28
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40011400 	.word	0x40011400
 8002298:	40023800 	.word	0x40023800
 800229c:	40020800 	.word	0x40020800

080022a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022a4:	480d      	ldr	r0, [pc, #52]	; (80022dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022a6:	490e      	ldr	r1, [pc, #56]	; (80022e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022a8:	4a0e      	ldr	r2, [pc, #56]	; (80022e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022ac:	e002      	b.n	80022b4 <LoopCopyDataInit>

080022ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022b2:	3304      	adds	r3, #4

080022b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022b8:	d3f9      	bcc.n	80022ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ba:	4a0b      	ldr	r2, [pc, #44]	; (80022e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022bc:	4c0b      	ldr	r4, [pc, #44]	; (80022ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80022be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022c0:	e001      	b.n	80022c6 <LoopFillZerobss>

080022c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022c4:	3204      	adds	r2, #4

080022c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022c8:	d3fb      	bcc.n	80022c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022ca:	f000 fa33 	bl	8002734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022ce:	f004 fea3 	bl	8007018 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022d2:	f7ff fa41 	bl	8001758 <main>
  bx  lr    
 80022d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022e0:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 80022e4:	08007a20 	.word	0x08007a20
  ldr r2, =_sbss
 80022e8:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 80022ec:	20000394 	.word	0x20000394

080022f0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022f0:	e7fe      	b.n	80022f0 <CAN1_RX0_IRQHandler>
	...

080022f4 <BSP_BUZZER_Init>:
 *
 * @param None
 * @retval BSP status
 */
int32_t BSP_BUZZER_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b092      	sub	sp, #72	; 0x48
 80022f8:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	605a      	str	r2, [r3, #4]
 8002304:	609a      	str	r2, [r3, #8]
 8002306:	60da      	str	r2, [r3, #12]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8002308:	f107 031c 	add.w	r3, r7, #28
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]
 8002318:	615a      	str	r2, [r3, #20]
 800231a:	619a      	str	r2, [r3, #24]

	/* Configure the Buzzer PWM Timer */
    BUZZER_htim.Instance = BUZZER_PWM_TIM_INSTANCE;
 800231c:	4b35      	ldr	r3, [pc, #212]	; (80023f4 <BSP_BUZZER_Init+0x100>)
 800231e:	4a36      	ldr	r2, [pc, #216]	; (80023f8 <BSP_BUZZER_Init+0x104>)
 8002320:	601a      	str	r2, [r3, #0]
    BUZZER_htim.Init.Prescaler = 0;
 8002322:	4b34      	ldr	r3, [pc, #208]	; (80023f4 <BSP_BUZZER_Init+0x100>)
 8002324:	2200      	movs	r2, #0
 8002326:	605a      	str	r2, [r3, #4]
    BUZZER_htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002328:	4b32      	ldr	r3, [pc, #200]	; (80023f4 <BSP_BUZZER_Init+0x100>)
 800232a:	2200      	movs	r2, #0
 800232c:	609a      	str	r2, [r3, #8]
    BUZZER_htim.Init.Period = 39062;
 800232e:	4b31      	ldr	r3, [pc, #196]	; (80023f4 <BSP_BUZZER_Init+0x100>)
 8002330:	f649 0296 	movw	r2, #39062	; 0x9896
 8002334:	60da      	str	r2, [r3, #12]
    BUZZER_htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002336:	4b2f      	ldr	r3, [pc, #188]	; (80023f4 <BSP_BUZZER_Init+0x100>)
 8002338:	2200      	movs	r2, #0
 800233a:	611a      	str	r2, [r3, #16]
    BUZZER_htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800233c:	4b2d      	ldr	r3, [pc, #180]	; (80023f4 <BSP_BUZZER_Init+0x100>)
 800233e:	2280      	movs	r2, #128	; 0x80
 8002340:	619a      	str	r2, [r3, #24]
    HAL_TIM_Base_Init(&BUZZER_htim);
 8002342:	482c      	ldr	r0, [pc, #176]	; (80023f4 <BSP_BUZZER_Init+0x100>)
 8002344:	f003 fa38 	bl	80057b8 <HAL_TIM_Base_Init>

    BUZZER_TIM_CLK_ENABLE();	// TIM peripheral clock enable
 8002348:	2300      	movs	r3, #0
 800234a:	607b      	str	r3, [r7, #4]
 800234c:	4b2b      	ldr	r3, [pc, #172]	; (80023fc <BSP_BUZZER_Init+0x108>)
 800234e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002350:	4a2a      	ldr	r2, [pc, #168]	; (80023fc <BSP_BUZZER_Init+0x108>)
 8002352:	f043 0320 	orr.w	r3, r3, #32
 8002356:	6413      	str	r3, [r2, #64]	; 0x40
 8002358:	4b28      	ldr	r3, [pc, #160]	; (80023fc <BSP_BUZZER_Init+0x108>)
 800235a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235c:	f003 0320 	and.w	r3, r3, #32
 8002360:	607b      	str	r3, [r7, #4]
 8002362:	687b      	ldr	r3, [r7, #4]

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002368:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_TIM_ConfigClockSource(&BUZZER_htim, &sClockSourceConfig);
 800236a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800236e:	4619      	mov	r1, r3
 8002370:	4820      	ldr	r0, [pc, #128]	; (80023f4 <BSP_BUZZER_Init+0x100>)
 8002372:	f003 fea5 	bl	80060c0 <HAL_TIM_ConfigClockSource>

    HAL_TIM_PWM_Init(&BUZZER_htim);
 8002376:	481f      	ldr	r0, [pc, #124]	; (80023f4 <BSP_BUZZER_Init+0x100>)
 8002378:	f003 fb46 	bl	8005a08 <HAL_TIM_PWM_Init>

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800237c:	2360      	movs	r3, #96	; 0x60
 800237e:	61fb      	str	r3, [r7, #28]
    sConfigOC.Pulse = 3906;
 8002380:	f640 7342 	movw	r3, #3906	; 0xf42
 8002384:	623b      	str	r3, [r7, #32]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002386:	2300      	movs	r3, #0
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800238a:	2300      	movs	r3, #0
 800238c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_TIM_PWM_ConfigChannel(&BUZZER_htim, &sConfigOC, BUZZER_PWM_TIM_CHANNEL);
 800238e:	f107 031c 	add.w	r3, r7, #28
 8002392:	2200      	movs	r2, #0
 8002394:	4619      	mov	r1, r3
 8002396:	4817      	ldr	r0, [pc, #92]	; (80023f4 <BSP_BUZZER_Init+0x100>)
 8002398:	f003 fdd0 	bl	8005f3c <HAL_TIM_PWM_ConfigChannel>

    /* HAL_TIM_MspPostInit:  */

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239c:	f107 0308 	add.w	r3, r7, #8
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]

    BUZZER_GPIO_CLK_ENABLE();
 80023ac:	2300      	movs	r3, #0
 80023ae:	603b      	str	r3, [r7, #0]
 80023b0:	4b12      	ldr	r3, [pc, #72]	; (80023fc <BSP_BUZZER_Init+0x108>)
 80023b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b4:	4a11      	ldr	r2, [pc, #68]	; (80023fc <BSP_BUZZER_Init+0x108>)
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	6313      	str	r3, [r2, #48]	; 0x30
 80023bc:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <BSP_BUZZER_Init+0x108>)
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	603b      	str	r3, [r7, #0]
 80023c6:	683b      	ldr	r3, [r7, #0]
    /** BUZZER GPIO Configuration
        PA2     ------> TIM9_CH1
     */
    GPIO_InitStruct.Pin = BUZZER_GPIO_PIN;
 80023c8:	2304      	movs	r3, #4
 80023ca:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023cc:	2302      	movs	r3, #2
 80023ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80023d8:	2303      	movs	r3, #3
 80023da:	61bb      	str	r3, [r7, #24]

    HAL_GPIO_Init(BUZZER_GPIO_PORT, &GPIO_InitStruct);
 80023dc:	f107 0308 	add.w	r3, r7, #8
 80023e0:	4619      	mov	r1, r3
 80023e2:	4807      	ldr	r0, [pc, #28]	; (8002400 <BSP_BUZZER_Init+0x10c>)
 80023e4:	f002 fa9e 	bl	8004924 <HAL_GPIO_Init>

    return BSP_ERROR_NONE;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3748      	adds	r7, #72	; 0x48
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	200000f8 	.word	0x200000f8
 80023f8:	40014000 	.word	0x40014000
 80023fc:	40023800 	.word	0x40023800
 8002400:	40020000 	.word	0x40020000

08002404 <BSP_BUZZER_On>:
 *
 * @param None
 * @return BSP Status
 */
int32_t BSP_BUZZER_On(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&BUZZER_htim, TIM_CHANNEL_1);
 8002408:	2100      	movs	r1, #0
 800240a:	4803      	ldr	r0, [pc, #12]	; (8002418 <BSP_BUZZER_On+0x14>)
 800240c:	f003 fb56 	bl	8005abc <HAL_TIM_PWM_Start>

    return BSP_ERROR_NONE;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	200000f8 	.word	0x200000f8

0800241c <BSP_BUZZER_Off>:
 *
 * @param None
 * @return BSP Status
 */
int32_t BSP_BUZZER_Off(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&BUZZER_htim, TIM_CHANNEL_1);
 8002420:	2100      	movs	r1, #0
 8002422:	4803      	ldr	r0, [pc, #12]	; (8002430 <BSP_BUZZER_Off+0x14>)
 8002424:	f003 fc12 	bl	8005c4c <HAL_TIM_PWM_Stop>

    return BSP_ERROR_NONE;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	200000f8 	.word	0x200000f8

08002434 <BSP_LED_Init>:
 *          @arg LED3
 *
 * @return BSP Status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b088      	sub	sp, #32
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	71fb      	strb	r3, [r7, #7]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800243e:	f107 030c 	add.w	r3, r7, #12
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	605a      	str	r2, [r3, #4]
 8002448:	609a      	str	r2, [r3, #8]
 800244a:	60da      	str	r2, [r3, #12]
 800244c:	611a      	str	r2, [r3, #16]

    /* Enable the GPIO_LED Clock */
    LEDx_GPIO_CLK_ENABLE(Led);
 800244e:	2300      	movs	r3, #0
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	4b19      	ldr	r3, [pc, #100]	; (80024b8 <BSP_LED_Init+0x84>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	4a18      	ldr	r2, [pc, #96]	; (80024b8 <BSP_LED_Init+0x84>)
 8002458:	f043 0308 	orr.w	r3, r3, #8
 800245c:	6313      	str	r3, [r2, #48]	; 0x30
 800245e:	4b16      	ldr	r3, [pc, #88]	; (80024b8 <BSP_LED_Init+0x84>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	68bb      	ldr	r3, [r7, #8]

    /* Configure the GPIO_LED pin */
    GPIO_InitStruct.Pin = LED_PIN[Led];
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	4a13      	ldr	r2, [pc, #76]	; (80024bc <BSP_LED_Init+0x88>)
 800246e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002472:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002474:	2301      	movs	r3, #1
 8002476:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800247c:	2302      	movs	r3, #2
 800247e:	61bb      	str	r3, [r7, #24]

    HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	4a0f      	ldr	r2, [pc, #60]	; (80024c0 <BSP_LED_Init+0x8c>)
 8002484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002488:	f107 020c 	add.w	r2, r7, #12
 800248c:	4611      	mov	r1, r2
 800248e:	4618      	mov	r0, r3
 8002490:	f002 fa48 	bl	8004924 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	4a0a      	ldr	r2, [pc, #40]	; (80024c0 <BSP_LED_Init+0x8c>)
 8002498:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	4a07      	ldr	r2, [pc, #28]	; (80024bc <BSP_LED_Init+0x88>)
 80024a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024a4:	2201      	movs	r2, #1
 80024a6:	4619      	mov	r1, r3
 80024a8:	f002 fbe8 	bl	8004c7c <HAL_GPIO_WritePin>

    return BSP_ERROR_NONE;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3720      	adds	r7, #32
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40023800 	.word	0x40023800
 80024bc:	080079b4 	.word	0x080079b4
 80024c0:	2000004c 	.word	0x2000004c

080024c4 <BSP_LED_On>:
 *          @arg LED2
 *          @arg LED3
 * @return BSP Status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	4a07      	ldr	r2, [pc, #28]	; (80024f0 <BSP_LED_On+0x2c>)
 80024d2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	4a06      	ldr	r2, [pc, #24]	; (80024f4 <BSP_LED_On+0x30>)
 80024da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024de:	2200      	movs	r2, #0
 80024e0:	4619      	mov	r1, r3
 80024e2:	f002 fbcb 	bl	8004c7c <HAL_GPIO_WritePin>

    return BSP_ERROR_NONE;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	2000004c 	.word	0x2000004c
 80024f4:	080079b4 	.word	0x080079b4

080024f8 <BSP_LED_Off>:
 *          @arg LED2
 *          @arg LED3
 * @return BSP Status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	4a07      	ldr	r2, [pc, #28]	; (8002524 <BSP_LED_Off+0x2c>)
 8002506:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	4a06      	ldr	r2, [pc, #24]	; (8002528 <BSP_LED_Off+0x30>)
 800250e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002512:	2201      	movs	r2, #1
 8002514:	4619      	mov	r1, r3
 8002516:	f002 fbb1 	bl	8004c7c <HAL_GPIO_WritePin>

    return BSP_ERROR_NONE;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	2000004c 	.word	0x2000004c
 8002528:	080079b4 	.word	0x080079b4

0800252c <BSP_LED_Toggle>:
 *          @arg LED2
 *          @arg LED3
 * @return BSP Status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	4a07      	ldr	r2, [pc, #28]	; (8002558 <BSP_LED_Toggle+0x2c>)
 800253a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	4906      	ldr	r1, [pc, #24]	; (800255c <BSP_LED_Toggle+0x30>)
 8002542:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002546:	4619      	mov	r1, r3
 8002548:	4610      	mov	r0, r2
 800254a:	f002 fbb0 	bl	8004cae <HAL_GPIO_TogglePin>

    return BSP_ERROR_NONE;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	2000004c 	.word	0x2000004c
 800255c:	080079b4 	.word	0x080079b4

08002560 <CAN_API_Init>:
							can_rtr_t RTR,
							init_ll_can_t Fn_Init_Can,
							send_can_data_t Fn_Send_Can_Data,
							read_can_data_t Fn_Read_Can_Data,
							get_msg_count_t Fn_Get_Msg_Count)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	607b      	str	r3, [r7, #4]
 800256a:	460b      	mov	r3, r1
 800256c:	72fb      	strb	r3, [r7, #11]
 800256e:	4613      	mov	r3, r2
 8002570:	72bb      	strb	r3, [r7, #10]
    can_status_t status;

    obj->Fn_Init_Can = Fn_Init_Can;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	611a      	str	r2, [r3, #16]

    obj->Fn_Send_Can_Data = Fn_Send_Can_Data;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6a3a      	ldr	r2, [r7, #32]
 800257c:	615a      	str	r2, [r3, #20]

    obj->Fn_Read_Can_Data = Fn_Read_Can_Data;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002582:	619a      	str	r2, [r3, #24]

    obj->Fn_Get_Msg_Count = Fn_Get_Msg_Count;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002588:	61da      	str	r2, [r3, #28]

    obj->Frame.IDE = IDE;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	7afa      	ldrb	r2, [r7, #11]
 800258e:	711a      	strb	r2, [r3, #4]
    obj->Frame.RTR = RTR;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	7aba      	ldrb	r2, [r7, #10]
 8002594:	715a      	strb	r2, [r3, #5]
    obj->Frame.payload_length = 0;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	73da      	strb	r2, [r3, #15]

    status = obj->Fn_Init_Can();
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	4798      	blx	r3
 80025a2:	4603      	mov	r3, r0
 80025a4:	75fb      	strb	r3, [r7, #23]

    return status;
 80025a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <CAN_API_Read_Message>:
 *
 * @param obj CAN structure instance
 * @return can_status_t
 */
can_status_t CAN_API_Read_Message( CAN_t *obj)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
    can_status_t status;

    status = obj->Fn_Read_Can_Data( &obj->Frame.id,
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	6878      	ldr	r0, [r7, #4]
                                    obj->Frame.payload_buff);
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	3207      	adds	r2, #7
    status = obj->Fn_Read_Can_Data( &obj->Frame.id,
 80025c2:	4611      	mov	r1, r2
 80025c4:	4798      	blx	r3
 80025c6:	4603      	mov	r3, r0
 80025c8:	73fb      	strb	r3, [r7, #15]

    return status;
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <CAN_Wrapper_Init>:
 *
 * @param   None
 * @retval  None
 */
can_status_t CAN_Wrapper_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
	/**
	 *  STM32 CAN initialization
	 */

	/* Initialize time base timer for CAN triggering */
	MX_TIM7_Init();
 80025d8:	f7ff fd7e 	bl	80020d8 <MX_TIM7_Init>

	/* Initialize CAN2 */
	MX_CAN2_Init();
 80025dc:	f7fe fe18 	bl	8001210 <MX_CAN2_Init>

	/* Disable debug freeze */
	CAN2->MCR &= (~CAN_MCR_DBF);
 80025e0:	4b0f      	ldr	r3, [pc, #60]	; (8002620 <CAN_Wrapper_Init+0x4c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a0e      	ldr	r2, [pc, #56]	; (8002620 <CAN_Wrapper_Init+0x4c>)
 80025e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ea:	6013      	str	r3, [r2, #0]

	/* CAN filter configuration */
	CAN_FilterConfig();
 80025ec:	f000 f870 	bl	80026d0 <CAN_FilterConfig>

	/* Start CAN module */
	if (HAL_CAN_Start(&hcan2) != HAL_OK)
 80025f0:	480c      	ldr	r0, [pc, #48]	; (8002624 <CAN_Wrapper_Init+0x50>)
 80025f2:	f001 f88f 	bl	8003714 <HAL_CAN_Start>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <CAN_Wrapper_Init+0x2c>
	{
		Error_Handler();
 80025fc:	f7ff f936 	bl	800186c <Error_Handler>
	}

	/* Activate CAN notification (enable interrupts) */
	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8002600:	2102      	movs	r1, #2
 8002602:	4808      	ldr	r0, [pc, #32]	; (8002624 <CAN_Wrapper_Init+0x50>)
 8002604:	f001 fab7 	bl	8003b76 <HAL_CAN_ActivateNotification>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <CAN_Wrapper_Init+0x3e>
	{
		Error_Handler();
 800260e:	f7ff f92d 	bl	800186c <Error_Handler>
	}
	
	/* Start time base trigger CAN timer */
	HAL_TIM_Base_Start_IT(&htim7);
 8002612:	4805      	ldr	r0, [pc, #20]	; (8002628 <CAN_Wrapper_Init+0x54>)
 8002614:	f003 f988 	bl	8005928 <HAL_TIM_Base_Start_IT>

	return CAN_STATUS_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40006800 	.word	0x40006800
 8002624:	2000024c 	.word	0x2000024c
 8002628:	200002f4 	.word	0x200002f4

0800262c <CAN_Wrapper_TransmitData>:
 * @param dlc Length of frame
 * @param data Data to transmit
 * @retval None
 */
can_status_t CAN_Wrapper_TransmitData(uint32_t id, uint8_t ide, uint8_t rtr, uint8_t dlc, uint8_t *data)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	4608      	mov	r0, r1
 8002636:	4611      	mov	r1, r2
 8002638:	461a      	mov	r2, r3
 800263a:	4603      	mov	r3, r0
 800263c:	70fb      	strb	r3, [r7, #3]
 800263e:	460b      	mov	r3, r1
 8002640:	70bb      	strb	r3, [r7, #2]
 8002642:	4613      	mov	r3, r2
 8002644:	707b      	strb	r3, [r7, #1]
	 */

    uint32_t TxMailbox;

    /* CAN message transmission configuration */
	TxHeader.StdId = id;            			// standard identifier value
 8002646:	4a10      	ldr	r2, [pc, #64]	; (8002688 <CAN_Wrapper_TransmitData+0x5c>)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6013      	str	r3, [r2, #0]
	TxHeader.DLC = dlc; 						// length of frame
 800264c:	787b      	ldrb	r3, [r7, #1]
 800264e:	4a0e      	ldr	r2, [pc, #56]	; (8002688 <CAN_Wrapper_TransmitData+0x5c>)
 8002650:	6113      	str	r3, [r2, #16]
	TxHeader.IDE = CAN_ID_STD; 					// type of identifier
 8002652:	4b0d      	ldr	r3, [pc, #52]	; (8002688 <CAN_Wrapper_TransmitData+0x5c>)
 8002654:	2200      	movs	r2, #0
 8002656:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;    			// type of frame
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <CAN_Wrapper_TransmitData+0x5c>)
 800265a:	2200      	movs	r2, #0
 800265c:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 800265e:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <CAN_Wrapper_TransmitData+0x5c>)
 8002660:	2200      	movs	r2, #0
 8002662:	751a      	strb	r2, [r3, #20]

	/* Start CAN transmission process */
	if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, data, &TxMailbox) != HAL_OK)
 8002664:	f107 030c 	add.w	r3, r7, #12
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4907      	ldr	r1, [pc, #28]	; (8002688 <CAN_Wrapper_TransmitData+0x5c>)
 800266c:	4807      	ldr	r0, [pc, #28]	; (800268c <CAN_Wrapper_TransmitData+0x60>)
 800266e:	f001 f895 	bl	800379c <HAL_CAN_AddTxMessage>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <CAN_Wrapper_TransmitData+0x50>
	{
		Error_Handler();						// transmission request Error
 8002678:	f7ff f8f8 	bl	800186c <Error_Handler>
	}

	return CAN_STATUS_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000140 	.word	0x20000140
 800268c:	2000024c 	.word	0x2000024c

08002690 <CAN_Wrapper_ReceiveData>:
 * @param id Received identifier
 * @param data Received data
 * @retval  None
 */
can_status_t CAN_Wrapper_ReceiveData(uint32_t *id, uint8_t *data)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
	/**
	 *  STM32 CAN receive message
	 */

	/* Get CAN received message */
    HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &RxHeader, data);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	4a06      	ldr	r2, [pc, #24]	; (80026b8 <CAN_Wrapper_ReceiveData+0x28>)
 800269e:	2100      	movs	r1, #0
 80026a0:	4806      	ldr	r0, [pc, #24]	; (80026bc <CAN_Wrapper_ReceiveData+0x2c>)
 80026a2:	f001 f956 	bl	8003952 <HAL_CAN_GetRxMessage>

    /* Received standard identifier */
    *id = RxHeader.StdId;
 80026a6:	4b04      	ldr	r3, [pc, #16]	; (80026b8 <CAN_Wrapper_ReceiveData+0x28>)
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	601a      	str	r2, [r3, #0]

	return CAN_STATUS_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	20000158 	.word	0x20000158
 80026bc:	2000024c 	.word	0x2000024c

080026c0 <CAN_Wrapper_DataCount>:
 * No es static, por lo que puede ser usada por otros archivos.
 *
 * @return can_status_t
 */
can_status_t CAN_Wrapper_DataCount(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
	return CAN_STATUS_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <CAN_FilterConfig>:
 *
 * @param None
 * @retval None
 */
static void CAN_FilterConfig(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
	/**
	 *  STM32 CAN filter configuration
	 */

	/* CAN filter configuration structure */
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80026d4:	4b15      	ldr	r3, [pc, #84]	; (800272c <CAN_FilterConfig+0x5c>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	621a      	str	r2, [r3, #32]
	sFilterConfig.FilterBank = 1;							// CAN 1 [0..13]
 80026da:	4b14      	ldr	r3, [pc, #80]	; (800272c <CAN_FilterConfig+0x5c>)
 80026dc:	2201      	movs	r2, #1
 80026de:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80026e0:	4b12      	ldr	r3, [pc, #72]	; (800272c <CAN_FilterConfig+0x5c>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	611a      	str	r2, [r3, #16]

	sFilterConfig.FilterIdHigh = 0x30 << 5;					// msg_id << 5;  // 000 0011 0000
 80026e6:	4b11      	ldr	r3, [pc, #68]	; (800272c <CAN_FilterConfig+0x5c>)
 80026e8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80026ec:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0;
 80026ee:	4b0f      	ldr	r3, [pc, #60]	; (800272c <CAN_FilterConfig+0x5c>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x3F << 5; 			// msg_id << 5;  // 000 0011 1111
 80026f4:	4b0d      	ldr	r3, [pc, #52]	; (800272c <CAN_FilterConfig+0x5c>)
 80026f6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80026fa:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80026fc:	4b0b      	ldr	r3, [pc, #44]	; (800272c <CAN_FilterConfig+0x5c>)
 80026fe:	2200      	movs	r2, #0
 8002700:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;  		// ID // 001 0011 0000
 8002702:	4b0a      	ldr	r3, [pc, #40]	; (800272c <CAN_FilterConfig+0x5c>)
 8002704:	2200      	movs	r2, #0
 8002706:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002708:	4b08      	ldr	r3, [pc, #32]	; (800272c <CAN_FilterConfig+0x5c>)
 800270a:	2201      	movs	r2, #1
 800270c:	61da      	str	r2, [r3, #28]
	sFilterConfig.SlaveStartFilterBank = 0;
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <CAN_FilterConfig+0x5c>)
 8002710:	2200      	movs	r2, #0
 8002712:	625a      	str	r2, [r3, #36]	; 0x24

	/* Configure CAN filter */
	if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig)!= HAL_OK)
 8002714:	4905      	ldr	r1, [pc, #20]	; (800272c <CAN_FilterConfig+0x5c>)
 8002716:	4806      	ldr	r0, [pc, #24]	; (8002730 <CAN_FilterConfig+0x60>)
 8002718:	f000 ff1c 	bl	8003554 <HAL_CAN_ConfigFilter>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <CAN_FilterConfig+0x56>
	{
		Error_Handler();
 8002722:	f7ff f8a3 	bl	800186c <Error_Handler>
	}
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20000174 	.word	0x20000174
 8002730:	2000024c 	.word	0x2000024c

08002734 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <SystemInit+0x20>)
 800273a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273e:	4a05      	ldr	r2, [pc, #20]	; (8002754 <SystemInit+0x20>)
 8002740:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002744:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002748:	bf00      	nop
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800275c:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <HAL_Init+0x40>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a0d      	ldr	r2, [pc, #52]	; (8002798 <HAL_Init+0x40>)
 8002762:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002766:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002768:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <HAL_Init+0x40>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a0a      	ldr	r2, [pc, #40]	; (8002798 <HAL_Init+0x40>)
 800276e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002772:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002774:	4b08      	ldr	r3, [pc, #32]	; (8002798 <HAL_Init+0x40>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a07      	ldr	r2, [pc, #28]	; (8002798 <HAL_Init+0x40>)
 800277a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800277e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002780:	2003      	movs	r0, #3
 8002782:	f001 fd1d 	bl	80041c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002786:	200f      	movs	r0, #15
 8002788:	f000 f808 	bl	800279c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800278c:	f7ff fba8 	bl	8001ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40023c00 	.word	0x40023c00

0800279c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027a4:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <HAL_InitTick+0x54>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <HAL_InitTick+0x58>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	4619      	mov	r1, r3
 80027ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80027b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ba:	4618      	mov	r0, r3
 80027bc:	f001 fd35 	bl	800422a <HAL_SYSTICK_Config>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e00e      	b.n	80027e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b0f      	cmp	r3, #15
 80027ce:	d80a      	bhi.n	80027e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027d0:	2200      	movs	r2, #0
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	f04f 30ff 	mov.w	r0, #4294967295
 80027d8:	f001 fcfd 	bl	80041d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027dc:	4a06      	ldr	r2, [pc, #24]	; (80027f8 <HAL_InitTick+0x5c>)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
 80027e4:	e000      	b.n	80027e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20000058 	.word	0x20000058
 80027f4:	20000060 	.word	0x20000060
 80027f8:	2000005c 	.word	0x2000005c

080027fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002800:	4b06      	ldr	r3, [pc, #24]	; (800281c <HAL_IncTick+0x20>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	461a      	mov	r2, r3
 8002806:	4b06      	ldr	r3, [pc, #24]	; (8002820 <HAL_IncTick+0x24>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4413      	add	r3, r2
 800280c:	4a04      	ldr	r2, [pc, #16]	; (8002820 <HAL_IncTick+0x24>)
 800280e:	6013      	str	r3, [r2, #0]
}
 8002810:	bf00      	nop
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	20000060 	.word	0x20000060
 8002820:	20000380 	.word	0x20000380

08002824 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  return uwTick;
 8002828:	4b03      	ldr	r3, [pc, #12]	; (8002838 <HAL_GetTick+0x14>)
 800282a:	681b      	ldr	r3, [r3, #0]
}
 800282c:	4618      	mov	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	20000380 	.word	0x20000380

0800283c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002844:	f7ff ffee 	bl	8002824 <HAL_GetTick>
 8002848:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002854:	d005      	beq.n	8002862 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002856:	4b0a      	ldr	r3, [pc, #40]	; (8002880 <HAL_Delay+0x44>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	461a      	mov	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4413      	add	r3, r2
 8002860:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002862:	bf00      	nop
 8002864:	f7ff ffde 	bl	8002824 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	429a      	cmp	r2, r3
 8002872:	d8f7      	bhi.n	8002864 <HAL_Delay+0x28>
  {
  }
}
 8002874:	bf00      	nop
 8002876:	bf00      	nop
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000060 	.word	0x20000060

08002884 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800288c:	2300      	movs	r3, #0
 800288e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e033      	b.n	8002902 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d109      	bne.n	80028b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7fe fb00 	bl	8000ea8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	f003 0310 	and.w	r3, r3, #16
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d118      	bne.n	80028f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028ca:	f023 0302 	bic.w	r3, r3, #2
 80028ce:	f043 0202 	orr.w	r2, r3, #2
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 fbb8 	bl	800304c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f023 0303 	bic.w	r3, r3, #3
 80028ea:	f043 0201 	orr.w	r2, r3, #1
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	641a      	str	r2, [r3, #64]	; 0x40
 80028f2:	e001      	b.n	80028f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002900:	7bfb      	ldrb	r3, [r7, #15]
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b084      	sub	sp, #16
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	2300      	movs	r3, #0
 8002918:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b02      	cmp	r3, #2
 8002926:	bf0c      	ite	eq
 8002928:	2301      	moveq	r3, #1
 800292a:	2300      	movne	r3, #0
 800292c:	b2db      	uxtb	r3, r3
 800292e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 0320 	and.w	r3, r3, #32
 800293a:	2b20      	cmp	r3, #32
 800293c:	bf0c      	ite	eq
 800293e:	2301      	moveq	r3, #1
 8002940:	2300      	movne	r3, #0
 8002942:	b2db      	uxtb	r3, r3
 8002944:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d049      	beq.n	80029e0 <HAL_ADC_IRQHandler+0xd6>
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d046      	beq.n	80029e0 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	f003 0310 	and.w	r3, r3, #16
 800295a:	2b00      	cmp	r3, #0
 800295c:	d105      	bne.n	800296a <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d12b      	bne.n	80029d0 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800297c:	2b00      	cmp	r3, #0
 800297e:	d127      	bne.n	80029d0 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002986:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800298a:	2b00      	cmp	r3, #0
 800298c:	d006      	beq.n	800299c <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002998:	2b00      	cmp	r3, #0
 800299a:	d119      	bne.n	80029d0 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0220 	bic.w	r2, r2, #32
 80029aa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d105      	bne.n	80029d0 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	f043 0201 	orr.w	r2, r3, #1
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f7ff fa6d 	bl	8001eb0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f06f 0212 	mvn.w	r2, #18
 80029de:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0304 	and.w	r3, r3, #4
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	bf0c      	ite	eq
 80029ee:	2301      	moveq	r3, #1
 80029f0:	2300      	movne	r3, #0
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a00:	2b80      	cmp	r3, #128	; 0x80
 8002a02:	bf0c      	ite	eq
 8002a04:	2301      	moveq	r3, #1
 8002a06:	2300      	movne	r3, #0
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d057      	beq.n	8002ac2 <HAL_ADC_IRQHandler+0x1b8>
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d054      	beq.n	8002ac2 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	f003 0310 	and.w	r3, r3, #16
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d105      	bne.n	8002a30 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d139      	bne.n	8002ab2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a44:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d006      	beq.n	8002a5a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d12b      	bne.n	8002ab2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d124      	bne.n	8002ab2 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d11d      	bne.n	8002ab2 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d119      	bne.n	8002ab2 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a8c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d105      	bne.n	8002ab2 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f043 0201 	orr.w	r2, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 fc48 	bl	8003348 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f06f 020c 	mvn.w	r2, #12
 8002ac0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	bf0c      	ite	eq
 8002ad0:	2301      	moveq	r3, #1
 8002ad2:	2300      	movne	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae2:	2b40      	cmp	r3, #64	; 0x40
 8002ae4:	bf0c      	ite	eq
 8002ae6:	2301      	moveq	r3, #1
 8002ae8:	2300      	movne	r3, #0
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d017      	beq.n	8002b24 <HAL_ADC_IRQHandler+0x21a>
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d014      	beq.n	8002b24 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d10d      	bne.n	8002b24 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f953 	bl	8002dc0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f06f 0201 	mvn.w	r2, #1
 8002b22:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0320 	and.w	r3, r3, #32
 8002b2e:	2b20      	cmp	r3, #32
 8002b30:	bf0c      	ite	eq
 8002b32:	2301      	moveq	r3, #1
 8002b34:	2300      	movne	r3, #0
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b48:	bf0c      	ite	eq
 8002b4a:	2301      	moveq	r3, #1
 8002b4c:	2300      	movne	r3, #0
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d015      	beq.n	8002b84 <HAL_ADC_IRQHandler+0x27a>
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d012      	beq.n	8002b84 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b62:	f043 0202 	orr.w	r2, r3, #2
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f06f 0220 	mvn.w	r2, #32
 8002b72:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 f92d 	bl	8002dd4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f06f 0220 	mvn.w	r2, #32
 8002b82:	601a      	str	r2, [r3, #0]
  }
}
 8002b84:	bf00      	nop
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d101      	bne.n	8002baa <HAL_ADC_Start_DMA+0x1e>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e0e9      	b.n	8002d7e <HAL_ADC_Start_DMA+0x1f2>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d018      	beq.n	8002bf2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0201 	orr.w	r2, r2, #1
 8002bce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bd0:	4b6d      	ldr	r3, [pc, #436]	; (8002d88 <HAL_ADC_Start_DMA+0x1fc>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a6d      	ldr	r2, [pc, #436]	; (8002d8c <HAL_ADC_Start_DMA+0x200>)
 8002bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bda:	0c9a      	lsrs	r2, r3, #18
 8002bdc:	4613      	mov	r3, r2
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	4413      	add	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002be4:	e002      	b.n	8002bec <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	3b01      	subs	r3, #1
 8002bea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f9      	bne.n	8002be6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c00:	d107      	bne.n	8002c12 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c10:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	f040 80a1 	bne.w	8002d64 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c2a:	f023 0301 	bic.w	r3, r3, #1
 8002c2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d007      	beq.n	8002c54 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c4c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c60:	d106      	bne.n	8002c70 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	f023 0206 	bic.w	r2, r3, #6
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	645a      	str	r2, [r3, #68]	; 0x44
 8002c6e:	e002      	b.n	8002c76 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c7e:	4b44      	ldr	r3, [pc, #272]	; (8002d90 <HAL_ADC_Start_DMA+0x204>)
 8002c80:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c86:	4a43      	ldr	r2, [pc, #268]	; (8002d94 <HAL_ADC_Start_DMA+0x208>)
 8002c88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8e:	4a42      	ldr	r2, [pc, #264]	; (8002d98 <HAL_ADC_Start_DMA+0x20c>)
 8002c90:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c96:	4a41      	ldr	r2, [pc, #260]	; (8002d9c <HAL_ADC_Start_DMA+0x210>)
 8002c98:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ca2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002cb2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cc2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	334c      	adds	r3, #76	; 0x4c
 8002cce:	4619      	mov	r1, r3
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f001 fb64 	bl	80043a0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 031f 	and.w	r3, r3, #31
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d12a      	bne.n	8002d3a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a2d      	ldr	r2, [pc, #180]	; (8002da0 <HAL_ADC_Start_DMA+0x214>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d015      	beq.n	8002d1a <HAL_ADC_Start_DMA+0x18e>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a2c      	ldr	r2, [pc, #176]	; (8002da4 <HAL_ADC_Start_DMA+0x218>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d105      	bne.n	8002d04 <HAL_ADC_Start_DMA+0x178>
 8002cf8:	4b25      	ldr	r3, [pc, #148]	; (8002d90 <HAL_ADC_Start_DMA+0x204>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 031f 	and.w	r3, r3, #31
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00a      	beq.n	8002d1a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a27      	ldr	r2, [pc, #156]	; (8002da8 <HAL_ADC_Start_DMA+0x21c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d136      	bne.n	8002d7c <HAL_ADC_Start_DMA+0x1f0>
 8002d0e:	4b20      	ldr	r3, [pc, #128]	; (8002d90 <HAL_ADC_Start_DMA+0x204>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f003 0310 	and.w	r3, r3, #16
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d130      	bne.n	8002d7c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d129      	bne.n	8002d7c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689a      	ldr	r2, [r3, #8]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d36:	609a      	str	r2, [r3, #8]
 8002d38:	e020      	b.n	8002d7c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a18      	ldr	r2, [pc, #96]	; (8002da0 <HAL_ADC_Start_DMA+0x214>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d11b      	bne.n	8002d7c <HAL_ADC_Start_DMA+0x1f0>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d114      	bne.n	8002d7c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d60:	609a      	str	r2, [r3, #8]
 8002d62:	e00b      	b.n	8002d7c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	f043 0210 	orr.w	r2, r3, #16
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d74:	f043 0201 	orr.w	r2, r3, #1
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20000058 	.word	0x20000058
 8002d8c:	431bde83 	.word	0x431bde83
 8002d90:	40012300 	.word	0x40012300
 8002d94:	08003245 	.word	0x08003245
 8002d98:	080032ff 	.word	0x080032ff
 8002d9c:	0800331b 	.word	0x0800331b
 8002da0:	40012000 	.word	0x40012000
 8002da4:	40012100 	.word	0x40012100
 8002da8:	40012200 	.word	0x40012200

08002dac <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002df2:	2300      	movs	r3, #0
 8002df4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d101      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x1c>
 8002e00:	2302      	movs	r3, #2
 8002e02:	e113      	b.n	800302c <HAL_ADC_ConfigChannel+0x244>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b09      	cmp	r3, #9
 8002e12:	d925      	bls.n	8002e60 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68d9      	ldr	r1, [r3, #12]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	461a      	mov	r2, r3
 8002e22:	4613      	mov	r3, r2
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	4413      	add	r3, r2
 8002e28:	3b1e      	subs	r3, #30
 8002e2a:	2207      	movs	r2, #7
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43da      	mvns	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	400a      	ands	r2, r1
 8002e38:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68d9      	ldr	r1, [r3, #12]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	4403      	add	r3, r0
 8002e52:	3b1e      	subs	r3, #30
 8002e54:	409a      	lsls	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	60da      	str	r2, [r3, #12]
 8002e5e:	e022      	b.n	8002ea6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6919      	ldr	r1, [r3, #16]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4613      	mov	r3, r2
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	4413      	add	r3, r2
 8002e74:	2207      	movs	r2, #7
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43da      	mvns	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	400a      	ands	r2, r1
 8002e82:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6919      	ldr	r1, [r3, #16]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	4618      	mov	r0, r3
 8002e96:	4603      	mov	r3, r0
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	4403      	add	r3, r0
 8002e9c:	409a      	lsls	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b06      	cmp	r3, #6
 8002eac:	d824      	bhi.n	8002ef8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	3b05      	subs	r3, #5
 8002ec0:	221f      	movs	r2, #31
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43da      	mvns	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	400a      	ands	r2, r1
 8002ece:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	4618      	mov	r0, r3
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3b05      	subs	r3, #5
 8002eea:	fa00 f203 	lsl.w	r2, r0, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ef6:	e04c      	b.n	8002f92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b0c      	cmp	r3, #12
 8002efe:	d824      	bhi.n	8002f4a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	3b23      	subs	r3, #35	; 0x23
 8002f12:	221f      	movs	r2, #31
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	43da      	mvns	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	400a      	ands	r2, r1
 8002f20:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	4618      	mov	r0, r3
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	4613      	mov	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	3b23      	subs	r3, #35	; 0x23
 8002f3c:	fa00 f203 	lsl.w	r2, r0, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	631a      	str	r2, [r3, #48]	; 0x30
 8002f48:	e023      	b.n	8002f92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	3b41      	subs	r3, #65	; 0x41
 8002f5c:	221f      	movs	r2, #31
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43da      	mvns	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	400a      	ands	r2, r1
 8002f6a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	4618      	mov	r0, r3
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	3b41      	subs	r3, #65	; 0x41
 8002f86:	fa00 f203 	lsl.w	r2, r0, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f92:	4b29      	ldr	r3, [pc, #164]	; (8003038 <HAL_ADC_ConfigChannel+0x250>)
 8002f94:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a28      	ldr	r2, [pc, #160]	; (800303c <HAL_ADC_ConfigChannel+0x254>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d10f      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x1d8>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b12      	cmp	r3, #18
 8002fa6:	d10b      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a1d      	ldr	r2, [pc, #116]	; (800303c <HAL_ADC_ConfigChannel+0x254>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d12b      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x23a>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a1c      	ldr	r2, [pc, #112]	; (8003040 <HAL_ADC_ConfigChannel+0x258>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d003      	beq.n	8002fdc <HAL_ADC_ConfigChannel+0x1f4>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b11      	cmp	r3, #17
 8002fda:	d122      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a11      	ldr	r2, [pc, #68]	; (8003040 <HAL_ADC_ConfigChannel+0x258>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d111      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ffe:	4b11      	ldr	r3, [pc, #68]	; (8003044 <HAL_ADC_ConfigChannel+0x25c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a11      	ldr	r2, [pc, #68]	; (8003048 <HAL_ADC_ConfigChannel+0x260>)
 8003004:	fba2 2303 	umull	r2, r3, r2, r3
 8003008:	0c9a      	lsrs	r2, r3, #18
 800300a:	4613      	mov	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003014:	e002      	b.n	800301c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	3b01      	subs	r3, #1
 800301a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f9      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	40012300 	.word	0x40012300
 800303c:	40012000 	.word	0x40012000
 8003040:	10000012 	.word	0x10000012
 8003044:	20000058 	.word	0x20000058
 8003048:	431bde83 	.word	0x431bde83

0800304c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003054:	4b79      	ldr	r3, [pc, #484]	; (800323c <ADC_Init+0x1f0>)
 8003056:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	431a      	orrs	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003080:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6859      	ldr	r1, [r3, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	021a      	lsls	r2, r3, #8
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80030a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6859      	ldr	r1, [r3, #4]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6899      	ldr	r1, [r3, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030de:	4a58      	ldr	r2, [pc, #352]	; (8003240 <ADC_Init+0x1f4>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d022      	beq.n	800312a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6899      	ldr	r1, [r3, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003114:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6899      	ldr	r1, [r3, #8]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	609a      	str	r2, [r3, #8]
 8003128:	e00f      	b.n	800314a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003138:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003148:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0202 	bic.w	r2, r2, #2
 8003158:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6899      	ldr	r1, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	7e1b      	ldrb	r3, [r3, #24]
 8003164:	005a      	lsls	r2, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d01b      	beq.n	80031b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003186:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003196:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6859      	ldr	r1, [r3, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	3b01      	subs	r3, #1
 80031a4:	035a      	lsls	r2, r3, #13
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	e007      	b.n	80031c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80031ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	3b01      	subs	r3, #1
 80031dc:	051a      	lsls	r2, r3, #20
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80031f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6899      	ldr	r1, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003202:	025a      	lsls	r2, r3, #9
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800321a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6899      	ldr	r1, [r3, #8]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	029a      	lsls	r2, r3, #10
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	609a      	str	r2, [r3, #8]
}
 8003230:	bf00      	nop
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	40012300 	.word	0x40012300
 8003240:	0f000001 	.word	0x0f000001

08003244 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003250:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800325a:	2b00      	cmp	r3, #0
 800325c:	d13c      	bne.n	80032d8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d12b      	bne.n	80032d0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800327c:	2b00      	cmp	r3, #0
 800327e:	d127      	bne.n	80032d0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003286:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800328a:	2b00      	cmp	r3, #0
 800328c:	d006      	beq.n	800329c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003298:	2b00      	cmp	r3, #0
 800329a:	d119      	bne.n	80032d0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0220 	bic.w	r2, r2, #32
 80032aa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d105      	bne.n	80032d0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	f043 0201 	orr.w	r2, r3, #1
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f7fe fded 	bl	8001eb0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80032d6:	e00e      	b.n	80032f6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	f003 0310 	and.w	r3, r3, #16
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d003      	beq.n	80032ec <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f7ff fd75 	bl	8002dd4 <HAL_ADC_ErrorCallback>
}
 80032ea:	e004      	b.n	80032f6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	4798      	blx	r3
}
 80032f6:	bf00      	nop
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b084      	sub	sp, #16
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f7ff fd4d 	bl	8002dac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003312:	bf00      	nop
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b084      	sub	sp, #16
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003326:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2240      	movs	r2, #64	; 0x40
 800332c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003332:	f043 0204 	orr.w	r2, r3, #4
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f7ff fd4a 	bl	8002dd4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003340:	bf00      	nop
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e0ed      	b.n	800354a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d102      	bne.n	8003380 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7fd ff7e 	bl	800127c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 0201 	orr.w	r2, r2, #1
 800338e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003390:	f7ff fa48 	bl	8002824 <HAL_GetTick>
 8003394:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003396:	e012      	b.n	80033be <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003398:	f7ff fa44 	bl	8002824 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b0a      	cmp	r3, #10
 80033a4:	d90b      	bls.n	80033be <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2205      	movs	r2, #5
 80033b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e0c5      	b.n	800354a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0e5      	beq.n	8003398 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0202 	bic.w	r2, r2, #2
 80033da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033dc:	f7ff fa22 	bl	8002824 <HAL_GetTick>
 80033e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80033e2:	e012      	b.n	800340a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80033e4:	f7ff fa1e 	bl	8002824 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b0a      	cmp	r3, #10
 80033f0:	d90b      	bls.n	800340a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2205      	movs	r2, #5
 8003402:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e09f      	b.n	800354a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1e5      	bne.n	80033e4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	7e1b      	ldrb	r3, [r3, #24]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d108      	bne.n	8003432 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	e007      	b.n	8003442 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003440:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	7e5b      	ldrb	r3, [r3, #25]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d108      	bne.n	800345c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	e007      	b.n	800346c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800346a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	7e9b      	ldrb	r3, [r3, #26]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d108      	bne.n	8003486 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0220 	orr.w	r2, r2, #32
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	e007      	b.n	8003496 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0220 	bic.w	r2, r2, #32
 8003494:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	7edb      	ldrb	r3, [r3, #27]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d108      	bne.n	80034b0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0210 	bic.w	r2, r2, #16
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	e007      	b.n	80034c0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0210 	orr.w	r2, r2, #16
 80034be:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	7f1b      	ldrb	r3, [r3, #28]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d108      	bne.n	80034da <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0208 	orr.w	r2, r2, #8
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	e007      	b.n	80034ea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 0208 	bic.w	r2, r2, #8
 80034e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	7f5b      	ldrb	r3, [r3, #29]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d108      	bne.n	8003504 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f042 0204 	orr.w	r2, r2, #4
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	e007      	b.n	8003514 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0204 	bic.w	r2, r2, #4
 8003512:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	ea42 0103 	orr.w	r1, r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	1e5a      	subs	r2, r3, #1
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003554:	b480      	push	{r7}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 3020 	ldrb.w	r3, [r3, #32]
 800356a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800356c:	7cfb      	ldrb	r3, [r7, #19]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d003      	beq.n	800357a <HAL_CAN_ConfigFilter+0x26>
 8003572:	7cfb      	ldrb	r3, [r7, #19]
 8003574:	2b02      	cmp	r3, #2
 8003576:	f040 80be 	bne.w	80036f6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800357a:	4b65      	ldr	r3, [pc, #404]	; (8003710 <HAL_CAN_ConfigFilter+0x1bc>)
 800357c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003584:	f043 0201 	orr.w	r2, r3, #1
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003594:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	021b      	lsls	r3, r3, #8
 80035aa:	431a      	orrs	r2, r3
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	f003 031f 	and.w	r3, r3, #31
 80035ba:	2201      	movs	r2, #1
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	43db      	mvns	r3, r3
 80035cc:	401a      	ands	r2, r3
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d123      	bne.n	8003624 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	43db      	mvns	r3, r3
 80035e6:	401a      	ands	r2, r3
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80035fe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	3248      	adds	r2, #72	; 0x48
 8003604:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003618:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800361a:	6979      	ldr	r1, [r7, #20]
 800361c:	3348      	adds	r3, #72	; 0x48
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	440b      	add	r3, r1
 8003622:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	69db      	ldr	r3, [r3, #28]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d122      	bne.n	8003672 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	431a      	orrs	r2, r3
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800364c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	3248      	adds	r2, #72	; 0x48
 8003652:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003666:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003668:	6979      	ldr	r1, [r7, #20]
 800366a:	3348      	adds	r3, #72	; 0x48
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	440b      	add	r3, r1
 8003670:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d109      	bne.n	800368e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	43db      	mvns	r3, r3
 8003684:	401a      	ands	r2, r3
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800368c:	e007      	b.n	800369e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	431a      	orrs	r2, r3
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d109      	bne.n	80036ba <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	43db      	mvns	r3, r3
 80036b0:	401a      	ands	r2, r3
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80036b8:	e007      	b.n	80036ca <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	431a      	orrs	r2, r3
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d107      	bne.n	80036e2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	431a      	orrs	r2, r3
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80036e8:	f023 0201 	bic.w	r2, r3, #1
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80036f2:	2300      	movs	r3, #0
 80036f4:	e006      	b.n	8003704 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
  }
}
 8003704:	4618      	mov	r0, r3
 8003706:	371c      	adds	r7, #28
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	40006400 	.word	0x40006400

08003714 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b01      	cmp	r3, #1
 8003726:	d12e      	bne.n	8003786 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003740:	f7ff f870 	bl	8002824 <HAL_GetTick>
 8003744:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003746:	e012      	b.n	800376e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003748:	f7ff f86c 	bl	8002824 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b0a      	cmp	r3, #10
 8003754:	d90b      	bls.n	800376e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2205      	movs	r2, #5
 8003766:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e012      	b.n	8003794 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1e5      	bne.n	8003748 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003782:	2300      	movs	r3, #0
 8003784:	e006      	b.n	8003794 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
  }
}
 8003794:	4618      	mov	r0, r3
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800379c:	b480      	push	{r7}
 800379e:	b089      	sub	sp, #36	; 0x24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
 80037a8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037b0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80037ba:	7ffb      	ldrb	r3, [r7, #31]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d003      	beq.n	80037c8 <HAL_CAN_AddTxMessage+0x2c>
 80037c0:	7ffb      	ldrb	r3, [r7, #31]
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	f040 80b8 	bne.w	8003938 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10a      	bne.n	80037e8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d105      	bne.n	80037e8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 80a0 	beq.w	8003928 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	0e1b      	lsrs	r3, r3, #24
 80037ec:	f003 0303 	and.w	r3, r3, #3
 80037f0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d907      	bls.n	8003808 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e09e      	b.n	8003946 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003808:	2201      	movs	r2, #1
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	409a      	lsls	r2, r3
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10d      	bne.n	8003836 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003824:	68f9      	ldr	r1, [r7, #12]
 8003826:	6809      	ldr	r1, [r1, #0]
 8003828:	431a      	orrs	r2, r3
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	3318      	adds	r3, #24
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	440b      	add	r3, r1
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	e00f      	b.n	8003856 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003840:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003846:	68f9      	ldr	r1, [r7, #12]
 8003848:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800384a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	3318      	adds	r3, #24
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	440b      	add	r3, r1
 8003854:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6819      	ldr	r1, [r3, #0]
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	3318      	adds	r3, #24
 8003862:	011b      	lsls	r3, r3, #4
 8003864:	440b      	add	r3, r1
 8003866:	3304      	adds	r3, #4
 8003868:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	7d1b      	ldrb	r3, [r3, #20]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d111      	bne.n	8003896 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	3318      	adds	r3, #24
 800387a:	011b      	lsls	r3, r3, #4
 800387c:	4413      	add	r3, r2
 800387e:	3304      	adds	r3, #4
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	6811      	ldr	r1, [r2, #0]
 8003886:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	3318      	adds	r3, #24
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	440b      	add	r3, r1
 8003892:	3304      	adds	r3, #4
 8003894:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	3307      	adds	r3, #7
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	061a      	lsls	r2, r3, #24
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3306      	adds	r3, #6
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	041b      	lsls	r3, r3, #16
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3305      	adds	r3, #5
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	021b      	lsls	r3, r3, #8
 80038b0:	4313      	orrs	r3, r2
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	3204      	adds	r2, #4
 80038b6:	7812      	ldrb	r2, [r2, #0]
 80038b8:	4610      	mov	r0, r2
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	6811      	ldr	r1, [r2, #0]
 80038be:	ea43 0200 	orr.w	r2, r3, r0
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	440b      	add	r3, r1
 80038c8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80038cc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	3303      	adds	r3, #3
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	061a      	lsls	r2, r3, #24
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	3302      	adds	r3, #2
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	041b      	lsls	r3, r3, #16
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3301      	adds	r3, #1
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	021b      	lsls	r3, r3, #8
 80038e8:	4313      	orrs	r3, r2
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	7812      	ldrb	r2, [r2, #0]
 80038ee:	4610      	mov	r0, r2
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	6811      	ldr	r1, [r2, #0]
 80038f4:	ea43 0200 	orr.w	r2, r3, r0
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	440b      	add	r3, r1
 80038fe:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003902:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	3318      	adds	r3, #24
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	4413      	add	r3, r2
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	6811      	ldr	r1, [r2, #0]
 8003916:	f043 0201 	orr.w	r2, r3, #1
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	3318      	adds	r3, #24
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	440b      	add	r3, r1
 8003922:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003924:	2300      	movs	r3, #0
 8003926:	e00e      	b.n	8003946 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e006      	b.n	8003946 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
  }
}
 8003946:	4618      	mov	r0, r3
 8003948:	3724      	adds	r7, #36	; 0x24
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003952:	b480      	push	{r7}
 8003954:	b087      	sub	sp, #28
 8003956:	af00      	add	r7, sp, #0
 8003958:	60f8      	str	r0, [r7, #12]
 800395a:	60b9      	str	r1, [r7, #8]
 800395c:	607a      	str	r2, [r7, #4]
 800395e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003966:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003968:	7dfb      	ldrb	r3, [r7, #23]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d003      	beq.n	8003976 <HAL_CAN_GetRxMessage+0x24>
 800396e:	7dfb      	ldrb	r3, [r7, #23]
 8003970:	2b02      	cmp	r3, #2
 8003972:	f040 80f3 	bne.w	8003b5c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10e      	bne.n	800399a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f003 0303 	and.w	r3, r3, #3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d116      	bne.n	80039b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e0e7      	b.n	8003b6a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	f003 0303 	and.w	r3, r3, #3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d107      	bne.n	80039b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e0d8      	b.n	8003b6a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	331b      	adds	r3, #27
 80039c0:	011b      	lsls	r3, r3, #4
 80039c2:	4413      	add	r3, r2
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0204 	and.w	r2, r3, #4
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10c      	bne.n	80039f0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	331b      	adds	r3, #27
 80039de:	011b      	lsls	r3, r3, #4
 80039e0:	4413      	add	r3, r2
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	0d5b      	lsrs	r3, r3, #21
 80039e6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	e00b      	b.n	8003a08 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	331b      	adds	r3, #27
 80039f8:	011b      	lsls	r3, r3, #4
 80039fa:	4413      	add	r3, r2
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	08db      	lsrs	r3, r3, #3
 8003a00:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	331b      	adds	r3, #27
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	4413      	add	r3, r2
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0202 	and.w	r2, r3, #2
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	331b      	adds	r3, #27
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	4413      	add	r3, r2
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 020f 	and.w	r2, r3, #15
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	331b      	adds	r3, #27
 8003a3e:	011b      	lsls	r3, r3, #4
 8003a40:	4413      	add	r3, r2
 8003a42:	3304      	adds	r3, #4
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	0a1b      	lsrs	r3, r3, #8
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	331b      	adds	r3, #27
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	4413      	add	r3, r2
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	0c1b      	lsrs	r3, r3, #16
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	011b      	lsls	r3, r3, #4
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	011b      	lsls	r3, r3, #4
 8003a84:	4413      	add	r3, r2
 8003a86:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	0a1a      	lsrs	r2, r3, #8
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	3301      	adds	r3, #1
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	0c1a      	lsrs	r2, r3, #16
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	3302      	adds	r3, #2
 8003aac:	b2d2      	uxtb	r2, r2
 8003aae:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	4413      	add	r3, r2
 8003aba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	0e1a      	lsrs	r2, r3, #24
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	3303      	adds	r3, #3
 8003ac6:	b2d2      	uxtb	r2, r2
 8003ac8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	011b      	lsls	r3, r3, #4
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	3304      	adds	r3, #4
 8003ade:	b2d2      	uxtb	r2, r2
 8003ae0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	011b      	lsls	r3, r3, #4
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	0a1a      	lsrs	r2, r3, #8
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	3305      	adds	r3, #5
 8003af8:	b2d2      	uxtb	r2, r2
 8003afa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	4413      	add	r3, r2
 8003b06:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	0c1a      	lsrs	r2, r3, #16
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	3306      	adds	r3, #6
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	011b      	lsls	r3, r3, #4
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	0e1a      	lsrs	r2, r3, #24
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	3307      	adds	r3, #7
 8003b2c:	b2d2      	uxtb	r2, r2
 8003b2e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d108      	bne.n	8003b48 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68da      	ldr	r2, [r3, #12]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f042 0220 	orr.w	r2, r2, #32
 8003b44:	60da      	str	r2, [r3, #12]
 8003b46:	e007      	b.n	8003b58 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	691a      	ldr	r2, [r3, #16]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f042 0220 	orr.w	r2, r2, #32
 8003b56:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	e006      	b.n	8003b6a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
  }
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	371c      	adds	r7, #28
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b085      	sub	sp, #20
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
 8003b7e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b86:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d002      	beq.n	8003b94 <HAL_CAN_ActivateNotification+0x1e>
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d109      	bne.n	8003ba8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6959      	ldr	r1, [r3, #20]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	e006      	b.n	8003bb6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
  }
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b08a      	sub	sp, #40	; 0x28
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003bfe:	6a3b      	ldr	r3, [r7, #32]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d07c      	beq.n	8003d02 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d023      	beq.n	8003c5a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2201      	movs	r2, #1
 8003c18:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f983 	bl	8003f30 <HAL_CAN_TxMailbox0CompleteCallback>
 8003c2a:	e016      	b.n	8003c5a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	f003 0304 	and.w	r3, r3, #4
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d004      	beq.n	8003c40 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c3e:	e00c      	b.n	8003c5a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	f003 0308 	and.w	r3, r3, #8
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d004      	beq.n	8003c54 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
 8003c52:	e002      	b.n	8003c5a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 f989 	bl	8003f6c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d024      	beq.n	8003cae <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c6c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 f963 	bl	8003f44 <HAL_CAN_TxMailbox1CompleteCallback>
 8003c7e:	e016      	b.n	8003cae <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d004      	beq.n	8003c94 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c90:	627b      	str	r3, [r7, #36]	; 0x24
 8003c92:	e00c      	b.n	8003cae <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d004      	beq.n	8003ca8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca6:	e002      	b.n	8003cae <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f969 	bl	8003f80 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d024      	beq.n	8003d02 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003cc0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f943 	bl	8003f58 <HAL_CAN_TxMailbox2CompleteCallback>
 8003cd2:	e016      	b.n	8003d02 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d004      	beq.n	8003ce8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce6:	e00c      	b.n	8003d02 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d004      	beq.n	8003cfc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cfa:	e002      	b.n	8003d02 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f949 	bl	8003f94 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003d02:	6a3b      	ldr	r3, [r7, #32]
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00c      	beq.n	8003d26 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f003 0310 	and.w	r3, r3, #16
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d007      	beq.n	8003d26 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2210      	movs	r2, #16
 8003d24:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00b      	beq.n	8003d48 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f003 0308 	and.w	r3, r3, #8
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d006      	beq.n	8003d48 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2208      	movs	r2, #8
 8003d40:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 f930 	bl	8003fa8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d009      	beq.n	8003d66 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f003 0303 	and.w	r3, r3, #3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d002      	beq.n	8003d66 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7fd fb05 	bl	8001370 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00c      	beq.n	8003d8a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f003 0310 	and.w	r3, r3, #16
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d007      	beq.n	8003d8a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d80:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2210      	movs	r2, #16
 8003d88:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	f003 0320 	and.w	r3, r3, #32
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00b      	beq.n	8003dac <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d006      	beq.n	8003dac <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2208      	movs	r2, #8
 8003da4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f912 	bl	8003fd0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	f003 0310 	and.w	r3, r3, #16
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d009      	beq.n	8003dca <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	f003 0303 	and.w	r3, r3, #3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d002      	beq.n	8003dca <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 f8f9 	bl	8003fbc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003dca:	6a3b      	ldr	r3, [r7, #32]
 8003dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00b      	beq.n	8003dec <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	f003 0310 	and.w	r3, r3, #16
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d006      	beq.n	8003dec <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2210      	movs	r2, #16
 8003de4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f8fc 	bl	8003fe4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00b      	beq.n	8003e0e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d006      	beq.n	8003e0e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2208      	movs	r2, #8
 8003e06:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 f8f5 	bl	8003ff8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d07b      	beq.n	8003f10 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	f003 0304 	and.w	r3, r3, #4
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d072      	beq.n	8003f08 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e22:	6a3b      	ldr	r3, [r7, #32]
 8003e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d008      	beq.n	8003e3e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	f043 0301 	orr.w	r3, r3, #1
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d008      	beq.n	8003e5a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	f043 0302 	orr.w	r3, r3, #2
 8003e58:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
 8003e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d008      	beq.n	8003e76 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	f043 0304 	orr.w	r3, r3, #4
 8003e74:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d043      	beq.n	8003f08 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d03e      	beq.n	8003f08 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e90:	2b60      	cmp	r3, #96	; 0x60
 8003e92:	d02b      	beq.n	8003eec <HAL_CAN_IRQHandler+0x32a>
 8003e94:	2b60      	cmp	r3, #96	; 0x60
 8003e96:	d82e      	bhi.n	8003ef6 <HAL_CAN_IRQHandler+0x334>
 8003e98:	2b50      	cmp	r3, #80	; 0x50
 8003e9a:	d022      	beq.n	8003ee2 <HAL_CAN_IRQHandler+0x320>
 8003e9c:	2b50      	cmp	r3, #80	; 0x50
 8003e9e:	d82a      	bhi.n	8003ef6 <HAL_CAN_IRQHandler+0x334>
 8003ea0:	2b40      	cmp	r3, #64	; 0x40
 8003ea2:	d019      	beq.n	8003ed8 <HAL_CAN_IRQHandler+0x316>
 8003ea4:	2b40      	cmp	r3, #64	; 0x40
 8003ea6:	d826      	bhi.n	8003ef6 <HAL_CAN_IRQHandler+0x334>
 8003ea8:	2b30      	cmp	r3, #48	; 0x30
 8003eaa:	d010      	beq.n	8003ece <HAL_CAN_IRQHandler+0x30c>
 8003eac:	2b30      	cmp	r3, #48	; 0x30
 8003eae:	d822      	bhi.n	8003ef6 <HAL_CAN_IRQHandler+0x334>
 8003eb0:	2b10      	cmp	r3, #16
 8003eb2:	d002      	beq.n	8003eba <HAL_CAN_IRQHandler+0x2f8>
 8003eb4:	2b20      	cmp	r3, #32
 8003eb6:	d005      	beq.n	8003ec4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003eb8:	e01d      	b.n	8003ef6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	f043 0308 	orr.w	r3, r3, #8
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ec2:	e019      	b.n	8003ef8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	f043 0310 	orr.w	r3, r3, #16
 8003eca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ecc:	e014      	b.n	8003ef8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	f043 0320 	orr.w	r3, r3, #32
 8003ed4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ed6:	e00f      	b.n	8003ef8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ede:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ee0:	e00a      	b.n	8003ef8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003eea:	e005      	b.n	8003ef8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ef4:	e000      	b.n	8003ef8 <HAL_CAN_IRQHandler+0x336>
            break;
 8003ef6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699a      	ldr	r2, [r3, #24]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003f06:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2204      	movs	r2, #4
 8003f0e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d008      	beq.n	8003f28 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f872 	bl	800400c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003f28:	bf00      	nop
 8003f2a:	3728      	adds	r7, #40	; 0x28
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004030:	4b0c      	ldr	r3, [pc, #48]	; (8004064 <__NVIC_SetPriorityGrouping+0x44>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800403c:	4013      	ands	r3, r2
 800403e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800404c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004052:	4a04      	ldr	r2, [pc, #16]	; (8004064 <__NVIC_SetPriorityGrouping+0x44>)
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	60d3      	str	r3, [r2, #12]
}
 8004058:	bf00      	nop
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	e000ed00 	.word	0xe000ed00

08004068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800406c:	4b04      	ldr	r3, [pc, #16]	; (8004080 <__NVIC_GetPriorityGrouping+0x18>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	0a1b      	lsrs	r3, r3, #8
 8004072:	f003 0307 	and.w	r3, r3, #7
}
 8004076:	4618      	mov	r0, r3
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	e000ed00 	.word	0xe000ed00

08004084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	4603      	mov	r3, r0
 800408c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800408e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004092:	2b00      	cmp	r3, #0
 8004094:	db0b      	blt.n	80040ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	f003 021f 	and.w	r2, r3, #31
 800409c:	4907      	ldr	r1, [pc, #28]	; (80040bc <__NVIC_EnableIRQ+0x38>)
 800409e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a2:	095b      	lsrs	r3, r3, #5
 80040a4:	2001      	movs	r0, #1
 80040a6:	fa00 f202 	lsl.w	r2, r0, r2
 80040aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	e000e100 	.word	0xe000e100

080040c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	4603      	mov	r3, r0
 80040c8:	6039      	str	r1, [r7, #0]
 80040ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	db0a      	blt.n	80040ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	490c      	ldr	r1, [pc, #48]	; (800410c <__NVIC_SetPriority+0x4c>)
 80040da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040de:	0112      	lsls	r2, r2, #4
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	440b      	add	r3, r1
 80040e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040e8:	e00a      	b.n	8004100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	4908      	ldr	r1, [pc, #32]	; (8004110 <__NVIC_SetPriority+0x50>)
 80040f0:	79fb      	ldrb	r3, [r7, #7]
 80040f2:	f003 030f 	and.w	r3, r3, #15
 80040f6:	3b04      	subs	r3, #4
 80040f8:	0112      	lsls	r2, r2, #4
 80040fa:	b2d2      	uxtb	r2, r2
 80040fc:	440b      	add	r3, r1
 80040fe:	761a      	strb	r2, [r3, #24]
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	e000e100 	.word	0xe000e100
 8004110:	e000ed00 	.word	0xe000ed00

08004114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004114:	b480      	push	{r7}
 8004116:	b089      	sub	sp, #36	; 0x24
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f003 0307 	and.w	r3, r3, #7
 8004126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	f1c3 0307 	rsb	r3, r3, #7
 800412e:	2b04      	cmp	r3, #4
 8004130:	bf28      	it	cs
 8004132:	2304      	movcs	r3, #4
 8004134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	3304      	adds	r3, #4
 800413a:	2b06      	cmp	r3, #6
 800413c:	d902      	bls.n	8004144 <NVIC_EncodePriority+0x30>
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	3b03      	subs	r3, #3
 8004142:	e000      	b.n	8004146 <NVIC_EncodePriority+0x32>
 8004144:	2300      	movs	r3, #0
 8004146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004148:	f04f 32ff 	mov.w	r2, #4294967295
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	fa02 f303 	lsl.w	r3, r2, r3
 8004152:	43da      	mvns	r2, r3
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	401a      	ands	r2, r3
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800415c:	f04f 31ff 	mov.w	r1, #4294967295
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	fa01 f303 	lsl.w	r3, r1, r3
 8004166:	43d9      	mvns	r1, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800416c:	4313      	orrs	r3, r2
         );
}
 800416e:	4618      	mov	r0, r3
 8004170:	3724      	adds	r7, #36	; 0x24
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
	...

0800417c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	3b01      	subs	r3, #1
 8004188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800418c:	d301      	bcc.n	8004192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800418e:	2301      	movs	r3, #1
 8004190:	e00f      	b.n	80041b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004192:	4a0a      	ldr	r2, [pc, #40]	; (80041bc <SysTick_Config+0x40>)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3b01      	subs	r3, #1
 8004198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800419a:	210f      	movs	r1, #15
 800419c:	f04f 30ff 	mov.w	r0, #4294967295
 80041a0:	f7ff ff8e 	bl	80040c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041a4:	4b05      	ldr	r3, [pc, #20]	; (80041bc <SysTick_Config+0x40>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041aa:	4b04      	ldr	r3, [pc, #16]	; (80041bc <SysTick_Config+0x40>)
 80041ac:	2207      	movs	r2, #7
 80041ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	e000e010 	.word	0xe000e010

080041c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7ff ff29 	bl	8004020 <__NVIC_SetPriorityGrouping>
}
 80041ce:	bf00      	nop
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b086      	sub	sp, #24
 80041da:	af00      	add	r7, sp, #0
 80041dc:	4603      	mov	r3, r0
 80041de:	60b9      	str	r1, [r7, #8]
 80041e0:	607a      	str	r2, [r7, #4]
 80041e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041e8:	f7ff ff3e 	bl	8004068 <__NVIC_GetPriorityGrouping>
 80041ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	68b9      	ldr	r1, [r7, #8]
 80041f2:	6978      	ldr	r0, [r7, #20]
 80041f4:	f7ff ff8e 	bl	8004114 <NVIC_EncodePriority>
 80041f8:	4602      	mov	r2, r0
 80041fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041fe:	4611      	mov	r1, r2
 8004200:	4618      	mov	r0, r3
 8004202:	f7ff ff5d 	bl	80040c0 <__NVIC_SetPriority>
}
 8004206:	bf00      	nop
 8004208:	3718      	adds	r7, #24
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b082      	sub	sp, #8
 8004212:	af00      	add	r7, sp, #0
 8004214:	4603      	mov	r3, r0
 8004216:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff ff31 	bl	8004084 <__NVIC_EnableIRQ>
}
 8004222:	bf00      	nop
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b082      	sub	sp, #8
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7ff ffa2 	bl	800417c <SysTick_Config>
 8004238:	4603      	mov	r3, r0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
	...

08004244 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004250:	f7fe fae8 	bl	8002824 <HAL_GetTick>
 8004254:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e099      	b.n	8004394 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2202      	movs	r2, #2
 8004264:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0201 	bic.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004280:	e00f      	b.n	80042a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004282:	f7fe facf 	bl	8002824 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b05      	cmp	r3, #5
 800428e:	d908      	bls.n	80042a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2220      	movs	r2, #32
 8004294:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2203      	movs	r2, #3
 800429a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e078      	b.n	8004394 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1e8      	bne.n	8004282 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	4b38      	ldr	r3, [pc, #224]	; (800439c <HAL_DMA_Init+0x158>)
 80042bc:	4013      	ands	r3, r2
 80042be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	d107      	bne.n	800430c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004304:	4313      	orrs	r3, r2
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	4313      	orrs	r3, r2
 800430a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f023 0307 	bic.w	r3, r3, #7
 8004322:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	4313      	orrs	r3, r2
 800432c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	2b04      	cmp	r3, #4
 8004334:	d117      	bne.n	8004366 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	4313      	orrs	r3, r2
 800433e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00e      	beq.n	8004366 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 fa6f 	bl	800482c <DMA_CheckFifoParam>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d008      	beq.n	8004366 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2240      	movs	r2, #64	; 0x40
 8004358:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004362:	2301      	movs	r3, #1
 8004364:	e016      	b.n	8004394 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 fa26 	bl	80047c0 <DMA_CalcBaseAndBitshift>
 8004374:	4603      	mov	r3, r0
 8004376:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800437c:	223f      	movs	r2, #63	; 0x3f
 800437e:	409a      	lsls	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3718      	adds	r7, #24
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	f010803f 	.word	0xf010803f

080043a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
 80043ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043ae:	2300      	movs	r3, #0
 80043b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d101      	bne.n	80043c6 <HAL_DMA_Start_IT+0x26>
 80043c2:	2302      	movs	r3, #2
 80043c4:	e040      	b.n	8004448 <HAL_DMA_Start_IT+0xa8>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d12f      	bne.n	800443a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2202      	movs	r2, #2
 80043de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	68b9      	ldr	r1, [r7, #8]
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 f9b8 	bl	8004764 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f8:	223f      	movs	r2, #63	; 0x3f
 80043fa:	409a      	lsls	r2, r3
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f042 0216 	orr.w	r2, r2, #22
 800440e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	2b00      	cmp	r3, #0
 8004416:	d007      	beq.n	8004428 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0208 	orr.w	r2, r2, #8
 8004426:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f042 0201 	orr.w	r2, r2, #1
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	e005      	b.n	8004446 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004442:	2302      	movs	r3, #2
 8004444:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004446:	7dfb      	ldrb	r3, [r7, #23]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3718      	adds	r7, #24
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004458:	2300      	movs	r3, #0
 800445a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800445c:	4b92      	ldr	r3, [pc, #584]	; (80046a8 <HAL_DMA_IRQHandler+0x258>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a92      	ldr	r2, [pc, #584]	; (80046ac <HAL_DMA_IRQHandler+0x25c>)
 8004462:	fba2 2303 	umull	r2, r3, r2, r3
 8004466:	0a9b      	lsrs	r3, r3, #10
 8004468:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800447a:	2208      	movs	r2, #8
 800447c:	409a      	lsls	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	4013      	ands	r3, r2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d01a      	beq.n	80044bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b00      	cmp	r3, #0
 8004492:	d013      	beq.n	80044bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 0204 	bic.w	r2, r2, #4
 80044a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a8:	2208      	movs	r2, #8
 80044aa:	409a      	lsls	r2, r3
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b4:	f043 0201 	orr.w	r2, r3, #1
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c0:	2201      	movs	r2, #1
 80044c2:	409a      	lsls	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4013      	ands	r3, r2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d012      	beq.n	80044f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00b      	beq.n	80044f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044de:	2201      	movs	r2, #1
 80044e0:	409a      	lsls	r2, r3
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ea:	f043 0202 	orr.w	r2, r3, #2
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f6:	2204      	movs	r2, #4
 80044f8:	409a      	lsls	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	4013      	ands	r3, r2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d012      	beq.n	8004528 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00b      	beq.n	8004528 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004514:	2204      	movs	r2, #4
 8004516:	409a      	lsls	r2, r3
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004520:	f043 0204 	orr.w	r2, r3, #4
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800452c:	2210      	movs	r2, #16
 800452e:	409a      	lsls	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4013      	ands	r3, r2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d043      	beq.n	80045c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0308 	and.w	r3, r3, #8
 8004542:	2b00      	cmp	r3, #0
 8004544:	d03c      	beq.n	80045c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800454a:	2210      	movs	r2, #16
 800454c:	409a      	lsls	r2, r3
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d018      	beq.n	8004592 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d108      	bne.n	8004580 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004572:	2b00      	cmp	r3, #0
 8004574:	d024      	beq.n	80045c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	4798      	blx	r3
 800457e:	e01f      	b.n	80045c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004584:	2b00      	cmp	r3, #0
 8004586:	d01b      	beq.n	80045c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	4798      	blx	r3
 8004590:	e016      	b.n	80045c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459c:	2b00      	cmp	r3, #0
 800459e:	d107      	bne.n	80045b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 0208 	bic.w	r2, r2, #8
 80045ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d003      	beq.n	80045c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c4:	2220      	movs	r2, #32
 80045c6:	409a      	lsls	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4013      	ands	r3, r2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f000 808e 	beq.w	80046ee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0310 	and.w	r3, r3, #16
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 8086 	beq.w	80046ee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e6:	2220      	movs	r2, #32
 80045e8:	409a      	lsls	r2, r3
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b05      	cmp	r3, #5
 80045f8:	d136      	bne.n	8004668 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 0216 	bic.w	r2, r2, #22
 8004608:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	695a      	ldr	r2, [r3, #20]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004618:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	2b00      	cmp	r3, #0
 8004620:	d103      	bne.n	800462a <HAL_DMA_IRQHandler+0x1da>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004626:	2b00      	cmp	r3, #0
 8004628:	d007      	beq.n	800463a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f022 0208 	bic.w	r2, r2, #8
 8004638:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800463e:	223f      	movs	r2, #63	; 0x3f
 8004640:	409a      	lsls	r2, r3
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800465a:	2b00      	cmp	r3, #0
 800465c:	d07d      	beq.n	800475a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	4798      	blx	r3
        }
        return;
 8004666:	e078      	b.n	800475a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d01c      	beq.n	80046b0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d108      	bne.n	8004696 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004688:	2b00      	cmp	r3, #0
 800468a:	d030      	beq.n	80046ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	4798      	blx	r3
 8004694:	e02b      	b.n	80046ee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469a:	2b00      	cmp	r3, #0
 800469c:	d027      	beq.n	80046ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	4798      	blx	r3
 80046a6:	e022      	b.n	80046ee <HAL_DMA_IRQHandler+0x29e>
 80046a8:	20000058 	.word	0x20000058
 80046ac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10f      	bne.n	80046de <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0210 	bic.w	r2, r2, #16
 80046cc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d032      	beq.n	800475c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d022      	beq.n	8004748 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2205      	movs	r2, #5
 8004706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0201 	bic.w	r2, r2, #1
 8004718:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	3301      	adds	r3, #1
 800471e:	60bb      	str	r3, [r7, #8]
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	429a      	cmp	r2, r3
 8004724:	d307      	bcc.n	8004736 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1f2      	bne.n	800471a <HAL_DMA_IRQHandler+0x2ca>
 8004734:	e000      	b.n	8004738 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004736:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800474c:	2b00      	cmp	r3, #0
 800474e:	d005      	beq.n	800475c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	4798      	blx	r3
 8004758:	e000      	b.n	800475c <HAL_DMA_IRQHandler+0x30c>
        return;
 800475a:	bf00      	nop
    }
  }
}
 800475c:	3718      	adds	r7, #24
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop

08004764 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
 8004770:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004780:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	2b40      	cmp	r3, #64	; 0x40
 8004790:	d108      	bne.n	80047a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80047a2:	e007      	b.n	80047b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	60da      	str	r2, [r3, #12]
}
 80047b4:	bf00      	nop
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	3b10      	subs	r3, #16
 80047d0:	4a14      	ldr	r2, [pc, #80]	; (8004824 <DMA_CalcBaseAndBitshift+0x64>)
 80047d2:	fba2 2303 	umull	r2, r3, r2, r3
 80047d6:	091b      	lsrs	r3, r3, #4
 80047d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80047da:	4a13      	ldr	r2, [pc, #76]	; (8004828 <DMA_CalcBaseAndBitshift+0x68>)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4413      	add	r3, r2
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	461a      	mov	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2b03      	cmp	r3, #3
 80047ec:	d909      	bls.n	8004802 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80047f6:	f023 0303 	bic.w	r3, r3, #3
 80047fa:	1d1a      	adds	r2, r3, #4
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	659a      	str	r2, [r3, #88]	; 0x58
 8004800:	e007      	b.n	8004812 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800480a:	f023 0303 	bic.w	r3, r3, #3
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004816:	4618      	mov	r0, r3
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	aaaaaaab 	.word	0xaaaaaaab
 8004828:	080079d4 	.word	0x080079d4

0800482c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004834:	2300      	movs	r3, #0
 8004836:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d11f      	bne.n	8004886 <DMA_CheckFifoParam+0x5a>
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	2b03      	cmp	r3, #3
 800484a:	d856      	bhi.n	80048fa <DMA_CheckFifoParam+0xce>
 800484c:	a201      	add	r2, pc, #4	; (adr r2, 8004854 <DMA_CheckFifoParam+0x28>)
 800484e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004852:	bf00      	nop
 8004854:	08004865 	.word	0x08004865
 8004858:	08004877 	.word	0x08004877
 800485c:	08004865 	.word	0x08004865
 8004860:	080048fb 	.word	0x080048fb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004868:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d046      	beq.n	80048fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004874:	e043      	b.n	80048fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800487e:	d140      	bne.n	8004902 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004884:	e03d      	b.n	8004902 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800488e:	d121      	bne.n	80048d4 <DMA_CheckFifoParam+0xa8>
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2b03      	cmp	r3, #3
 8004894:	d837      	bhi.n	8004906 <DMA_CheckFifoParam+0xda>
 8004896:	a201      	add	r2, pc, #4	; (adr r2, 800489c <DMA_CheckFifoParam+0x70>)
 8004898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489c:	080048ad 	.word	0x080048ad
 80048a0:	080048b3 	.word	0x080048b3
 80048a4:	080048ad 	.word	0x080048ad
 80048a8:	080048c5 	.word	0x080048c5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	73fb      	strb	r3, [r7, #15]
      break;
 80048b0:	e030      	b.n	8004914 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d025      	beq.n	800490a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048c2:	e022      	b.n	800490a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048cc:	d11f      	bne.n	800490e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80048d2:	e01c      	b.n	800490e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d903      	bls.n	80048e2 <DMA_CheckFifoParam+0xb6>
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	2b03      	cmp	r3, #3
 80048de:	d003      	beq.n	80048e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80048e0:	e018      	b.n	8004914 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	73fb      	strb	r3, [r7, #15]
      break;
 80048e6:	e015      	b.n	8004914 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00e      	beq.n	8004912 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	73fb      	strb	r3, [r7, #15]
      break;
 80048f8:	e00b      	b.n	8004912 <DMA_CheckFifoParam+0xe6>
      break;
 80048fa:	bf00      	nop
 80048fc:	e00a      	b.n	8004914 <DMA_CheckFifoParam+0xe8>
      break;
 80048fe:	bf00      	nop
 8004900:	e008      	b.n	8004914 <DMA_CheckFifoParam+0xe8>
      break;
 8004902:	bf00      	nop
 8004904:	e006      	b.n	8004914 <DMA_CheckFifoParam+0xe8>
      break;
 8004906:	bf00      	nop
 8004908:	e004      	b.n	8004914 <DMA_CheckFifoParam+0xe8>
      break;
 800490a:	bf00      	nop
 800490c:	e002      	b.n	8004914 <DMA_CheckFifoParam+0xe8>
      break;   
 800490e:	bf00      	nop
 8004910:	e000      	b.n	8004914 <DMA_CheckFifoParam+0xe8>
      break;
 8004912:	bf00      	nop
    }
  } 
  
  return status; 
 8004914:	7bfb      	ldrb	r3, [r7, #15]
}
 8004916:	4618      	mov	r0, r3
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop

08004924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004924:	b480      	push	{r7}
 8004926:	b089      	sub	sp, #36	; 0x24
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800492e:	2300      	movs	r3, #0
 8004930:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004932:	2300      	movs	r3, #0
 8004934:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004936:	2300      	movs	r3, #0
 8004938:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800493a:	2300      	movs	r3, #0
 800493c:	61fb      	str	r3, [r7, #28]
 800493e:	e165      	b.n	8004c0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004940:	2201      	movs	r2, #1
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	fa02 f303 	lsl.w	r3, r2, r3
 8004948:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	4013      	ands	r3, r2
 8004952:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	429a      	cmp	r2, r3
 800495a:	f040 8154 	bne.w	8004c06 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	2b01      	cmp	r3, #1
 8004968:	d005      	beq.n	8004976 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004972:	2b02      	cmp	r3, #2
 8004974:	d130      	bne.n	80049d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	2203      	movs	r2, #3
 8004982:	fa02 f303 	lsl.w	r3, r2, r3
 8004986:	43db      	mvns	r3, r3
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	4013      	ands	r3, r2
 800498c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	68da      	ldr	r2, [r3, #12]
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	fa02 f303 	lsl.w	r3, r2, r3
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	4313      	orrs	r3, r2
 800499e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049ac:	2201      	movs	r2, #1
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	fa02 f303 	lsl.w	r3, r2, r3
 80049b4:	43db      	mvns	r3, r3
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	4013      	ands	r3, r2
 80049ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	091b      	lsrs	r3, r3, #4
 80049c2:	f003 0201 	and.w	r2, r3, #1
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	fa02 f303 	lsl.w	r3, r2, r3
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f003 0303 	and.w	r3, r3, #3
 80049e0:	2b03      	cmp	r3, #3
 80049e2:	d017      	beq.n	8004a14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	2203      	movs	r2, #3
 80049f0:	fa02 f303 	lsl.w	r3, r2, r3
 80049f4:	43db      	mvns	r3, r3
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	4013      	ands	r3, r2
 80049fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	689a      	ldr	r2, [r3, #8]
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	fa02 f303 	lsl.w	r3, r2, r3
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f003 0303 	and.w	r3, r3, #3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d123      	bne.n	8004a68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	08da      	lsrs	r2, r3, #3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	3208      	adds	r2, #8
 8004a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	220f      	movs	r2, #15
 8004a38:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3c:	43db      	mvns	r3, r3
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	4013      	ands	r3, r2
 8004a42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	691a      	ldr	r2, [r3, #16]
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	f003 0307 	and.w	r3, r3, #7
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	08da      	lsrs	r2, r3, #3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	3208      	adds	r2, #8
 8004a62:	69b9      	ldr	r1, [r7, #24]
 8004a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	005b      	lsls	r3, r3, #1
 8004a72:	2203      	movs	r2, #3
 8004a74:	fa02 f303 	lsl.w	r3, r2, r3
 8004a78:	43db      	mvns	r3, r3
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f003 0203 	and.w	r2, r3, #3
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	005b      	lsls	r3, r3, #1
 8004a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 80ae 	beq.w	8004c06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004aaa:	2300      	movs	r3, #0
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	4b5d      	ldr	r3, [pc, #372]	; (8004c24 <HAL_GPIO_Init+0x300>)
 8004ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab2:	4a5c      	ldr	r2, [pc, #368]	; (8004c24 <HAL_GPIO_Init+0x300>)
 8004ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8004aba:	4b5a      	ldr	r3, [pc, #360]	; (8004c24 <HAL_GPIO_Init+0x300>)
 8004abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ac6:	4a58      	ldr	r2, [pc, #352]	; (8004c28 <HAL_GPIO_Init+0x304>)
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	089b      	lsrs	r3, r3, #2
 8004acc:	3302      	adds	r3, #2
 8004ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	f003 0303 	and.w	r3, r3, #3
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	220f      	movs	r2, #15
 8004ade:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae2:	43db      	mvns	r3, r3
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a4f      	ldr	r2, [pc, #316]	; (8004c2c <HAL_GPIO_Init+0x308>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d025      	beq.n	8004b3e <HAL_GPIO_Init+0x21a>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a4e      	ldr	r2, [pc, #312]	; (8004c30 <HAL_GPIO_Init+0x30c>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d01f      	beq.n	8004b3a <HAL_GPIO_Init+0x216>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a4d      	ldr	r2, [pc, #308]	; (8004c34 <HAL_GPIO_Init+0x310>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d019      	beq.n	8004b36 <HAL_GPIO_Init+0x212>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a4c      	ldr	r2, [pc, #304]	; (8004c38 <HAL_GPIO_Init+0x314>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d013      	beq.n	8004b32 <HAL_GPIO_Init+0x20e>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a4b      	ldr	r2, [pc, #300]	; (8004c3c <HAL_GPIO_Init+0x318>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d00d      	beq.n	8004b2e <HAL_GPIO_Init+0x20a>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a4a      	ldr	r2, [pc, #296]	; (8004c40 <HAL_GPIO_Init+0x31c>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d007      	beq.n	8004b2a <HAL_GPIO_Init+0x206>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a49      	ldr	r2, [pc, #292]	; (8004c44 <HAL_GPIO_Init+0x320>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d101      	bne.n	8004b26 <HAL_GPIO_Init+0x202>
 8004b22:	2306      	movs	r3, #6
 8004b24:	e00c      	b.n	8004b40 <HAL_GPIO_Init+0x21c>
 8004b26:	2307      	movs	r3, #7
 8004b28:	e00a      	b.n	8004b40 <HAL_GPIO_Init+0x21c>
 8004b2a:	2305      	movs	r3, #5
 8004b2c:	e008      	b.n	8004b40 <HAL_GPIO_Init+0x21c>
 8004b2e:	2304      	movs	r3, #4
 8004b30:	e006      	b.n	8004b40 <HAL_GPIO_Init+0x21c>
 8004b32:	2303      	movs	r3, #3
 8004b34:	e004      	b.n	8004b40 <HAL_GPIO_Init+0x21c>
 8004b36:	2302      	movs	r3, #2
 8004b38:	e002      	b.n	8004b40 <HAL_GPIO_Init+0x21c>
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e000      	b.n	8004b40 <HAL_GPIO_Init+0x21c>
 8004b3e:	2300      	movs	r3, #0
 8004b40:	69fa      	ldr	r2, [r7, #28]
 8004b42:	f002 0203 	and.w	r2, r2, #3
 8004b46:	0092      	lsls	r2, r2, #2
 8004b48:	4093      	lsls	r3, r2
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b50:	4935      	ldr	r1, [pc, #212]	; (8004c28 <HAL_GPIO_Init+0x304>)
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	089b      	lsrs	r3, r3, #2
 8004b56:	3302      	adds	r3, #2
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b5e:	4b3a      	ldr	r3, [pc, #232]	; (8004c48 <HAL_GPIO_Init+0x324>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	43db      	mvns	r3, r3
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004b7a:	69ba      	ldr	r2, [r7, #24]
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b82:	4a31      	ldr	r2, [pc, #196]	; (8004c48 <HAL_GPIO_Init+0x324>)
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004b88:	4b2f      	ldr	r3, [pc, #188]	; (8004c48 <HAL_GPIO_Init+0x324>)
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	43db      	mvns	r3, r3
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	4013      	ands	r3, r2
 8004b96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d003      	beq.n	8004bac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004bac:	4a26      	ldr	r2, [pc, #152]	; (8004c48 <HAL_GPIO_Init+0x324>)
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bb2:	4b25      	ldr	r3, [pc, #148]	; (8004c48 <HAL_GPIO_Init+0x324>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	43db      	mvns	r3, r3
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004bce:	69ba      	ldr	r2, [r7, #24]
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004bd6:	4a1c      	ldr	r2, [pc, #112]	; (8004c48 <HAL_GPIO_Init+0x324>)
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004bdc:	4b1a      	ldr	r3, [pc, #104]	; (8004c48 <HAL_GPIO_Init+0x324>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	43db      	mvns	r3, r3
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	4013      	ands	r3, r2
 8004bea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d003      	beq.n	8004c00 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c00:	4a11      	ldr	r2, [pc, #68]	; (8004c48 <HAL_GPIO_Init+0x324>)
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	61fb      	str	r3, [r7, #28]
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	2b0f      	cmp	r3, #15
 8004c10:	f67f ae96 	bls.w	8004940 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop
 8004c18:	3724      	adds	r7, #36	; 0x24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	40023800 	.word	0x40023800
 8004c28:	40013800 	.word	0x40013800
 8004c2c:	40020000 	.word	0x40020000
 8004c30:	40020400 	.word	0x40020400
 8004c34:	40020800 	.word	0x40020800
 8004c38:	40020c00 	.word	0x40020c00
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	40021400 	.word	0x40021400
 8004c44:	40021800 	.word	0x40021800
 8004c48:	40013c00 	.word	0x40013c00

08004c4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	460b      	mov	r3, r1
 8004c56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691a      	ldr	r2, [r3, #16]
 8004c5c:	887b      	ldrh	r3, [r7, #2]
 8004c5e:	4013      	ands	r3, r2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d002      	beq.n	8004c6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c64:	2301      	movs	r3, #1
 8004c66:	73fb      	strb	r3, [r7, #15]
 8004c68:	e001      	b.n	8004c6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3714      	adds	r7, #20
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	460b      	mov	r3, r1
 8004c86:	807b      	strh	r3, [r7, #2]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c8c:	787b      	ldrb	r3, [r7, #1]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c92:	887a      	ldrh	r2, [r7, #2]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c98:	e003      	b.n	8004ca2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c9a:	887b      	ldrh	r3, [r7, #2]
 8004c9c:	041a      	lsls	r2, r3, #16
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	619a      	str	r2, [r3, #24]
}
 8004ca2:	bf00      	nop
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b085      	sub	sp, #20
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004cc0:	887a      	ldrh	r2, [r7, #2]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	041a      	lsls	r2, r3, #16
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	43d9      	mvns	r1, r3
 8004ccc:	887b      	ldrh	r3, [r7, #2]
 8004cce:	400b      	ands	r3, r1
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	619a      	str	r2, [r3, #24]
}
 8004cd6:	bf00      	nop
 8004cd8:	3714      	adds	r7, #20
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
	...

08004ce4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e0cc      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cf8:	4b68      	ldr	r3, [pc, #416]	; (8004e9c <HAL_RCC_ClockConfig+0x1b8>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 030f 	and.w	r3, r3, #15
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d90c      	bls.n	8004d20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d06:	4b65      	ldr	r3, [pc, #404]	; (8004e9c <HAL_RCC_ClockConfig+0x1b8>)
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	b2d2      	uxtb	r2, r2
 8004d0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0e:	4b63      	ldr	r3, [pc, #396]	; (8004e9c <HAL_RCC_ClockConfig+0x1b8>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 030f 	and.w	r3, r3, #15
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d001      	beq.n	8004d20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e0b8      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d020      	beq.n	8004d6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d005      	beq.n	8004d44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d38:	4b59      	ldr	r3, [pc, #356]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	4a58      	ldr	r2, [pc, #352]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0308 	and.w	r3, r3, #8
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d005      	beq.n	8004d5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d50:	4b53      	ldr	r3, [pc, #332]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	4a52      	ldr	r2, [pc, #328]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d5c:	4b50      	ldr	r3, [pc, #320]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	494d      	ldr	r1, [pc, #308]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d044      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d107      	bne.n	8004d92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d82:	4b47      	ldr	r3, [pc, #284]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d119      	bne.n	8004dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e07f      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d003      	beq.n	8004da2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d9e:	2b03      	cmp	r3, #3
 8004da0:	d107      	bne.n	8004db2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004da2:	4b3f      	ldr	r3, [pc, #252]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d109      	bne.n	8004dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e06f      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004db2:	4b3b      	ldr	r3, [pc, #236]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e067      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dc2:	4b37      	ldr	r3, [pc, #220]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f023 0203 	bic.w	r2, r3, #3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	4934      	ldr	r1, [pc, #208]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dd4:	f7fd fd26 	bl	8002824 <HAL_GetTick>
 8004dd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dda:	e00a      	b.n	8004df2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ddc:	f7fd fd22 	bl	8002824 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e04f      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004df2:	4b2b      	ldr	r3, [pc, #172]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 020c 	and.w	r2, r3, #12
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d1eb      	bne.n	8004ddc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e04:	4b25      	ldr	r3, [pc, #148]	; (8004e9c <HAL_RCC_ClockConfig+0x1b8>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 030f 	and.w	r3, r3, #15
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d20c      	bcs.n	8004e2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e12:	4b22      	ldr	r3, [pc, #136]	; (8004e9c <HAL_RCC_ClockConfig+0x1b8>)
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	b2d2      	uxtb	r2, r2
 8004e18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e1a:	4b20      	ldr	r3, [pc, #128]	; (8004e9c <HAL_RCC_ClockConfig+0x1b8>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 030f 	and.w	r3, r3, #15
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d001      	beq.n	8004e2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e032      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0304 	and.w	r3, r3, #4
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d008      	beq.n	8004e4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e38:	4b19      	ldr	r3, [pc, #100]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	4916      	ldr	r1, [pc, #88]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0308 	and.w	r3, r3, #8
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d009      	beq.n	8004e6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e56:	4b12      	ldr	r3, [pc, #72]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	490e      	ldr	r1, [pc, #56]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e6a:	f000 f855 	bl	8004f18 <HAL_RCC_GetSysClockFreq>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	4b0b      	ldr	r3, [pc, #44]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	091b      	lsrs	r3, r3, #4
 8004e76:	f003 030f 	and.w	r3, r3, #15
 8004e7a:	490a      	ldr	r1, [pc, #40]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8004e7c:	5ccb      	ldrb	r3, [r1, r3]
 8004e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e82:	4a09      	ldr	r2, [pc, #36]	; (8004ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e86:	4b09      	ldr	r3, [pc, #36]	; (8004eac <HAL_RCC_ClockConfig+0x1c8>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fd fc86 	bl	800279c <HAL_InitTick>

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	40023c00 	.word	0x40023c00
 8004ea0:	40023800 	.word	0x40023800
 8004ea4:	080079bc 	.word	0x080079bc
 8004ea8:	20000058 	.word	0x20000058
 8004eac:	2000005c 	.word	0x2000005c

08004eb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004eb4:	4b03      	ldr	r3, [pc, #12]	; (8004ec4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	20000058 	.word	0x20000058

08004ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ecc:	f7ff fff0 	bl	8004eb0 <HAL_RCC_GetHCLKFreq>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	4b05      	ldr	r3, [pc, #20]	; (8004ee8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	0a9b      	lsrs	r3, r3, #10
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	4903      	ldr	r1, [pc, #12]	; (8004eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ede:	5ccb      	ldrb	r3, [r1, r3]
 8004ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	40023800 	.word	0x40023800
 8004eec:	080079cc 	.word	0x080079cc

08004ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ef4:	f7ff ffdc 	bl	8004eb0 <HAL_RCC_GetHCLKFreq>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	4b05      	ldr	r3, [pc, #20]	; (8004f10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	0b5b      	lsrs	r3, r3, #13
 8004f00:	f003 0307 	and.w	r3, r3, #7
 8004f04:	4903      	ldr	r1, [pc, #12]	; (8004f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f06:	5ccb      	ldrb	r3, [r1, r3]
 8004f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	40023800 	.word	0x40023800
 8004f14:	080079cc 	.word	0x080079cc

08004f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f1c:	b088      	sub	sp, #32
 8004f1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8004f24:	2300      	movs	r3, #0
 8004f26:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f34:	4bce      	ldr	r3, [pc, #824]	; (8005270 <HAL_RCC_GetSysClockFreq+0x358>)
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f003 030c 	and.w	r3, r3, #12
 8004f3c:	2b0c      	cmp	r3, #12
 8004f3e:	f200 818d 	bhi.w	800525c <HAL_RCC_GetSysClockFreq+0x344>
 8004f42:	a201      	add	r2, pc, #4	; (adr r2, 8004f48 <HAL_RCC_GetSysClockFreq+0x30>)
 8004f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f48:	08004f7d 	.word	0x08004f7d
 8004f4c:	0800525d 	.word	0x0800525d
 8004f50:	0800525d 	.word	0x0800525d
 8004f54:	0800525d 	.word	0x0800525d
 8004f58:	08004f83 	.word	0x08004f83
 8004f5c:	0800525d 	.word	0x0800525d
 8004f60:	0800525d 	.word	0x0800525d
 8004f64:	0800525d 	.word	0x0800525d
 8004f68:	08004f89 	.word	0x08004f89
 8004f6c:	0800525d 	.word	0x0800525d
 8004f70:	0800525d 	.word	0x0800525d
 8004f74:	0800525d 	.word	0x0800525d
 8004f78:	080050fd 	.word	0x080050fd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f7c:	4bbd      	ldr	r3, [pc, #756]	; (8005274 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004f7e:	61bb      	str	r3, [r7, #24]
       break;
 8004f80:	e16f      	b.n	8005262 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f82:	4bbd      	ldr	r3, [pc, #756]	; (8005278 <HAL_RCC_GetSysClockFreq+0x360>)
 8004f84:	61bb      	str	r3, [r7, #24]
      break;
 8004f86:	e16c      	b.n	8005262 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f88:	4bb9      	ldr	r3, [pc, #740]	; (8005270 <HAL_RCC_GetSysClockFreq+0x358>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f90:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f92:	4bb7      	ldr	r3, [pc, #732]	; (8005270 <HAL_RCC_GetSysClockFreq+0x358>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d053      	beq.n	8005046 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f9e:	4bb4      	ldr	r3, [pc, #720]	; (8005270 <HAL_RCC_GetSysClockFreq+0x358>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	099b      	lsrs	r3, r3, #6
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	f04f 0300 	mov.w	r3, #0
 8004faa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004fae:	f04f 0100 	mov.w	r1, #0
 8004fb2:	ea02 0400 	and.w	r4, r2, r0
 8004fb6:	603c      	str	r4, [r7, #0]
 8004fb8:	400b      	ands	r3, r1
 8004fba:	607b      	str	r3, [r7, #4]
 8004fbc:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	4629      	mov	r1, r5
 8004fc4:	f04f 0200 	mov.w	r2, #0
 8004fc8:	f04f 0300 	mov.w	r3, #0
 8004fcc:	014b      	lsls	r3, r1, #5
 8004fce:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004fd2:	0142      	lsls	r2, r0, #5
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	4623      	mov	r3, r4
 8004fda:	1ac0      	subs	r0, r0, r3
 8004fdc:	462b      	mov	r3, r5
 8004fde:	eb61 0103 	sbc.w	r1, r1, r3
 8004fe2:	f04f 0200 	mov.w	r2, #0
 8004fe6:	f04f 0300 	mov.w	r3, #0
 8004fea:	018b      	lsls	r3, r1, #6
 8004fec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ff0:	0182      	lsls	r2, r0, #6
 8004ff2:	1a12      	subs	r2, r2, r0
 8004ff4:	eb63 0301 	sbc.w	r3, r3, r1
 8004ff8:	f04f 0000 	mov.w	r0, #0
 8004ffc:	f04f 0100 	mov.w	r1, #0
 8005000:	00d9      	lsls	r1, r3, #3
 8005002:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005006:	00d0      	lsls	r0, r2, #3
 8005008:	4602      	mov	r2, r0
 800500a:	460b      	mov	r3, r1
 800500c:	4621      	mov	r1, r4
 800500e:	1852      	adds	r2, r2, r1
 8005010:	4629      	mov	r1, r5
 8005012:	eb43 0101 	adc.w	r1, r3, r1
 8005016:	460b      	mov	r3, r1
 8005018:	f04f 0000 	mov.w	r0, #0
 800501c:	f04f 0100 	mov.w	r1, #0
 8005020:	0259      	lsls	r1, r3, #9
 8005022:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005026:	0250      	lsls	r0, r2, #9
 8005028:	4602      	mov	r2, r0
 800502a:	460b      	mov	r3, r1
 800502c:	4610      	mov	r0, r2
 800502e:	4619      	mov	r1, r3
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	461a      	mov	r2, r3
 8005034:	f04f 0300 	mov.w	r3, #0
 8005038:	f7fb fd68 	bl	8000b0c <__aeabi_uldivmod>
 800503c:	4602      	mov	r2, r0
 800503e:	460b      	mov	r3, r1
 8005040:	4613      	mov	r3, r2
 8005042:	61fb      	str	r3, [r7, #28]
 8005044:	e04c      	b.n	80050e0 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005046:	4b8a      	ldr	r3, [pc, #552]	; (8005270 <HAL_RCC_GetSysClockFreq+0x358>)
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	099b      	lsrs	r3, r3, #6
 800504c:	461a      	mov	r2, r3
 800504e:	f04f 0300 	mov.w	r3, #0
 8005052:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005056:	f04f 0100 	mov.w	r1, #0
 800505a:	ea02 0a00 	and.w	sl, r2, r0
 800505e:	ea03 0b01 	and.w	fp, r3, r1
 8005062:	4650      	mov	r0, sl
 8005064:	4659      	mov	r1, fp
 8005066:	f04f 0200 	mov.w	r2, #0
 800506a:	f04f 0300 	mov.w	r3, #0
 800506e:	014b      	lsls	r3, r1, #5
 8005070:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005074:	0142      	lsls	r2, r0, #5
 8005076:	4610      	mov	r0, r2
 8005078:	4619      	mov	r1, r3
 800507a:	ebb0 000a 	subs.w	r0, r0, sl
 800507e:	eb61 010b 	sbc.w	r1, r1, fp
 8005082:	f04f 0200 	mov.w	r2, #0
 8005086:	f04f 0300 	mov.w	r3, #0
 800508a:	018b      	lsls	r3, r1, #6
 800508c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005090:	0182      	lsls	r2, r0, #6
 8005092:	1a12      	subs	r2, r2, r0
 8005094:	eb63 0301 	sbc.w	r3, r3, r1
 8005098:	f04f 0000 	mov.w	r0, #0
 800509c:	f04f 0100 	mov.w	r1, #0
 80050a0:	00d9      	lsls	r1, r3, #3
 80050a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050a6:	00d0      	lsls	r0, r2, #3
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	eb12 020a 	adds.w	r2, r2, sl
 80050b0:	eb43 030b 	adc.w	r3, r3, fp
 80050b4:	f04f 0000 	mov.w	r0, #0
 80050b8:	f04f 0100 	mov.w	r1, #0
 80050bc:	0299      	lsls	r1, r3, #10
 80050be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80050c2:	0290      	lsls	r0, r2, #10
 80050c4:	4602      	mov	r2, r0
 80050c6:	460b      	mov	r3, r1
 80050c8:	4610      	mov	r0, r2
 80050ca:	4619      	mov	r1, r3
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	461a      	mov	r2, r3
 80050d0:	f04f 0300 	mov.w	r3, #0
 80050d4:	f7fb fd1a 	bl	8000b0c <__aeabi_uldivmod>
 80050d8:	4602      	mov	r2, r0
 80050da:	460b      	mov	r3, r1
 80050dc:	4613      	mov	r3, r2
 80050de:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050e0:	4b63      	ldr	r3, [pc, #396]	; (8005270 <HAL_RCC_GetSysClockFreq+0x358>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	0c1b      	lsrs	r3, r3, #16
 80050e6:	f003 0303 	and.w	r3, r3, #3
 80050ea:	3301      	adds	r3, #1
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80050f0:	69fa      	ldr	r2, [r7, #28]
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f8:	61bb      	str	r3, [r7, #24]
      break;
 80050fa:	e0b2      	b.n	8005262 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050fc:	4b5c      	ldr	r3, [pc, #368]	; (8005270 <HAL_RCC_GetSysClockFreq+0x358>)
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005104:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005106:	4b5a      	ldr	r3, [pc, #360]	; (8005270 <HAL_RCC_GetSysClockFreq+0x358>)
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d04d      	beq.n	80051ae <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005112:	4b57      	ldr	r3, [pc, #348]	; (8005270 <HAL_RCC_GetSysClockFreq+0x358>)
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	099b      	lsrs	r3, r3, #6
 8005118:	461a      	mov	r2, r3
 800511a:	f04f 0300 	mov.w	r3, #0
 800511e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005122:	f04f 0100 	mov.w	r1, #0
 8005126:	ea02 0800 	and.w	r8, r2, r0
 800512a:	ea03 0901 	and.w	r9, r3, r1
 800512e:	4640      	mov	r0, r8
 8005130:	4649      	mov	r1, r9
 8005132:	f04f 0200 	mov.w	r2, #0
 8005136:	f04f 0300 	mov.w	r3, #0
 800513a:	014b      	lsls	r3, r1, #5
 800513c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005140:	0142      	lsls	r2, r0, #5
 8005142:	4610      	mov	r0, r2
 8005144:	4619      	mov	r1, r3
 8005146:	ebb0 0008 	subs.w	r0, r0, r8
 800514a:	eb61 0109 	sbc.w	r1, r1, r9
 800514e:	f04f 0200 	mov.w	r2, #0
 8005152:	f04f 0300 	mov.w	r3, #0
 8005156:	018b      	lsls	r3, r1, #6
 8005158:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800515c:	0182      	lsls	r2, r0, #6
 800515e:	1a12      	subs	r2, r2, r0
 8005160:	eb63 0301 	sbc.w	r3, r3, r1
 8005164:	f04f 0000 	mov.w	r0, #0
 8005168:	f04f 0100 	mov.w	r1, #0
 800516c:	00d9      	lsls	r1, r3, #3
 800516e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005172:	00d0      	lsls	r0, r2, #3
 8005174:	4602      	mov	r2, r0
 8005176:	460b      	mov	r3, r1
 8005178:	eb12 0208 	adds.w	r2, r2, r8
 800517c:	eb43 0309 	adc.w	r3, r3, r9
 8005180:	f04f 0000 	mov.w	r0, #0
 8005184:	f04f 0100 	mov.w	r1, #0
 8005188:	0259      	lsls	r1, r3, #9
 800518a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800518e:	0250      	lsls	r0, r2, #9
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	4610      	mov	r0, r2
 8005196:	4619      	mov	r1, r3
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	461a      	mov	r2, r3
 800519c:	f04f 0300 	mov.w	r3, #0
 80051a0:	f7fb fcb4 	bl	8000b0c <__aeabi_uldivmod>
 80051a4:	4602      	mov	r2, r0
 80051a6:	460b      	mov	r3, r1
 80051a8:	4613      	mov	r3, r2
 80051aa:	61fb      	str	r3, [r7, #28]
 80051ac:	e04a      	b.n	8005244 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051ae:	4b30      	ldr	r3, [pc, #192]	; (8005270 <HAL_RCC_GetSysClockFreq+0x358>)
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	099b      	lsrs	r3, r3, #6
 80051b4:	461a      	mov	r2, r3
 80051b6:	f04f 0300 	mov.w	r3, #0
 80051ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80051be:	f04f 0100 	mov.w	r1, #0
 80051c2:	ea02 0400 	and.w	r4, r2, r0
 80051c6:	ea03 0501 	and.w	r5, r3, r1
 80051ca:	4620      	mov	r0, r4
 80051cc:	4629      	mov	r1, r5
 80051ce:	f04f 0200 	mov.w	r2, #0
 80051d2:	f04f 0300 	mov.w	r3, #0
 80051d6:	014b      	lsls	r3, r1, #5
 80051d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80051dc:	0142      	lsls	r2, r0, #5
 80051de:	4610      	mov	r0, r2
 80051e0:	4619      	mov	r1, r3
 80051e2:	1b00      	subs	r0, r0, r4
 80051e4:	eb61 0105 	sbc.w	r1, r1, r5
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	f04f 0300 	mov.w	r3, #0
 80051f0:	018b      	lsls	r3, r1, #6
 80051f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80051f6:	0182      	lsls	r2, r0, #6
 80051f8:	1a12      	subs	r2, r2, r0
 80051fa:	eb63 0301 	sbc.w	r3, r3, r1
 80051fe:	f04f 0000 	mov.w	r0, #0
 8005202:	f04f 0100 	mov.w	r1, #0
 8005206:	00d9      	lsls	r1, r3, #3
 8005208:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800520c:	00d0      	lsls	r0, r2, #3
 800520e:	4602      	mov	r2, r0
 8005210:	460b      	mov	r3, r1
 8005212:	1912      	adds	r2, r2, r4
 8005214:	eb45 0303 	adc.w	r3, r5, r3
 8005218:	f04f 0000 	mov.w	r0, #0
 800521c:	f04f 0100 	mov.w	r1, #0
 8005220:	0299      	lsls	r1, r3, #10
 8005222:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005226:	0290      	lsls	r0, r2, #10
 8005228:	4602      	mov	r2, r0
 800522a:	460b      	mov	r3, r1
 800522c:	4610      	mov	r0, r2
 800522e:	4619      	mov	r1, r3
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	461a      	mov	r2, r3
 8005234:	f04f 0300 	mov.w	r3, #0
 8005238:	f7fb fc68 	bl	8000b0c <__aeabi_uldivmod>
 800523c:	4602      	mov	r2, r0
 800523e:	460b      	mov	r3, r1
 8005240:	4613      	mov	r3, r2
 8005242:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005244:	4b0a      	ldr	r3, [pc, #40]	; (8005270 <HAL_RCC_GetSysClockFreq+0x358>)
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	0f1b      	lsrs	r3, r3, #28
 800524a:	f003 0307 	and.w	r3, r3, #7
 800524e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8005250:	69fa      	ldr	r2, [r7, #28]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	fbb2 f3f3 	udiv	r3, r2, r3
 8005258:	61bb      	str	r3, [r7, #24]
      break;
 800525a:	e002      	b.n	8005262 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800525c:	4b05      	ldr	r3, [pc, #20]	; (8005274 <HAL_RCC_GetSysClockFreq+0x35c>)
 800525e:	61bb      	str	r3, [r7, #24]
      break;
 8005260:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005262:	69bb      	ldr	r3, [r7, #24]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3720      	adds	r7, #32
 8005268:	46bd      	mov	sp, r7
 800526a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800526e:	bf00      	nop
 8005270:	40023800 	.word	0x40023800
 8005274:	00f42400 	.word	0x00f42400
 8005278:	007a1200 	.word	0x007a1200

0800527c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e28d      	b.n	80057aa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b00      	cmp	r3, #0
 8005298:	f000 8083 	beq.w	80053a2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800529c:	4b94      	ldr	r3, [pc, #592]	; (80054f0 <HAL_RCC_OscConfig+0x274>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f003 030c 	and.w	r3, r3, #12
 80052a4:	2b04      	cmp	r3, #4
 80052a6:	d019      	beq.n	80052dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80052a8:	4b91      	ldr	r3, [pc, #580]	; (80054f0 <HAL_RCC_OscConfig+0x274>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80052b0:	2b08      	cmp	r3, #8
 80052b2:	d106      	bne.n	80052c2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80052b4:	4b8e      	ldr	r3, [pc, #568]	; (80054f0 <HAL_RCC_OscConfig+0x274>)
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052c0:	d00c      	beq.n	80052dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052c2:	4b8b      	ldr	r3, [pc, #556]	; (80054f0 <HAL_RCC_OscConfig+0x274>)
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80052ca:	2b0c      	cmp	r3, #12
 80052cc:	d112      	bne.n	80052f4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052ce:	4b88      	ldr	r3, [pc, #544]	; (80054f0 <HAL_RCC_OscConfig+0x274>)
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052da:	d10b      	bne.n	80052f4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052dc:	4b84      	ldr	r3, [pc, #528]	; (80054f0 <HAL_RCC_OscConfig+0x274>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d05b      	beq.n	80053a0 <HAL_RCC_OscConfig+0x124>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d157      	bne.n	80053a0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e25a      	b.n	80057aa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052fc:	d106      	bne.n	800530c <HAL_RCC_OscConfig+0x90>
 80052fe:	4b7c      	ldr	r3, [pc, #496]	; (80054f0 <HAL_RCC_OscConfig+0x274>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a7b      	ldr	r2, [pc, #492]	; (80054f0 <HAL_RCC_OscConfig+0x274>)
 8005304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005308:	6013      	str	r3, [r2, #0]
 800530a:	e01d      	b.n	8005348 <HAL_RCC_OscConfig+0xcc>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005314:	d10c      	bne.n	8005330 <HAL_RCC_OscConfig+0xb4>
 8005316:	4b76      	ldr	r3, [pc, #472]	; (80054f0 <HAL_RCC_OscConfig+0x274>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a75      	ldr	r2, [pc, #468]	; (80054f0 <HAL_RCC_OscConfig+0x274>)
 800531c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005320:	6013      	str	r3, [r2, #0]
 8005322:	4b73      	ldr	r3, [pc, #460]	; (80054f0 <HAL_RCC_OscConfig+0x274>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a72      	ldr	r2, [pc, #456]	; (80054f0 <HAL_RCC_OscConfig+0x274>)
 8005328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800532c:	6013      	str	r3, [r2, #0]
 800532e:	e00b      	b.n	8005348 <HAL_RCC_OscConfig+0xcc>
 8005330:	4b6f      	ldr	r3, [pc, #444]	; (80054f0 <HAL_RCC_OscConfig+0x274>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a6e      	ldr	r2, [pc, #440]	; (80054f0 <HAL_RCC_OscConfig+0x274>)
 8005336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800533a:	6013      	str	r3, [r2, #0]
 800533c:	4b6c      	ldr	r3, [pc, #432]	; (80054f0 <HAL_RCC_OscConfig+0x274>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a6b      	ldr	r2, [pc, #428]	; (80054f0 <HAL_RCC_OscConfig+0x274>)
 8005342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d013      	beq.n	8005378 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005350:	f7fd fa68 	bl	8002824 <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005356:	e008      	b.n	800536a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005358:	f7fd fa64 	bl	8002824 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b64      	cmp	r3, #100	; 0x64
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e21f      	b.n	80057aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800536a:	4b61      	ldr	r3, [pc, #388]	; (80054f0 <HAL_RCC_OscConfig+0x274>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d0f0      	beq.n	8005358 <HAL_RCC_OscConfig+0xdc>
 8005376:	e014      	b.n	80053a2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005378:	f7fd fa54 	bl	8002824 <HAL_GetTick>
 800537c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800537e:	e008      	b.n	8005392 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005380:	f7fd fa50 	bl	8002824 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b64      	cmp	r3, #100	; 0x64
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e20b      	b.n	80057aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005392:	4b57      	ldr	r3, [pc, #348]	; (80054f0 <HAL_RCC_OscConfig+0x274>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1f0      	bne.n	8005380 <HAL_RCC_OscConfig+0x104>
 800539e:	e000      	b.n	80053a2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d06f      	beq.n	800548e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80053ae:	4b50      	ldr	r3, [pc, #320]	; (80054f0 <HAL_RCC_OscConfig+0x274>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f003 030c 	and.w	r3, r3, #12
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d017      	beq.n	80053ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80053ba:	4b4d      	ldr	r3, [pc, #308]	; (80054f0 <HAL_RCC_OscConfig+0x274>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80053c2:	2b08      	cmp	r3, #8
 80053c4:	d105      	bne.n	80053d2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80053c6:	4b4a      	ldr	r3, [pc, #296]	; (80054f0 <HAL_RCC_OscConfig+0x274>)
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00b      	beq.n	80053ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053d2:	4b47      	ldr	r3, [pc, #284]	; (80054f0 <HAL_RCC_OscConfig+0x274>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80053da:	2b0c      	cmp	r3, #12
 80053dc:	d11c      	bne.n	8005418 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053de:	4b44      	ldr	r3, [pc, #272]	; (80054f0 <HAL_RCC_OscConfig+0x274>)
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d116      	bne.n	8005418 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053ea:	4b41      	ldr	r3, [pc, #260]	; (80054f0 <HAL_RCC_OscConfig+0x274>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d005      	beq.n	8005402 <HAL_RCC_OscConfig+0x186>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d001      	beq.n	8005402 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e1d3      	b.n	80057aa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005402:	4b3b      	ldr	r3, [pc, #236]	; (80054f0 <HAL_RCC_OscConfig+0x274>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	00db      	lsls	r3, r3, #3
 8005410:	4937      	ldr	r1, [pc, #220]	; (80054f0 <HAL_RCC_OscConfig+0x274>)
 8005412:	4313      	orrs	r3, r2
 8005414:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005416:	e03a      	b.n	800548e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d020      	beq.n	8005462 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005420:	4b34      	ldr	r3, [pc, #208]	; (80054f4 <HAL_RCC_OscConfig+0x278>)
 8005422:	2201      	movs	r2, #1
 8005424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005426:	f7fd f9fd 	bl	8002824 <HAL_GetTick>
 800542a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800542c:	e008      	b.n	8005440 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800542e:	f7fd f9f9 	bl	8002824 <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	2b02      	cmp	r3, #2
 800543a:	d901      	bls.n	8005440 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e1b4      	b.n	80057aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005440:	4b2b      	ldr	r3, [pc, #172]	; (80054f0 <HAL_RCC_OscConfig+0x274>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0302 	and.w	r3, r3, #2
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0f0      	beq.n	800542e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800544c:	4b28      	ldr	r3, [pc, #160]	; (80054f0 <HAL_RCC_OscConfig+0x274>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	00db      	lsls	r3, r3, #3
 800545a:	4925      	ldr	r1, [pc, #148]	; (80054f0 <HAL_RCC_OscConfig+0x274>)
 800545c:	4313      	orrs	r3, r2
 800545e:	600b      	str	r3, [r1, #0]
 8005460:	e015      	b.n	800548e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005462:	4b24      	ldr	r3, [pc, #144]	; (80054f4 <HAL_RCC_OscConfig+0x278>)
 8005464:	2200      	movs	r2, #0
 8005466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005468:	f7fd f9dc 	bl	8002824 <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800546e:	e008      	b.n	8005482 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005470:	f7fd f9d8 	bl	8002824 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b02      	cmp	r3, #2
 800547c:	d901      	bls.n	8005482 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e193      	b.n	80057aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005482:	4b1b      	ldr	r3, [pc, #108]	; (80054f0 <HAL_RCC_OscConfig+0x274>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1f0      	bne.n	8005470 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0308 	and.w	r3, r3, #8
 8005496:	2b00      	cmp	r3, #0
 8005498:	d036      	beq.n	8005508 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d016      	beq.n	80054d0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054a2:	4b15      	ldr	r3, [pc, #84]	; (80054f8 <HAL_RCC_OscConfig+0x27c>)
 80054a4:	2201      	movs	r2, #1
 80054a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054a8:	f7fd f9bc 	bl	8002824 <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054b0:	f7fd f9b8 	bl	8002824 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e173      	b.n	80057aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054c2:	4b0b      	ldr	r3, [pc, #44]	; (80054f0 <HAL_RCC_OscConfig+0x274>)
 80054c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d0f0      	beq.n	80054b0 <HAL_RCC_OscConfig+0x234>
 80054ce:	e01b      	b.n	8005508 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054d0:	4b09      	ldr	r3, [pc, #36]	; (80054f8 <HAL_RCC_OscConfig+0x27c>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054d6:	f7fd f9a5 	bl	8002824 <HAL_GetTick>
 80054da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054dc:	e00e      	b.n	80054fc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054de:	f7fd f9a1 	bl	8002824 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d907      	bls.n	80054fc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e15c      	b.n	80057aa <HAL_RCC_OscConfig+0x52e>
 80054f0:	40023800 	.word	0x40023800
 80054f4:	42470000 	.word	0x42470000
 80054f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054fc:	4b8a      	ldr	r3, [pc, #552]	; (8005728 <HAL_RCC_OscConfig+0x4ac>)
 80054fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1ea      	bne.n	80054de <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0304 	and.w	r3, r3, #4
 8005510:	2b00      	cmp	r3, #0
 8005512:	f000 8097 	beq.w	8005644 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005516:	2300      	movs	r3, #0
 8005518:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800551a:	4b83      	ldr	r3, [pc, #524]	; (8005728 <HAL_RCC_OscConfig+0x4ac>)
 800551c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10f      	bne.n	8005546 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005526:	2300      	movs	r3, #0
 8005528:	60bb      	str	r3, [r7, #8]
 800552a:	4b7f      	ldr	r3, [pc, #508]	; (8005728 <HAL_RCC_OscConfig+0x4ac>)
 800552c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552e:	4a7e      	ldr	r2, [pc, #504]	; (8005728 <HAL_RCC_OscConfig+0x4ac>)
 8005530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005534:	6413      	str	r3, [r2, #64]	; 0x40
 8005536:	4b7c      	ldr	r3, [pc, #496]	; (8005728 <HAL_RCC_OscConfig+0x4ac>)
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800553e:	60bb      	str	r3, [r7, #8]
 8005540:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005542:	2301      	movs	r3, #1
 8005544:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005546:	4b79      	ldr	r3, [pc, #484]	; (800572c <HAL_RCC_OscConfig+0x4b0>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800554e:	2b00      	cmp	r3, #0
 8005550:	d118      	bne.n	8005584 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005552:	4b76      	ldr	r3, [pc, #472]	; (800572c <HAL_RCC_OscConfig+0x4b0>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a75      	ldr	r2, [pc, #468]	; (800572c <HAL_RCC_OscConfig+0x4b0>)
 8005558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800555c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800555e:	f7fd f961 	bl	8002824 <HAL_GetTick>
 8005562:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005564:	e008      	b.n	8005578 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005566:	f7fd f95d 	bl	8002824 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	2b02      	cmp	r3, #2
 8005572:	d901      	bls.n	8005578 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e118      	b.n	80057aa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005578:	4b6c      	ldr	r3, [pc, #432]	; (800572c <HAL_RCC_OscConfig+0x4b0>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0f0      	beq.n	8005566 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d106      	bne.n	800559a <HAL_RCC_OscConfig+0x31e>
 800558c:	4b66      	ldr	r3, [pc, #408]	; (8005728 <HAL_RCC_OscConfig+0x4ac>)
 800558e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005590:	4a65      	ldr	r2, [pc, #404]	; (8005728 <HAL_RCC_OscConfig+0x4ac>)
 8005592:	f043 0301 	orr.w	r3, r3, #1
 8005596:	6713      	str	r3, [r2, #112]	; 0x70
 8005598:	e01c      	b.n	80055d4 <HAL_RCC_OscConfig+0x358>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	2b05      	cmp	r3, #5
 80055a0:	d10c      	bne.n	80055bc <HAL_RCC_OscConfig+0x340>
 80055a2:	4b61      	ldr	r3, [pc, #388]	; (8005728 <HAL_RCC_OscConfig+0x4ac>)
 80055a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a6:	4a60      	ldr	r2, [pc, #384]	; (8005728 <HAL_RCC_OscConfig+0x4ac>)
 80055a8:	f043 0304 	orr.w	r3, r3, #4
 80055ac:	6713      	str	r3, [r2, #112]	; 0x70
 80055ae:	4b5e      	ldr	r3, [pc, #376]	; (8005728 <HAL_RCC_OscConfig+0x4ac>)
 80055b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b2:	4a5d      	ldr	r2, [pc, #372]	; (8005728 <HAL_RCC_OscConfig+0x4ac>)
 80055b4:	f043 0301 	orr.w	r3, r3, #1
 80055b8:	6713      	str	r3, [r2, #112]	; 0x70
 80055ba:	e00b      	b.n	80055d4 <HAL_RCC_OscConfig+0x358>
 80055bc:	4b5a      	ldr	r3, [pc, #360]	; (8005728 <HAL_RCC_OscConfig+0x4ac>)
 80055be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c0:	4a59      	ldr	r2, [pc, #356]	; (8005728 <HAL_RCC_OscConfig+0x4ac>)
 80055c2:	f023 0301 	bic.w	r3, r3, #1
 80055c6:	6713      	str	r3, [r2, #112]	; 0x70
 80055c8:	4b57      	ldr	r3, [pc, #348]	; (8005728 <HAL_RCC_OscConfig+0x4ac>)
 80055ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055cc:	4a56      	ldr	r2, [pc, #344]	; (8005728 <HAL_RCC_OscConfig+0x4ac>)
 80055ce:	f023 0304 	bic.w	r3, r3, #4
 80055d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d015      	beq.n	8005608 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055dc:	f7fd f922 	bl	8002824 <HAL_GetTick>
 80055e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055e2:	e00a      	b.n	80055fa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055e4:	f7fd f91e 	bl	8002824 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d901      	bls.n	80055fa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e0d7      	b.n	80057aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055fa:	4b4b      	ldr	r3, [pc, #300]	; (8005728 <HAL_RCC_OscConfig+0x4ac>)
 80055fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d0ee      	beq.n	80055e4 <HAL_RCC_OscConfig+0x368>
 8005606:	e014      	b.n	8005632 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005608:	f7fd f90c 	bl	8002824 <HAL_GetTick>
 800560c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800560e:	e00a      	b.n	8005626 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005610:	f7fd f908 	bl	8002824 <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	f241 3288 	movw	r2, #5000	; 0x1388
 800561e:	4293      	cmp	r3, r2
 8005620:	d901      	bls.n	8005626 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e0c1      	b.n	80057aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005626:	4b40      	ldr	r3, [pc, #256]	; (8005728 <HAL_RCC_OscConfig+0x4ac>)
 8005628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1ee      	bne.n	8005610 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005632:	7dfb      	ldrb	r3, [r7, #23]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d105      	bne.n	8005644 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005638:	4b3b      	ldr	r3, [pc, #236]	; (8005728 <HAL_RCC_OscConfig+0x4ac>)
 800563a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563c:	4a3a      	ldr	r2, [pc, #232]	; (8005728 <HAL_RCC_OscConfig+0x4ac>)
 800563e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005642:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	2b00      	cmp	r3, #0
 800564a:	f000 80ad 	beq.w	80057a8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800564e:	4b36      	ldr	r3, [pc, #216]	; (8005728 <HAL_RCC_OscConfig+0x4ac>)
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f003 030c 	and.w	r3, r3, #12
 8005656:	2b08      	cmp	r3, #8
 8005658:	d060      	beq.n	800571c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	2b02      	cmp	r3, #2
 8005660:	d145      	bne.n	80056ee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005662:	4b33      	ldr	r3, [pc, #204]	; (8005730 <HAL_RCC_OscConfig+0x4b4>)
 8005664:	2200      	movs	r2, #0
 8005666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005668:	f7fd f8dc 	bl	8002824 <HAL_GetTick>
 800566c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800566e:	e008      	b.n	8005682 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005670:	f7fd f8d8 	bl	8002824 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b02      	cmp	r3, #2
 800567c:	d901      	bls.n	8005682 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e093      	b.n	80057aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005682:	4b29      	ldr	r3, [pc, #164]	; (8005728 <HAL_RCC_OscConfig+0x4ac>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1f0      	bne.n	8005670 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	69da      	ldr	r2, [r3, #28]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	431a      	orrs	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569c:	019b      	lsls	r3, r3, #6
 800569e:	431a      	orrs	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a4:	085b      	lsrs	r3, r3, #1
 80056a6:	3b01      	subs	r3, #1
 80056a8:	041b      	lsls	r3, r3, #16
 80056aa:	431a      	orrs	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b0:	061b      	lsls	r3, r3, #24
 80056b2:	431a      	orrs	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b8:	071b      	lsls	r3, r3, #28
 80056ba:	491b      	ldr	r1, [pc, #108]	; (8005728 <HAL_RCC_OscConfig+0x4ac>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056c0:	4b1b      	ldr	r3, [pc, #108]	; (8005730 <HAL_RCC_OscConfig+0x4b4>)
 80056c2:	2201      	movs	r2, #1
 80056c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c6:	f7fd f8ad 	bl	8002824 <HAL_GetTick>
 80056ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056cc:	e008      	b.n	80056e0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056ce:	f7fd f8a9 	bl	8002824 <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d901      	bls.n	80056e0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e064      	b.n	80057aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056e0:	4b11      	ldr	r3, [pc, #68]	; (8005728 <HAL_RCC_OscConfig+0x4ac>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d0f0      	beq.n	80056ce <HAL_RCC_OscConfig+0x452>
 80056ec:	e05c      	b.n	80057a8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056ee:	4b10      	ldr	r3, [pc, #64]	; (8005730 <HAL_RCC_OscConfig+0x4b4>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f4:	f7fd f896 	bl	8002824 <HAL_GetTick>
 80056f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056fa:	e008      	b.n	800570e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056fc:	f7fd f892 	bl	8002824 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b02      	cmp	r3, #2
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e04d      	b.n	80057aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800570e:	4b06      	ldr	r3, [pc, #24]	; (8005728 <HAL_RCC_OscConfig+0x4ac>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1f0      	bne.n	80056fc <HAL_RCC_OscConfig+0x480>
 800571a:	e045      	b.n	80057a8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	2b01      	cmp	r3, #1
 8005722:	d107      	bne.n	8005734 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e040      	b.n	80057aa <HAL_RCC_OscConfig+0x52e>
 8005728:	40023800 	.word	0x40023800
 800572c:	40007000 	.word	0x40007000
 8005730:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005734:	4b1f      	ldr	r3, [pc, #124]	; (80057b4 <HAL_RCC_OscConfig+0x538>)
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d030      	beq.n	80057a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800574c:	429a      	cmp	r2, r3
 800574e:	d129      	bne.n	80057a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800575a:	429a      	cmp	r2, r3
 800575c:	d122      	bne.n	80057a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005764:	4013      	ands	r3, r2
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800576a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800576c:	4293      	cmp	r3, r2
 800576e:	d119      	bne.n	80057a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577a:	085b      	lsrs	r3, r3, #1
 800577c:	3b01      	subs	r3, #1
 800577e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005780:	429a      	cmp	r2, r3
 8005782:	d10f      	bne.n	80057a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005790:	429a      	cmp	r2, r3
 8005792:	d107      	bne.n	80057a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d001      	beq.n	80057a8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e000      	b.n	80057aa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3718      	adds	r7, #24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	40023800 	.word	0x40023800

080057b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e041      	b.n	800584e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d106      	bne.n	80057e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7fc fcb0 	bl	8002144 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3304      	adds	r3, #4
 80057f4:	4619      	mov	r1, r3
 80057f6:	4610      	mov	r0, r2
 80057f8:	f000 fd52 	bl	80062a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
	...

08005858 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b01      	cmp	r3, #1
 800586a:	d001      	beq.n	8005870 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e046      	b.n	80058fe <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2202      	movs	r2, #2
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a23      	ldr	r2, [pc, #140]	; (800590c <HAL_TIM_Base_Start+0xb4>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d022      	beq.n	80058c8 <HAL_TIM_Base_Start+0x70>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800588a:	d01d      	beq.n	80058c8 <HAL_TIM_Base_Start+0x70>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a1f      	ldr	r2, [pc, #124]	; (8005910 <HAL_TIM_Base_Start+0xb8>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d018      	beq.n	80058c8 <HAL_TIM_Base_Start+0x70>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a1e      	ldr	r2, [pc, #120]	; (8005914 <HAL_TIM_Base_Start+0xbc>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d013      	beq.n	80058c8 <HAL_TIM_Base_Start+0x70>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a1c      	ldr	r2, [pc, #112]	; (8005918 <HAL_TIM_Base_Start+0xc0>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d00e      	beq.n	80058c8 <HAL_TIM_Base_Start+0x70>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a1b      	ldr	r2, [pc, #108]	; (800591c <HAL_TIM_Base_Start+0xc4>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d009      	beq.n	80058c8 <HAL_TIM_Base_Start+0x70>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a19      	ldr	r2, [pc, #100]	; (8005920 <HAL_TIM_Base_Start+0xc8>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d004      	beq.n	80058c8 <HAL_TIM_Base_Start+0x70>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a18      	ldr	r2, [pc, #96]	; (8005924 <HAL_TIM_Base_Start+0xcc>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d111      	bne.n	80058ec <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f003 0307 	and.w	r3, r3, #7
 80058d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2b06      	cmp	r3, #6
 80058d8:	d010      	beq.n	80058fc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f042 0201 	orr.w	r2, r2, #1
 80058e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ea:	e007      	b.n	80058fc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0201 	orr.w	r2, r2, #1
 80058fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	40010000 	.word	0x40010000
 8005910:	40000400 	.word	0x40000400
 8005914:	40000800 	.word	0x40000800
 8005918:	40000c00 	.word	0x40000c00
 800591c:	40010400 	.word	0x40010400
 8005920:	40014000 	.word	0x40014000
 8005924:	40001800 	.word	0x40001800

08005928 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b01      	cmp	r3, #1
 800593a:	d001      	beq.n	8005940 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e04e      	b.n	80059de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f042 0201 	orr.w	r2, r2, #1
 8005956:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a23      	ldr	r2, [pc, #140]	; (80059ec <HAL_TIM_Base_Start_IT+0xc4>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d022      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x80>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800596a:	d01d      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x80>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a1f      	ldr	r2, [pc, #124]	; (80059f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d018      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x80>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a1e      	ldr	r2, [pc, #120]	; (80059f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d013      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x80>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a1c      	ldr	r2, [pc, #112]	; (80059f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d00e      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x80>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a1b      	ldr	r2, [pc, #108]	; (80059fc <HAL_TIM_Base_Start_IT+0xd4>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d009      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x80>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a19      	ldr	r2, [pc, #100]	; (8005a00 <HAL_TIM_Base_Start_IT+0xd8>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d004      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x80>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a18      	ldr	r2, [pc, #96]	; (8005a04 <HAL_TIM_Base_Start_IT+0xdc>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d111      	bne.n	80059cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f003 0307 	and.w	r3, r3, #7
 80059b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2b06      	cmp	r3, #6
 80059b8:	d010      	beq.n	80059dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f042 0201 	orr.w	r2, r2, #1
 80059c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ca:	e007      	b.n	80059dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f042 0201 	orr.w	r2, r2, #1
 80059da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	40010000 	.word	0x40010000
 80059f0:	40000400 	.word	0x40000400
 80059f4:	40000800 	.word	0x40000800
 80059f8:	40000c00 	.word	0x40000c00
 80059fc:	40010400 	.word	0x40010400
 8005a00:	40014000 	.word	0x40014000
 8005a04:	40001800 	.word	0x40001800

08005a08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e041      	b.n	8005a9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d106      	bne.n	8005a34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f839 	bl	8005aa6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2202      	movs	r2, #2
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3304      	adds	r3, #4
 8005a44:	4619      	mov	r1, r3
 8005a46:	4610      	mov	r0, r2
 8005a48:	f000 fc2a 	bl	80062a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b083      	sub	sp, #12
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005aae:	bf00      	nop
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
	...

08005abc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d109      	bne.n	8005ae0 <HAL_TIM_PWM_Start+0x24>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	bf14      	ite	ne
 8005ad8:	2301      	movne	r3, #1
 8005ada:	2300      	moveq	r3, #0
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	e022      	b.n	8005b26 <HAL_TIM_PWM_Start+0x6a>
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	2b04      	cmp	r3, #4
 8005ae4:	d109      	bne.n	8005afa <HAL_TIM_PWM_Start+0x3e>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	bf14      	ite	ne
 8005af2:	2301      	movne	r3, #1
 8005af4:	2300      	moveq	r3, #0
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	e015      	b.n	8005b26 <HAL_TIM_PWM_Start+0x6a>
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	2b08      	cmp	r3, #8
 8005afe:	d109      	bne.n	8005b14 <HAL_TIM_PWM_Start+0x58>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	bf14      	ite	ne
 8005b0c:	2301      	movne	r3, #1
 8005b0e:	2300      	moveq	r3, #0
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	e008      	b.n	8005b26 <HAL_TIM_PWM_Start+0x6a>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	bf14      	ite	ne
 8005b20:	2301      	movne	r3, #1
 8005b22:	2300      	moveq	r3, #0
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e07c      	b.n	8005c28 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d104      	bne.n	8005b3e <HAL_TIM_PWM_Start+0x82>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2202      	movs	r2, #2
 8005b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b3c:	e013      	b.n	8005b66 <HAL_TIM_PWM_Start+0xaa>
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2b04      	cmp	r3, #4
 8005b42:	d104      	bne.n	8005b4e <HAL_TIM_PWM_Start+0x92>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2202      	movs	r2, #2
 8005b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b4c:	e00b      	b.n	8005b66 <HAL_TIM_PWM_Start+0xaa>
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	2b08      	cmp	r3, #8
 8005b52:	d104      	bne.n	8005b5e <HAL_TIM_PWM_Start+0xa2>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b5c:	e003      	b.n	8005b66 <HAL_TIM_PWM_Start+0xaa>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2202      	movs	r2, #2
 8005b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	6839      	ldr	r1, [r7, #0]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 fe80 	bl	8006874 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a2d      	ldr	r2, [pc, #180]	; (8005c30 <HAL_TIM_PWM_Start+0x174>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d004      	beq.n	8005b88 <HAL_TIM_PWM_Start+0xcc>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a2c      	ldr	r2, [pc, #176]	; (8005c34 <HAL_TIM_PWM_Start+0x178>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d101      	bne.n	8005b8c <HAL_TIM_PWM_Start+0xd0>
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e000      	b.n	8005b8e <HAL_TIM_PWM_Start+0xd2>
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d007      	beq.n	8005ba2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ba0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a22      	ldr	r2, [pc, #136]	; (8005c30 <HAL_TIM_PWM_Start+0x174>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d022      	beq.n	8005bf2 <HAL_TIM_PWM_Start+0x136>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb4:	d01d      	beq.n	8005bf2 <HAL_TIM_PWM_Start+0x136>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a1f      	ldr	r2, [pc, #124]	; (8005c38 <HAL_TIM_PWM_Start+0x17c>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d018      	beq.n	8005bf2 <HAL_TIM_PWM_Start+0x136>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a1d      	ldr	r2, [pc, #116]	; (8005c3c <HAL_TIM_PWM_Start+0x180>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d013      	beq.n	8005bf2 <HAL_TIM_PWM_Start+0x136>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a1c      	ldr	r2, [pc, #112]	; (8005c40 <HAL_TIM_PWM_Start+0x184>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d00e      	beq.n	8005bf2 <HAL_TIM_PWM_Start+0x136>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a16      	ldr	r2, [pc, #88]	; (8005c34 <HAL_TIM_PWM_Start+0x178>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d009      	beq.n	8005bf2 <HAL_TIM_PWM_Start+0x136>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a18      	ldr	r2, [pc, #96]	; (8005c44 <HAL_TIM_PWM_Start+0x188>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d004      	beq.n	8005bf2 <HAL_TIM_PWM_Start+0x136>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a16      	ldr	r2, [pc, #88]	; (8005c48 <HAL_TIM_PWM_Start+0x18c>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d111      	bne.n	8005c16 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f003 0307 	and.w	r3, r3, #7
 8005bfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2b06      	cmp	r3, #6
 8005c02:	d010      	beq.n	8005c26 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 0201 	orr.w	r2, r2, #1
 8005c12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c14:	e007      	b.n	8005c26 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f042 0201 	orr.w	r2, r2, #1
 8005c24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	40010000 	.word	0x40010000
 8005c34:	40010400 	.word	0x40010400
 8005c38:	40000400 	.word	0x40000400
 8005c3c:	40000800 	.word	0x40000800
 8005c40:	40000c00 	.word	0x40000c00
 8005c44:	40014000 	.word	0x40014000
 8005c48:	40001800 	.word	0x40001800

08005c4c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	6839      	ldr	r1, [r7, #0]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 fe08 	bl	8006874 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a2e      	ldr	r2, [pc, #184]	; (8005d24 <HAL_TIM_PWM_Stop+0xd8>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d004      	beq.n	8005c78 <HAL_TIM_PWM_Stop+0x2c>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a2d      	ldr	r2, [pc, #180]	; (8005d28 <HAL_TIM_PWM_Stop+0xdc>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d101      	bne.n	8005c7c <HAL_TIM_PWM_Stop+0x30>
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e000      	b.n	8005c7e <HAL_TIM_PWM_Stop+0x32>
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d017      	beq.n	8005cb2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	6a1a      	ldr	r2, [r3, #32]
 8005c88:	f241 1311 	movw	r3, #4369	; 0x1111
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10f      	bne.n	8005cb2 <HAL_TIM_PWM_Stop+0x66>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	6a1a      	ldr	r2, [r3, #32]
 8005c98:	f240 4344 	movw	r3, #1092	; 0x444
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d107      	bne.n	8005cb2 <HAL_TIM_PWM_Stop+0x66>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cb0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	6a1a      	ldr	r2, [r3, #32]
 8005cb8:	f241 1311 	movw	r3, #4369	; 0x1111
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10f      	bne.n	8005ce2 <HAL_TIM_PWM_Stop+0x96>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	6a1a      	ldr	r2, [r3, #32]
 8005cc8:	f240 4344 	movw	r3, #1092	; 0x444
 8005ccc:	4013      	ands	r3, r2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d107      	bne.n	8005ce2 <HAL_TIM_PWM_Stop+0x96>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f022 0201 	bic.w	r2, r2, #1
 8005ce0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d104      	bne.n	8005cf2 <HAL_TIM_PWM_Stop+0xa6>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cf0:	e013      	b.n	8005d1a <HAL_TIM_PWM_Stop+0xce>
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	2b04      	cmp	r3, #4
 8005cf6:	d104      	bne.n	8005d02 <HAL_TIM_PWM_Stop+0xb6>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d00:	e00b      	b.n	8005d1a <HAL_TIM_PWM_Stop+0xce>
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2b08      	cmp	r3, #8
 8005d06:	d104      	bne.n	8005d12 <HAL_TIM_PWM_Stop+0xc6>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d10:	e003      	b.n	8005d1a <HAL_TIM_PWM_Stop+0xce>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3708      	adds	r7, #8
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	40010000 	.word	0x40010000
 8005d28:	40010400 	.word	0x40010400

08005d2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d122      	bne.n	8005d88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d11b      	bne.n	8005d88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f06f 0202 	mvn.w	r2, #2
 8005d58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	f003 0303 	and.w	r3, r3, #3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fa77 	bl	8006262 <HAL_TIM_IC_CaptureCallback>
 8005d74:	e005      	b.n	8005d82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 fa69 	bl	800624e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 fa7a 	bl	8006276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	f003 0304 	and.w	r3, r3, #4
 8005d92:	2b04      	cmp	r3, #4
 8005d94:	d122      	bne.n	8005ddc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	f003 0304 	and.w	r3, r3, #4
 8005da0:	2b04      	cmp	r3, #4
 8005da2:	d11b      	bne.n	8005ddc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f06f 0204 	mvn.w	r2, #4
 8005dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2202      	movs	r2, #2
 8005db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fa4d 	bl	8006262 <HAL_TIM_IC_CaptureCallback>
 8005dc8:	e005      	b.n	8005dd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fa3f 	bl	800624e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 fa50 	bl	8006276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	f003 0308 	and.w	r3, r3, #8
 8005de6:	2b08      	cmp	r3, #8
 8005de8:	d122      	bne.n	8005e30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	f003 0308 	and.w	r3, r3, #8
 8005df4:	2b08      	cmp	r3, #8
 8005df6:	d11b      	bne.n	8005e30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f06f 0208 	mvn.w	r2, #8
 8005e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2204      	movs	r2, #4
 8005e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	f003 0303 	and.w	r3, r3, #3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 fa23 	bl	8006262 <HAL_TIM_IC_CaptureCallback>
 8005e1c:	e005      	b.n	8005e2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 fa15 	bl	800624e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fa26 	bl	8006276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	f003 0310 	and.w	r3, r3, #16
 8005e3a:	2b10      	cmp	r3, #16
 8005e3c:	d122      	bne.n	8005e84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	f003 0310 	and.w	r3, r3, #16
 8005e48:	2b10      	cmp	r3, #16
 8005e4a:	d11b      	bne.n	8005e84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f06f 0210 	mvn.w	r2, #16
 8005e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2208      	movs	r2, #8
 8005e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	69db      	ldr	r3, [r3, #28]
 8005e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d003      	beq.n	8005e72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f9f9 	bl	8006262 <HAL_TIM_IC_CaptureCallback>
 8005e70:	e005      	b.n	8005e7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f9eb 	bl	800624e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f9fc 	bl	8006276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d10e      	bne.n	8005eb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d107      	bne.n	8005eb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f06f 0201 	mvn.w	r2, #1
 8005ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7fb fa78 	bl	80013a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eba:	2b80      	cmp	r3, #128	; 0x80
 8005ebc:	d10e      	bne.n	8005edc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ec8:	2b80      	cmp	r3, #128	; 0x80
 8005eca:	d107      	bne.n	8005edc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fd78 	bl	80069cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee6:	2b40      	cmp	r3, #64	; 0x40
 8005ee8:	d10e      	bne.n	8005f08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef4:	2b40      	cmp	r3, #64	; 0x40
 8005ef6:	d107      	bne.n	8005f08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f9c1 	bl	800628a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	f003 0320 	and.w	r3, r3, #32
 8005f12:	2b20      	cmp	r3, #32
 8005f14:	d10e      	bne.n	8005f34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	f003 0320 	and.w	r3, r3, #32
 8005f20:	2b20      	cmp	r3, #32
 8005f22:	d107      	bne.n	8005f34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f06f 0220 	mvn.w	r2, #32
 8005f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fd42 	bl	80069b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f34:	bf00      	nop
 8005f36:	3708      	adds	r7, #8
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d101      	bne.n	8005f5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f56:	2302      	movs	r3, #2
 8005f58:	e0ae      	b.n	80060b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b0c      	cmp	r3, #12
 8005f66:	f200 809f 	bhi.w	80060a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005f6a:	a201      	add	r2, pc, #4	; (adr r2, 8005f70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f70:	08005fa5 	.word	0x08005fa5
 8005f74:	080060a9 	.word	0x080060a9
 8005f78:	080060a9 	.word	0x080060a9
 8005f7c:	080060a9 	.word	0x080060a9
 8005f80:	08005fe5 	.word	0x08005fe5
 8005f84:	080060a9 	.word	0x080060a9
 8005f88:	080060a9 	.word	0x080060a9
 8005f8c:	080060a9 	.word	0x080060a9
 8005f90:	08006027 	.word	0x08006027
 8005f94:	080060a9 	.word	0x080060a9
 8005f98:	080060a9 	.word	0x080060a9
 8005f9c:	080060a9 	.word	0x080060a9
 8005fa0:	08006067 	.word	0x08006067
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68b9      	ldr	r1, [r7, #8]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 fa18 	bl	80063e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	699a      	ldr	r2, [r3, #24]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0208 	orr.w	r2, r2, #8
 8005fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	699a      	ldr	r2, [r3, #24]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 0204 	bic.w	r2, r2, #4
 8005fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6999      	ldr	r1, [r3, #24]
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	691a      	ldr	r2, [r3, #16]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	619a      	str	r2, [r3, #24]
      break;
 8005fe2:	e064      	b.n	80060ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68b9      	ldr	r1, [r7, #8]
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 fa68 	bl	80064c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	699a      	ldr	r2, [r3, #24]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	699a      	ldr	r2, [r3, #24]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800600e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6999      	ldr	r1, [r3, #24]
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	021a      	lsls	r2, r3, #8
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	430a      	orrs	r2, r1
 8006022:	619a      	str	r2, [r3, #24]
      break;
 8006024:	e043      	b.n	80060ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68b9      	ldr	r1, [r7, #8]
 800602c:	4618      	mov	r0, r3
 800602e:	f000 fabd 	bl	80065ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	69da      	ldr	r2, [r3, #28]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f042 0208 	orr.w	r2, r2, #8
 8006040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	69da      	ldr	r2, [r3, #28]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f022 0204 	bic.w	r2, r2, #4
 8006050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	69d9      	ldr	r1, [r3, #28]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	691a      	ldr	r2, [r3, #16]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	430a      	orrs	r2, r1
 8006062:	61da      	str	r2, [r3, #28]
      break;
 8006064:	e023      	b.n	80060ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68b9      	ldr	r1, [r7, #8]
 800606c:	4618      	mov	r0, r3
 800606e:	f000 fb11 	bl	8006694 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	69da      	ldr	r2, [r3, #28]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	69da      	ldr	r2, [r3, #28]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	69d9      	ldr	r1, [r3, #28]
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	021a      	lsls	r2, r3, #8
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	61da      	str	r2, [r3, #28]
      break;
 80060a6:	e002      	b.n	80060ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	75fb      	strb	r3, [r7, #23]
      break;
 80060ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3718      	adds	r7, #24
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060ca:	2300      	movs	r3, #0
 80060cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d101      	bne.n	80060dc <HAL_TIM_ConfigClockSource+0x1c>
 80060d8:	2302      	movs	r3, #2
 80060da:	e0b4      	b.n	8006246 <HAL_TIM_ConfigClockSource+0x186>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2202      	movs	r2, #2
 80060e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80060fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006102:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006114:	d03e      	beq.n	8006194 <HAL_TIM_ConfigClockSource+0xd4>
 8006116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800611a:	f200 8087 	bhi.w	800622c <HAL_TIM_ConfigClockSource+0x16c>
 800611e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006122:	f000 8086 	beq.w	8006232 <HAL_TIM_ConfigClockSource+0x172>
 8006126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800612a:	d87f      	bhi.n	800622c <HAL_TIM_ConfigClockSource+0x16c>
 800612c:	2b70      	cmp	r3, #112	; 0x70
 800612e:	d01a      	beq.n	8006166 <HAL_TIM_ConfigClockSource+0xa6>
 8006130:	2b70      	cmp	r3, #112	; 0x70
 8006132:	d87b      	bhi.n	800622c <HAL_TIM_ConfigClockSource+0x16c>
 8006134:	2b60      	cmp	r3, #96	; 0x60
 8006136:	d050      	beq.n	80061da <HAL_TIM_ConfigClockSource+0x11a>
 8006138:	2b60      	cmp	r3, #96	; 0x60
 800613a:	d877      	bhi.n	800622c <HAL_TIM_ConfigClockSource+0x16c>
 800613c:	2b50      	cmp	r3, #80	; 0x50
 800613e:	d03c      	beq.n	80061ba <HAL_TIM_ConfigClockSource+0xfa>
 8006140:	2b50      	cmp	r3, #80	; 0x50
 8006142:	d873      	bhi.n	800622c <HAL_TIM_ConfigClockSource+0x16c>
 8006144:	2b40      	cmp	r3, #64	; 0x40
 8006146:	d058      	beq.n	80061fa <HAL_TIM_ConfigClockSource+0x13a>
 8006148:	2b40      	cmp	r3, #64	; 0x40
 800614a:	d86f      	bhi.n	800622c <HAL_TIM_ConfigClockSource+0x16c>
 800614c:	2b30      	cmp	r3, #48	; 0x30
 800614e:	d064      	beq.n	800621a <HAL_TIM_ConfigClockSource+0x15a>
 8006150:	2b30      	cmp	r3, #48	; 0x30
 8006152:	d86b      	bhi.n	800622c <HAL_TIM_ConfigClockSource+0x16c>
 8006154:	2b20      	cmp	r3, #32
 8006156:	d060      	beq.n	800621a <HAL_TIM_ConfigClockSource+0x15a>
 8006158:	2b20      	cmp	r3, #32
 800615a:	d867      	bhi.n	800622c <HAL_TIM_ConfigClockSource+0x16c>
 800615c:	2b00      	cmp	r3, #0
 800615e:	d05c      	beq.n	800621a <HAL_TIM_ConfigClockSource+0x15a>
 8006160:	2b10      	cmp	r3, #16
 8006162:	d05a      	beq.n	800621a <HAL_TIM_ConfigClockSource+0x15a>
 8006164:	e062      	b.n	800622c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6818      	ldr	r0, [r3, #0]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	6899      	ldr	r1, [r3, #8]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	f000 fb5d 	bl	8006834 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006188:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	609a      	str	r2, [r3, #8]
      break;
 8006192:	e04f      	b.n	8006234 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6818      	ldr	r0, [r3, #0]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	6899      	ldr	r1, [r3, #8]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	f000 fb46 	bl	8006834 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	689a      	ldr	r2, [r3, #8]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061b6:	609a      	str	r2, [r3, #8]
      break;
 80061b8:	e03c      	b.n	8006234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6818      	ldr	r0, [r3, #0]
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	6859      	ldr	r1, [r3, #4]
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	461a      	mov	r2, r3
 80061c8:	f000 faba 	bl	8006740 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2150      	movs	r1, #80	; 0x50
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 fb13 	bl	80067fe <TIM_ITRx_SetConfig>
      break;
 80061d8:	e02c      	b.n	8006234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6818      	ldr	r0, [r3, #0]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	6859      	ldr	r1, [r3, #4]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	461a      	mov	r2, r3
 80061e8:	f000 fad9 	bl	800679e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2160      	movs	r1, #96	; 0x60
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 fb03 	bl	80067fe <TIM_ITRx_SetConfig>
      break;
 80061f8:	e01c      	b.n	8006234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6818      	ldr	r0, [r3, #0]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	6859      	ldr	r1, [r3, #4]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	461a      	mov	r2, r3
 8006208:	f000 fa9a 	bl	8006740 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2140      	movs	r1, #64	; 0x40
 8006212:	4618      	mov	r0, r3
 8006214:	f000 faf3 	bl	80067fe <TIM_ITRx_SetConfig>
      break;
 8006218:	e00c      	b.n	8006234 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4619      	mov	r1, r3
 8006224:	4610      	mov	r0, r2
 8006226:	f000 faea 	bl	80067fe <TIM_ITRx_SetConfig>
      break;
 800622a:	e003      	b.n	8006234 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	73fb      	strb	r3, [r7, #15]
      break;
 8006230:	e000      	b.n	8006234 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006232:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006244:	7bfb      	ldrb	r3, [r7, #15]
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800624e:	b480      	push	{r7}
 8006250:	b083      	sub	sp, #12
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006256:	bf00      	nop
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006262:	b480      	push	{r7}
 8006264:	b083      	sub	sp, #12
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800626a:	bf00      	nop
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006276:	b480      	push	{r7}
 8006278:	b083      	sub	sp, #12
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800627e:	bf00      	nop
 8006280:	370c      	adds	r7, #12
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr

0800628a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800628a:	b480      	push	{r7}
 800628c:	b083      	sub	sp, #12
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006292:	bf00      	nop
 8006294:	370c      	adds	r7, #12
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
	...

080062a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a40      	ldr	r2, [pc, #256]	; (80063b4 <TIM_Base_SetConfig+0x114>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d013      	beq.n	80062e0 <TIM_Base_SetConfig+0x40>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062be:	d00f      	beq.n	80062e0 <TIM_Base_SetConfig+0x40>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a3d      	ldr	r2, [pc, #244]	; (80063b8 <TIM_Base_SetConfig+0x118>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d00b      	beq.n	80062e0 <TIM_Base_SetConfig+0x40>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a3c      	ldr	r2, [pc, #240]	; (80063bc <TIM_Base_SetConfig+0x11c>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d007      	beq.n	80062e0 <TIM_Base_SetConfig+0x40>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a3b      	ldr	r2, [pc, #236]	; (80063c0 <TIM_Base_SetConfig+0x120>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d003      	beq.n	80062e0 <TIM_Base_SetConfig+0x40>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a3a      	ldr	r2, [pc, #232]	; (80063c4 <TIM_Base_SetConfig+0x124>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d108      	bne.n	80062f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a2f      	ldr	r2, [pc, #188]	; (80063b4 <TIM_Base_SetConfig+0x114>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d02b      	beq.n	8006352 <TIM_Base_SetConfig+0xb2>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006300:	d027      	beq.n	8006352 <TIM_Base_SetConfig+0xb2>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a2c      	ldr	r2, [pc, #176]	; (80063b8 <TIM_Base_SetConfig+0x118>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d023      	beq.n	8006352 <TIM_Base_SetConfig+0xb2>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a2b      	ldr	r2, [pc, #172]	; (80063bc <TIM_Base_SetConfig+0x11c>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d01f      	beq.n	8006352 <TIM_Base_SetConfig+0xb2>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a2a      	ldr	r2, [pc, #168]	; (80063c0 <TIM_Base_SetConfig+0x120>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d01b      	beq.n	8006352 <TIM_Base_SetConfig+0xb2>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a29      	ldr	r2, [pc, #164]	; (80063c4 <TIM_Base_SetConfig+0x124>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d017      	beq.n	8006352 <TIM_Base_SetConfig+0xb2>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a28      	ldr	r2, [pc, #160]	; (80063c8 <TIM_Base_SetConfig+0x128>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d013      	beq.n	8006352 <TIM_Base_SetConfig+0xb2>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a27      	ldr	r2, [pc, #156]	; (80063cc <TIM_Base_SetConfig+0x12c>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d00f      	beq.n	8006352 <TIM_Base_SetConfig+0xb2>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a26      	ldr	r2, [pc, #152]	; (80063d0 <TIM_Base_SetConfig+0x130>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d00b      	beq.n	8006352 <TIM_Base_SetConfig+0xb2>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a25      	ldr	r2, [pc, #148]	; (80063d4 <TIM_Base_SetConfig+0x134>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d007      	beq.n	8006352 <TIM_Base_SetConfig+0xb2>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a24      	ldr	r2, [pc, #144]	; (80063d8 <TIM_Base_SetConfig+0x138>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d003      	beq.n	8006352 <TIM_Base_SetConfig+0xb2>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a23      	ldr	r2, [pc, #140]	; (80063dc <TIM_Base_SetConfig+0x13c>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d108      	bne.n	8006364 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006358:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	4313      	orrs	r3, r2
 8006362:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	4313      	orrs	r3, r2
 8006370:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	689a      	ldr	r2, [r3, #8]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a0a      	ldr	r2, [pc, #40]	; (80063b4 <TIM_Base_SetConfig+0x114>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d003      	beq.n	8006398 <TIM_Base_SetConfig+0xf8>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a0c      	ldr	r2, [pc, #48]	; (80063c4 <TIM_Base_SetConfig+0x124>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d103      	bne.n	80063a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	691a      	ldr	r2, [r3, #16]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	615a      	str	r2, [r3, #20]
}
 80063a6:	bf00      	nop
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	40010000 	.word	0x40010000
 80063b8:	40000400 	.word	0x40000400
 80063bc:	40000800 	.word	0x40000800
 80063c0:	40000c00 	.word	0x40000c00
 80063c4:	40010400 	.word	0x40010400
 80063c8:	40014000 	.word	0x40014000
 80063cc:	40014400 	.word	0x40014400
 80063d0:	40014800 	.word	0x40014800
 80063d4:	40001800 	.word	0x40001800
 80063d8:	40001c00 	.word	0x40001c00
 80063dc:	40002000 	.word	0x40002000

080063e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b087      	sub	sp, #28
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a1b      	ldr	r3, [r3, #32]
 80063ee:	f023 0201 	bic.w	r2, r3, #1
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800640e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f023 0303 	bic.w	r3, r3, #3
 8006416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	4313      	orrs	r3, r2
 8006420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	f023 0302 	bic.w	r3, r3, #2
 8006428:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	4313      	orrs	r3, r2
 8006432:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a20      	ldr	r2, [pc, #128]	; (80064b8 <TIM_OC1_SetConfig+0xd8>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d003      	beq.n	8006444 <TIM_OC1_SetConfig+0x64>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a1f      	ldr	r2, [pc, #124]	; (80064bc <TIM_OC1_SetConfig+0xdc>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d10c      	bne.n	800645e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f023 0308 	bic.w	r3, r3, #8
 800644a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	4313      	orrs	r3, r2
 8006454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f023 0304 	bic.w	r3, r3, #4
 800645c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a15      	ldr	r2, [pc, #84]	; (80064b8 <TIM_OC1_SetConfig+0xd8>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d003      	beq.n	800646e <TIM_OC1_SetConfig+0x8e>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a14      	ldr	r2, [pc, #80]	; (80064bc <TIM_OC1_SetConfig+0xdc>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d111      	bne.n	8006492 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800647c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	4313      	orrs	r3, r2
 8006486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	4313      	orrs	r3, r2
 8006490:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	685a      	ldr	r2, [r3, #4]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	621a      	str	r2, [r3, #32]
}
 80064ac:	bf00      	nop
 80064ae:	371c      	adds	r7, #28
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr
 80064b8:	40010000 	.word	0x40010000
 80064bc:	40010400 	.word	0x40010400

080064c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b087      	sub	sp, #28
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	f023 0210 	bic.w	r2, r3, #16
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	021b      	lsls	r3, r3, #8
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	4313      	orrs	r3, r2
 8006502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f023 0320 	bic.w	r3, r3, #32
 800650a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	011b      	lsls	r3, r3, #4
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	4313      	orrs	r3, r2
 8006516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a22      	ldr	r2, [pc, #136]	; (80065a4 <TIM_OC2_SetConfig+0xe4>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d003      	beq.n	8006528 <TIM_OC2_SetConfig+0x68>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a21      	ldr	r2, [pc, #132]	; (80065a8 <TIM_OC2_SetConfig+0xe8>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d10d      	bne.n	8006544 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800652e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	011b      	lsls	r3, r3, #4
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	4313      	orrs	r3, r2
 800653a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006542:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a17      	ldr	r2, [pc, #92]	; (80065a4 <TIM_OC2_SetConfig+0xe4>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d003      	beq.n	8006554 <TIM_OC2_SetConfig+0x94>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a16      	ldr	r2, [pc, #88]	; (80065a8 <TIM_OC2_SetConfig+0xe8>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d113      	bne.n	800657c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800655a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006562:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	693a      	ldr	r2, [r7, #16]
 800656c:	4313      	orrs	r3, r2
 800656e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	693a      	ldr	r2, [r7, #16]
 8006578:	4313      	orrs	r3, r2
 800657a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	621a      	str	r2, [r3, #32]
}
 8006596:	bf00      	nop
 8006598:	371c      	adds	r7, #28
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	40010000 	.word	0x40010000
 80065a8:	40010400 	.word	0x40010400

080065ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b087      	sub	sp, #28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	69db      	ldr	r3, [r3, #28]
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f023 0303 	bic.w	r3, r3, #3
 80065e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	021b      	lsls	r3, r3, #8
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	4313      	orrs	r3, r2
 8006600:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a21      	ldr	r2, [pc, #132]	; (800668c <TIM_OC3_SetConfig+0xe0>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d003      	beq.n	8006612 <TIM_OC3_SetConfig+0x66>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a20      	ldr	r2, [pc, #128]	; (8006690 <TIM_OC3_SetConfig+0xe4>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d10d      	bne.n	800662e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006618:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	021b      	lsls	r3, r3, #8
 8006620:	697a      	ldr	r2, [r7, #20]
 8006622:	4313      	orrs	r3, r2
 8006624:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800662c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a16      	ldr	r2, [pc, #88]	; (800668c <TIM_OC3_SetConfig+0xe0>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d003      	beq.n	800663e <TIM_OC3_SetConfig+0x92>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a15      	ldr	r2, [pc, #84]	; (8006690 <TIM_OC3_SetConfig+0xe4>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d113      	bne.n	8006666 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006644:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800664c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	011b      	lsls	r3, r3, #4
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	4313      	orrs	r3, r2
 8006658:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	011b      	lsls	r3, r3, #4
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	4313      	orrs	r3, r2
 8006664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	685a      	ldr	r2, [r3, #4]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	621a      	str	r2, [r3, #32]
}
 8006680:	bf00      	nop
 8006682:	371c      	adds	r7, #28
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	40010000 	.word	0x40010000
 8006690:	40010400 	.word	0x40010400

08006694 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006694:	b480      	push	{r7}
 8006696:	b087      	sub	sp, #28
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	69db      	ldr	r3, [r3, #28]
 80066ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	021b      	lsls	r3, r3, #8
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	031b      	lsls	r3, r3, #12
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a12      	ldr	r2, [pc, #72]	; (8006738 <TIM_OC4_SetConfig+0xa4>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d003      	beq.n	80066fc <TIM_OC4_SetConfig+0x68>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a11      	ldr	r2, [pc, #68]	; (800673c <TIM_OC4_SetConfig+0xa8>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d109      	bne.n	8006710 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006702:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	019b      	lsls	r3, r3, #6
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	4313      	orrs	r3, r2
 800670e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	621a      	str	r2, [r3, #32]
}
 800672a:	bf00      	nop
 800672c:	371c      	adds	r7, #28
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	40010000 	.word	0x40010000
 800673c:	40010400 	.word	0x40010400

08006740 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006740:	b480      	push	{r7}
 8006742:	b087      	sub	sp, #28
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6a1b      	ldr	r3, [r3, #32]
 8006750:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	f023 0201 	bic.w	r2, r3, #1
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800676a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	011b      	lsls	r3, r3, #4
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	4313      	orrs	r3, r2
 8006774:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f023 030a 	bic.w	r3, r3, #10
 800677c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	4313      	orrs	r3, r2
 8006784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	621a      	str	r2, [r3, #32]
}
 8006792:	bf00      	nop
 8006794:	371c      	adds	r7, #28
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800679e:	b480      	push	{r7}
 80067a0:	b087      	sub	sp, #28
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	60f8      	str	r0, [r7, #12]
 80067a6:	60b9      	str	r1, [r7, #8]
 80067a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	f023 0210 	bic.w	r2, r3, #16
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6a1b      	ldr	r3, [r3, #32]
 80067c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	031b      	lsls	r3, r3, #12
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	011b      	lsls	r3, r3, #4
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	697a      	ldr	r2, [r7, #20]
 80067ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	621a      	str	r2, [r3, #32]
}
 80067f2:	bf00      	nop
 80067f4:	371c      	adds	r7, #28
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067fe:	b480      	push	{r7}
 8006800:	b085      	sub	sp, #20
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
 8006806:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006814:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	4313      	orrs	r3, r2
 800681c:	f043 0307 	orr.w	r3, r3, #7
 8006820:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	609a      	str	r2, [r3, #8]
}
 8006828:	bf00      	nop
 800682a:	3714      	adds	r7, #20
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006834:	b480      	push	{r7}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
 8006840:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800684e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	021a      	lsls	r2, r3, #8
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	431a      	orrs	r2, r3
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	4313      	orrs	r3, r2
 800685c:	697a      	ldr	r2, [r7, #20]
 800685e:	4313      	orrs	r3, r2
 8006860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	609a      	str	r2, [r3, #8]
}
 8006868:	bf00      	nop
 800686a:	371c      	adds	r7, #28
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006874:	b480      	push	{r7}
 8006876:	b087      	sub	sp, #28
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	f003 031f 	and.w	r3, r3, #31
 8006886:	2201      	movs	r2, #1
 8006888:	fa02 f303 	lsl.w	r3, r2, r3
 800688c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6a1a      	ldr	r2, [r3, #32]
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	43db      	mvns	r3, r3
 8006896:	401a      	ands	r2, r3
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6a1a      	ldr	r2, [r3, #32]
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	f003 031f 	and.w	r3, r3, #31
 80068a6:	6879      	ldr	r1, [r7, #4]
 80068a8:	fa01 f303 	lsl.w	r3, r1, r3
 80068ac:	431a      	orrs	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	621a      	str	r2, [r3, #32]
}
 80068b2:	bf00      	nop
 80068b4:	371c      	adds	r7, #28
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
	...

080068c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d101      	bne.n	80068d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068d4:	2302      	movs	r3, #2
 80068d6:	e05a      	b.n	800698e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2202      	movs	r2, #2
 80068e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	4313      	orrs	r3, r2
 8006908:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a21      	ldr	r2, [pc, #132]	; (800699c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d022      	beq.n	8006962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006924:	d01d      	beq.n	8006962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a1d      	ldr	r2, [pc, #116]	; (80069a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d018      	beq.n	8006962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a1b      	ldr	r2, [pc, #108]	; (80069a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d013      	beq.n	8006962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a1a      	ldr	r2, [pc, #104]	; (80069a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d00e      	beq.n	8006962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a18      	ldr	r2, [pc, #96]	; (80069ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d009      	beq.n	8006962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a17      	ldr	r2, [pc, #92]	; (80069b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d004      	beq.n	8006962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a15      	ldr	r2, [pc, #84]	; (80069b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d10c      	bne.n	800697c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006968:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	4313      	orrs	r3, r2
 8006972:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3714      	adds	r7, #20
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	40010000 	.word	0x40010000
 80069a0:	40000400 	.word	0x40000400
 80069a4:	40000800 	.word	0x40000800
 80069a8:	40000c00 	.word	0x40000c00
 80069ac:	40010400 	.word	0x40010400
 80069b0:	40014000 	.word	0x40014000
 80069b4:	40001800 	.word	0x40001800

080069b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069c0:	bf00      	nop
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d101      	bne.n	80069f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e03f      	b.n	8006a72 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d106      	bne.n	8006a0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7fb fc02 	bl	8002210 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2224      	movs	r2, #36	; 0x24
 8006a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68da      	ldr	r2, [r3, #12]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 f929 	bl	8006c7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	691a      	ldr	r2, [r3, #16]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	695a      	ldr	r2, [r3, #20]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68da      	ldr	r2, [r3, #12]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2220      	movs	r2, #32
 8006a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2220      	movs	r2, #32
 8006a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3708      	adds	r7, #8
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b08a      	sub	sp, #40	; 0x28
 8006a7e:	af02      	add	r7, sp, #8
 8006a80:	60f8      	str	r0, [r7, #12]
 8006a82:	60b9      	str	r1, [r7, #8]
 8006a84:	603b      	str	r3, [r7, #0]
 8006a86:	4613      	mov	r3, r2
 8006a88:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b20      	cmp	r3, #32
 8006a98:	d17c      	bne.n	8006b94 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d002      	beq.n	8006aa6 <HAL_UART_Transmit+0x2c>
 8006aa0:	88fb      	ldrh	r3, [r7, #6]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e075      	b.n	8006b96 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d101      	bne.n	8006ab8 <HAL_UART_Transmit+0x3e>
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	e06e      	b.n	8006b96 <HAL_UART_Transmit+0x11c>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2221      	movs	r2, #33	; 0x21
 8006aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ace:	f7fb fea9 	bl	8002824 <HAL_GetTick>
 8006ad2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	88fa      	ldrh	r2, [r7, #6]
 8006ad8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	88fa      	ldrh	r2, [r7, #6]
 8006ade:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ae8:	d108      	bne.n	8006afc <HAL_UART_Transmit+0x82>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d104      	bne.n	8006afc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006af2:	2300      	movs	r3, #0
 8006af4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	61bb      	str	r3, [r7, #24]
 8006afa:	e003      	b.n	8006b04 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b00:	2300      	movs	r3, #0
 8006b02:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006b0c:	e02a      	b.n	8006b64 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	9300      	str	r3, [sp, #0]
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	2200      	movs	r2, #0
 8006b16:	2180      	movs	r1, #128	; 0x80
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f000 f840 	bl	8006b9e <UART_WaitOnFlagUntilTimeout>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d001      	beq.n	8006b28 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e036      	b.n	8006b96 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10b      	bne.n	8006b46 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	881b      	ldrh	r3, [r3, #0]
 8006b32:	461a      	mov	r2, r3
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	3302      	adds	r3, #2
 8006b42:	61bb      	str	r3, [r7, #24]
 8006b44:	e007      	b.n	8006b56 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	781a      	ldrb	r2, [r3, #0]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	3301      	adds	r3, #1
 8006b54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1cf      	bne.n	8006b0e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	2200      	movs	r2, #0
 8006b76:	2140      	movs	r1, #64	; 0x40
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f000 f810 	bl	8006b9e <UART_WaitOnFlagUntilTimeout>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d001      	beq.n	8006b88 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e006      	b.n	8006b96 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2220      	movs	r2, #32
 8006b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006b90:	2300      	movs	r3, #0
 8006b92:	e000      	b.n	8006b96 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006b94:	2302      	movs	r3, #2
  }
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3720      	adds	r7, #32
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b090      	sub	sp, #64	; 0x40
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	60f8      	str	r0, [r7, #12]
 8006ba6:	60b9      	str	r1, [r7, #8]
 8006ba8:	603b      	str	r3, [r7, #0]
 8006baa:	4613      	mov	r3, r2
 8006bac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bae:	e050      	b.n	8006c52 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb6:	d04c      	beq.n	8006c52 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d007      	beq.n	8006bce <UART_WaitOnFlagUntilTimeout+0x30>
 8006bbe:	f7fb fe31 	bl	8002824 <HAL_GetTick>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d241      	bcs.n	8006c52 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	330c      	adds	r3, #12
 8006bd4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd8:	e853 3f00 	ldrex	r3, [r3]
 8006bdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006be4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	330c      	adds	r3, #12
 8006bec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006bee:	637a      	str	r2, [r7, #52]	; 0x34
 8006bf0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bf6:	e841 2300 	strex	r3, r2, [r1]
 8006bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1e5      	bne.n	8006bce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	3314      	adds	r3, #20
 8006c08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	e853 3f00 	ldrex	r3, [r3]
 8006c10:	613b      	str	r3, [r7, #16]
   return(result);
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	f023 0301 	bic.w	r3, r3, #1
 8006c18:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	3314      	adds	r3, #20
 8006c20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c22:	623a      	str	r2, [r7, #32]
 8006c24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c26:	69f9      	ldr	r1, [r7, #28]
 8006c28:	6a3a      	ldr	r2, [r7, #32]
 8006c2a:	e841 2300 	strex	r3, r2, [r1]
 8006c2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1e5      	bne.n	8006c02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2220      	movs	r2, #32
 8006c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2220      	movs	r2, #32
 8006c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e00f      	b.n	8006c72 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	bf0c      	ite	eq
 8006c62:	2301      	moveq	r3, #1
 8006c64:	2300      	movne	r3, #0
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	461a      	mov	r2, r3
 8006c6a:	79fb      	ldrb	r3, [r7, #7]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d09f      	beq.n	8006bb0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3740      	adds	r7, #64	; 0x40
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
	...

08006c7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c80:	b09f      	sub	sp, #124	; 0x7c
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c92:	68d9      	ldr	r1, [r3, #12]
 8006c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	ea40 0301 	orr.w	r3, r0, r1
 8006c9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ca0:	689a      	ldr	r2, [r3, #8]
 8006ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	431a      	orrs	r2, r3
 8006ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006caa:	695b      	ldr	r3, [r3, #20]
 8006cac:	431a      	orrs	r2, r3
 8006cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cb0:	69db      	ldr	r3, [r3, #28]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006cc0:	f021 010c 	bic.w	r1, r1, #12
 8006cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cca:	430b      	orrs	r3, r1
 8006ccc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	695b      	ldr	r3, [r3, #20]
 8006cd4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cda:	6999      	ldr	r1, [r3, #24]
 8006cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	ea40 0301 	orr.w	r3, r0, r1
 8006ce4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	4bc5      	ldr	r3, [pc, #788]	; (8007000 <UART_SetConfig+0x384>)
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d004      	beq.n	8006cfa <UART_SetConfig+0x7e>
 8006cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	4bc3      	ldr	r3, [pc, #780]	; (8007004 <UART_SetConfig+0x388>)
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d103      	bne.n	8006d02 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006cfa:	f7fe f8f9 	bl	8004ef0 <HAL_RCC_GetPCLK2Freq>
 8006cfe:	6778      	str	r0, [r7, #116]	; 0x74
 8006d00:	e002      	b.n	8006d08 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d02:	f7fe f8e1 	bl	8004ec8 <HAL_RCC_GetPCLK1Freq>
 8006d06:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d0a:	69db      	ldr	r3, [r3, #28]
 8006d0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d10:	f040 80b6 	bne.w	8006e80 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d16:	461c      	mov	r4, r3
 8006d18:	f04f 0500 	mov.w	r5, #0
 8006d1c:	4622      	mov	r2, r4
 8006d1e:	462b      	mov	r3, r5
 8006d20:	1891      	adds	r1, r2, r2
 8006d22:	6439      	str	r1, [r7, #64]	; 0x40
 8006d24:	415b      	adcs	r3, r3
 8006d26:	647b      	str	r3, [r7, #68]	; 0x44
 8006d28:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d2c:	1912      	adds	r2, r2, r4
 8006d2e:	eb45 0303 	adc.w	r3, r5, r3
 8006d32:	f04f 0000 	mov.w	r0, #0
 8006d36:	f04f 0100 	mov.w	r1, #0
 8006d3a:	00d9      	lsls	r1, r3, #3
 8006d3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d40:	00d0      	lsls	r0, r2, #3
 8006d42:	4602      	mov	r2, r0
 8006d44:	460b      	mov	r3, r1
 8006d46:	1911      	adds	r1, r2, r4
 8006d48:	6639      	str	r1, [r7, #96]	; 0x60
 8006d4a:	416b      	adcs	r3, r5
 8006d4c:	667b      	str	r3, [r7, #100]	; 0x64
 8006d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	461a      	mov	r2, r3
 8006d54:	f04f 0300 	mov.w	r3, #0
 8006d58:	1891      	adds	r1, r2, r2
 8006d5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d5c:	415b      	adcs	r3, r3
 8006d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d64:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006d68:	f7f9 fed0 	bl	8000b0c <__aeabi_uldivmod>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	460b      	mov	r3, r1
 8006d70:	4ba5      	ldr	r3, [pc, #660]	; (8007008 <UART_SetConfig+0x38c>)
 8006d72:	fba3 2302 	umull	r2, r3, r3, r2
 8006d76:	095b      	lsrs	r3, r3, #5
 8006d78:	011e      	lsls	r6, r3, #4
 8006d7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d7c:	461c      	mov	r4, r3
 8006d7e:	f04f 0500 	mov.w	r5, #0
 8006d82:	4622      	mov	r2, r4
 8006d84:	462b      	mov	r3, r5
 8006d86:	1891      	adds	r1, r2, r2
 8006d88:	6339      	str	r1, [r7, #48]	; 0x30
 8006d8a:	415b      	adcs	r3, r3
 8006d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d8e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006d92:	1912      	adds	r2, r2, r4
 8006d94:	eb45 0303 	adc.w	r3, r5, r3
 8006d98:	f04f 0000 	mov.w	r0, #0
 8006d9c:	f04f 0100 	mov.w	r1, #0
 8006da0:	00d9      	lsls	r1, r3, #3
 8006da2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006da6:	00d0      	lsls	r0, r2, #3
 8006da8:	4602      	mov	r2, r0
 8006daa:	460b      	mov	r3, r1
 8006dac:	1911      	adds	r1, r2, r4
 8006dae:	65b9      	str	r1, [r7, #88]	; 0x58
 8006db0:	416b      	adcs	r3, r5
 8006db2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	461a      	mov	r2, r3
 8006dba:	f04f 0300 	mov.w	r3, #0
 8006dbe:	1891      	adds	r1, r2, r2
 8006dc0:	62b9      	str	r1, [r7, #40]	; 0x28
 8006dc2:	415b      	adcs	r3, r3
 8006dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006dca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006dce:	f7f9 fe9d 	bl	8000b0c <__aeabi_uldivmod>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	4b8c      	ldr	r3, [pc, #560]	; (8007008 <UART_SetConfig+0x38c>)
 8006dd8:	fba3 1302 	umull	r1, r3, r3, r2
 8006ddc:	095b      	lsrs	r3, r3, #5
 8006dde:	2164      	movs	r1, #100	; 0x64
 8006de0:	fb01 f303 	mul.w	r3, r1, r3
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	00db      	lsls	r3, r3, #3
 8006de8:	3332      	adds	r3, #50	; 0x32
 8006dea:	4a87      	ldr	r2, [pc, #540]	; (8007008 <UART_SetConfig+0x38c>)
 8006dec:	fba2 2303 	umull	r2, r3, r2, r3
 8006df0:	095b      	lsrs	r3, r3, #5
 8006df2:	005b      	lsls	r3, r3, #1
 8006df4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006df8:	441e      	add	r6, r3
 8006dfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f04f 0100 	mov.w	r1, #0
 8006e02:	4602      	mov	r2, r0
 8006e04:	460b      	mov	r3, r1
 8006e06:	1894      	adds	r4, r2, r2
 8006e08:	623c      	str	r4, [r7, #32]
 8006e0a:	415b      	adcs	r3, r3
 8006e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e12:	1812      	adds	r2, r2, r0
 8006e14:	eb41 0303 	adc.w	r3, r1, r3
 8006e18:	f04f 0400 	mov.w	r4, #0
 8006e1c:	f04f 0500 	mov.w	r5, #0
 8006e20:	00dd      	lsls	r5, r3, #3
 8006e22:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006e26:	00d4      	lsls	r4, r2, #3
 8006e28:	4622      	mov	r2, r4
 8006e2a:	462b      	mov	r3, r5
 8006e2c:	1814      	adds	r4, r2, r0
 8006e2e:	653c      	str	r4, [r7, #80]	; 0x50
 8006e30:	414b      	adcs	r3, r1
 8006e32:	657b      	str	r3, [r7, #84]	; 0x54
 8006e34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	461a      	mov	r2, r3
 8006e3a:	f04f 0300 	mov.w	r3, #0
 8006e3e:	1891      	adds	r1, r2, r2
 8006e40:	61b9      	str	r1, [r7, #24]
 8006e42:	415b      	adcs	r3, r3
 8006e44:	61fb      	str	r3, [r7, #28]
 8006e46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e4a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006e4e:	f7f9 fe5d 	bl	8000b0c <__aeabi_uldivmod>
 8006e52:	4602      	mov	r2, r0
 8006e54:	460b      	mov	r3, r1
 8006e56:	4b6c      	ldr	r3, [pc, #432]	; (8007008 <UART_SetConfig+0x38c>)
 8006e58:	fba3 1302 	umull	r1, r3, r3, r2
 8006e5c:	095b      	lsrs	r3, r3, #5
 8006e5e:	2164      	movs	r1, #100	; 0x64
 8006e60:	fb01 f303 	mul.w	r3, r1, r3
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	00db      	lsls	r3, r3, #3
 8006e68:	3332      	adds	r3, #50	; 0x32
 8006e6a:	4a67      	ldr	r2, [pc, #412]	; (8007008 <UART_SetConfig+0x38c>)
 8006e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e70:	095b      	lsrs	r3, r3, #5
 8006e72:	f003 0207 	and.w	r2, r3, #7
 8006e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4432      	add	r2, r6
 8006e7c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e7e:	e0b9      	b.n	8006ff4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e82:	461c      	mov	r4, r3
 8006e84:	f04f 0500 	mov.w	r5, #0
 8006e88:	4622      	mov	r2, r4
 8006e8a:	462b      	mov	r3, r5
 8006e8c:	1891      	adds	r1, r2, r2
 8006e8e:	6139      	str	r1, [r7, #16]
 8006e90:	415b      	adcs	r3, r3
 8006e92:	617b      	str	r3, [r7, #20]
 8006e94:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006e98:	1912      	adds	r2, r2, r4
 8006e9a:	eb45 0303 	adc.w	r3, r5, r3
 8006e9e:	f04f 0000 	mov.w	r0, #0
 8006ea2:	f04f 0100 	mov.w	r1, #0
 8006ea6:	00d9      	lsls	r1, r3, #3
 8006ea8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006eac:	00d0      	lsls	r0, r2, #3
 8006eae:	4602      	mov	r2, r0
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	eb12 0804 	adds.w	r8, r2, r4
 8006eb6:	eb43 0905 	adc.w	r9, r3, r5
 8006eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f04f 0100 	mov.w	r1, #0
 8006ec4:	f04f 0200 	mov.w	r2, #0
 8006ec8:	f04f 0300 	mov.w	r3, #0
 8006ecc:	008b      	lsls	r3, r1, #2
 8006ece:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006ed2:	0082      	lsls	r2, r0, #2
 8006ed4:	4640      	mov	r0, r8
 8006ed6:	4649      	mov	r1, r9
 8006ed8:	f7f9 fe18 	bl	8000b0c <__aeabi_uldivmod>
 8006edc:	4602      	mov	r2, r0
 8006ede:	460b      	mov	r3, r1
 8006ee0:	4b49      	ldr	r3, [pc, #292]	; (8007008 <UART_SetConfig+0x38c>)
 8006ee2:	fba3 2302 	umull	r2, r3, r3, r2
 8006ee6:	095b      	lsrs	r3, r3, #5
 8006ee8:	011e      	lsls	r6, r3, #4
 8006eea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006eec:	4618      	mov	r0, r3
 8006eee:	f04f 0100 	mov.w	r1, #0
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	1894      	adds	r4, r2, r2
 8006ef8:	60bc      	str	r4, [r7, #8]
 8006efa:	415b      	adcs	r3, r3
 8006efc:	60fb      	str	r3, [r7, #12]
 8006efe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f02:	1812      	adds	r2, r2, r0
 8006f04:	eb41 0303 	adc.w	r3, r1, r3
 8006f08:	f04f 0400 	mov.w	r4, #0
 8006f0c:	f04f 0500 	mov.w	r5, #0
 8006f10:	00dd      	lsls	r5, r3, #3
 8006f12:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f16:	00d4      	lsls	r4, r2, #3
 8006f18:	4622      	mov	r2, r4
 8006f1a:	462b      	mov	r3, r5
 8006f1c:	1814      	adds	r4, r2, r0
 8006f1e:	64bc      	str	r4, [r7, #72]	; 0x48
 8006f20:	414b      	adcs	r3, r1
 8006f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f04f 0100 	mov.w	r1, #0
 8006f2e:	f04f 0200 	mov.w	r2, #0
 8006f32:	f04f 0300 	mov.w	r3, #0
 8006f36:	008b      	lsls	r3, r1, #2
 8006f38:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f3c:	0082      	lsls	r2, r0, #2
 8006f3e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006f42:	f7f9 fde3 	bl	8000b0c <__aeabi_uldivmod>
 8006f46:	4602      	mov	r2, r0
 8006f48:	460b      	mov	r3, r1
 8006f4a:	4b2f      	ldr	r3, [pc, #188]	; (8007008 <UART_SetConfig+0x38c>)
 8006f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8006f50:	095b      	lsrs	r3, r3, #5
 8006f52:	2164      	movs	r1, #100	; 0x64
 8006f54:	fb01 f303 	mul.w	r3, r1, r3
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	011b      	lsls	r3, r3, #4
 8006f5c:	3332      	adds	r3, #50	; 0x32
 8006f5e:	4a2a      	ldr	r2, [pc, #168]	; (8007008 <UART_SetConfig+0x38c>)
 8006f60:	fba2 2303 	umull	r2, r3, r2, r3
 8006f64:	095b      	lsrs	r3, r3, #5
 8006f66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f6a:	441e      	add	r6, r3
 8006f6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f04f 0100 	mov.w	r1, #0
 8006f74:	4602      	mov	r2, r0
 8006f76:	460b      	mov	r3, r1
 8006f78:	1894      	adds	r4, r2, r2
 8006f7a:	603c      	str	r4, [r7, #0]
 8006f7c:	415b      	adcs	r3, r3
 8006f7e:	607b      	str	r3, [r7, #4]
 8006f80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f84:	1812      	adds	r2, r2, r0
 8006f86:	eb41 0303 	adc.w	r3, r1, r3
 8006f8a:	f04f 0400 	mov.w	r4, #0
 8006f8e:	f04f 0500 	mov.w	r5, #0
 8006f92:	00dd      	lsls	r5, r3, #3
 8006f94:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f98:	00d4      	lsls	r4, r2, #3
 8006f9a:	4622      	mov	r2, r4
 8006f9c:	462b      	mov	r3, r5
 8006f9e:	eb12 0a00 	adds.w	sl, r2, r0
 8006fa2:	eb43 0b01 	adc.w	fp, r3, r1
 8006fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	4618      	mov	r0, r3
 8006fac:	f04f 0100 	mov.w	r1, #0
 8006fb0:	f04f 0200 	mov.w	r2, #0
 8006fb4:	f04f 0300 	mov.w	r3, #0
 8006fb8:	008b      	lsls	r3, r1, #2
 8006fba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006fbe:	0082      	lsls	r2, r0, #2
 8006fc0:	4650      	mov	r0, sl
 8006fc2:	4659      	mov	r1, fp
 8006fc4:	f7f9 fda2 	bl	8000b0c <__aeabi_uldivmod>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	460b      	mov	r3, r1
 8006fcc:	4b0e      	ldr	r3, [pc, #56]	; (8007008 <UART_SetConfig+0x38c>)
 8006fce:	fba3 1302 	umull	r1, r3, r3, r2
 8006fd2:	095b      	lsrs	r3, r3, #5
 8006fd4:	2164      	movs	r1, #100	; 0x64
 8006fd6:	fb01 f303 	mul.w	r3, r1, r3
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	011b      	lsls	r3, r3, #4
 8006fde:	3332      	adds	r3, #50	; 0x32
 8006fe0:	4a09      	ldr	r2, [pc, #36]	; (8007008 <UART_SetConfig+0x38c>)
 8006fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe6:	095b      	lsrs	r3, r3, #5
 8006fe8:	f003 020f 	and.w	r2, r3, #15
 8006fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4432      	add	r2, r6
 8006ff2:	609a      	str	r2, [r3, #8]
}
 8006ff4:	bf00      	nop
 8006ff6:	377c      	adds	r7, #124	; 0x7c
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ffe:	bf00      	nop
 8007000:	40011000 	.word	0x40011000
 8007004:	40011400 	.word	0x40011400
 8007008:	51eb851f 	.word	0x51eb851f

0800700c <__errno>:
 800700c:	4b01      	ldr	r3, [pc, #4]	; (8007014 <__errno+0x8>)
 800700e:	6818      	ldr	r0, [r3, #0]
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	20000064 	.word	0x20000064

08007018 <__libc_init_array>:
 8007018:	b570      	push	{r4, r5, r6, lr}
 800701a:	4d0d      	ldr	r5, [pc, #52]	; (8007050 <__libc_init_array+0x38>)
 800701c:	4c0d      	ldr	r4, [pc, #52]	; (8007054 <__libc_init_array+0x3c>)
 800701e:	1b64      	subs	r4, r4, r5
 8007020:	10a4      	asrs	r4, r4, #2
 8007022:	2600      	movs	r6, #0
 8007024:	42a6      	cmp	r6, r4
 8007026:	d109      	bne.n	800703c <__libc_init_array+0x24>
 8007028:	4d0b      	ldr	r5, [pc, #44]	; (8007058 <__libc_init_array+0x40>)
 800702a:	4c0c      	ldr	r4, [pc, #48]	; (800705c <__libc_init_array+0x44>)
 800702c:	f000 fc4e 	bl	80078cc <_init>
 8007030:	1b64      	subs	r4, r4, r5
 8007032:	10a4      	asrs	r4, r4, #2
 8007034:	2600      	movs	r6, #0
 8007036:	42a6      	cmp	r6, r4
 8007038:	d105      	bne.n	8007046 <__libc_init_array+0x2e>
 800703a:	bd70      	pop	{r4, r5, r6, pc}
 800703c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007040:	4798      	blx	r3
 8007042:	3601      	adds	r6, #1
 8007044:	e7ee      	b.n	8007024 <__libc_init_array+0xc>
 8007046:	f855 3b04 	ldr.w	r3, [r5], #4
 800704a:	4798      	blx	r3
 800704c:	3601      	adds	r6, #1
 800704e:	e7f2      	b.n	8007036 <__libc_init_array+0x1e>
 8007050:	08007a18 	.word	0x08007a18
 8007054:	08007a18 	.word	0x08007a18
 8007058:	08007a18 	.word	0x08007a18
 800705c:	08007a1c 	.word	0x08007a1c

08007060 <memset>:
 8007060:	4402      	add	r2, r0
 8007062:	4603      	mov	r3, r0
 8007064:	4293      	cmp	r3, r2
 8007066:	d100      	bne.n	800706a <memset+0xa>
 8007068:	4770      	bx	lr
 800706a:	f803 1b01 	strb.w	r1, [r3], #1
 800706e:	e7f9      	b.n	8007064 <memset+0x4>

08007070 <siprintf>:
 8007070:	b40e      	push	{r1, r2, r3}
 8007072:	b500      	push	{lr}
 8007074:	b09c      	sub	sp, #112	; 0x70
 8007076:	ab1d      	add	r3, sp, #116	; 0x74
 8007078:	9002      	str	r0, [sp, #8]
 800707a:	9006      	str	r0, [sp, #24]
 800707c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007080:	4809      	ldr	r0, [pc, #36]	; (80070a8 <siprintf+0x38>)
 8007082:	9107      	str	r1, [sp, #28]
 8007084:	9104      	str	r1, [sp, #16]
 8007086:	4909      	ldr	r1, [pc, #36]	; (80070ac <siprintf+0x3c>)
 8007088:	f853 2b04 	ldr.w	r2, [r3], #4
 800708c:	9105      	str	r1, [sp, #20]
 800708e:	6800      	ldr	r0, [r0, #0]
 8007090:	9301      	str	r3, [sp, #4]
 8007092:	a902      	add	r1, sp, #8
 8007094:	f000 f868 	bl	8007168 <_svfiprintf_r>
 8007098:	9b02      	ldr	r3, [sp, #8]
 800709a:	2200      	movs	r2, #0
 800709c:	701a      	strb	r2, [r3, #0]
 800709e:	b01c      	add	sp, #112	; 0x70
 80070a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80070a4:	b003      	add	sp, #12
 80070a6:	4770      	bx	lr
 80070a8:	20000064 	.word	0x20000064
 80070ac:	ffff0208 	.word	0xffff0208

080070b0 <__ssputs_r>:
 80070b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070b4:	688e      	ldr	r6, [r1, #8]
 80070b6:	429e      	cmp	r6, r3
 80070b8:	4682      	mov	sl, r0
 80070ba:	460c      	mov	r4, r1
 80070bc:	4690      	mov	r8, r2
 80070be:	461f      	mov	r7, r3
 80070c0:	d838      	bhi.n	8007134 <__ssputs_r+0x84>
 80070c2:	898a      	ldrh	r2, [r1, #12]
 80070c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80070c8:	d032      	beq.n	8007130 <__ssputs_r+0x80>
 80070ca:	6825      	ldr	r5, [r4, #0]
 80070cc:	6909      	ldr	r1, [r1, #16]
 80070ce:	eba5 0901 	sub.w	r9, r5, r1
 80070d2:	6965      	ldr	r5, [r4, #20]
 80070d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80070d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80070dc:	3301      	adds	r3, #1
 80070de:	444b      	add	r3, r9
 80070e0:	106d      	asrs	r5, r5, #1
 80070e2:	429d      	cmp	r5, r3
 80070e4:	bf38      	it	cc
 80070e6:	461d      	movcc	r5, r3
 80070e8:	0553      	lsls	r3, r2, #21
 80070ea:	d531      	bpl.n	8007150 <__ssputs_r+0xa0>
 80070ec:	4629      	mov	r1, r5
 80070ee:	f000 fb47 	bl	8007780 <_malloc_r>
 80070f2:	4606      	mov	r6, r0
 80070f4:	b950      	cbnz	r0, 800710c <__ssputs_r+0x5c>
 80070f6:	230c      	movs	r3, #12
 80070f8:	f8ca 3000 	str.w	r3, [sl]
 80070fc:	89a3      	ldrh	r3, [r4, #12]
 80070fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007102:	81a3      	strh	r3, [r4, #12]
 8007104:	f04f 30ff 	mov.w	r0, #4294967295
 8007108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800710c:	6921      	ldr	r1, [r4, #16]
 800710e:	464a      	mov	r2, r9
 8007110:	f000 fabe 	bl	8007690 <memcpy>
 8007114:	89a3      	ldrh	r3, [r4, #12]
 8007116:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800711a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800711e:	81a3      	strh	r3, [r4, #12]
 8007120:	6126      	str	r6, [r4, #16]
 8007122:	6165      	str	r5, [r4, #20]
 8007124:	444e      	add	r6, r9
 8007126:	eba5 0509 	sub.w	r5, r5, r9
 800712a:	6026      	str	r6, [r4, #0]
 800712c:	60a5      	str	r5, [r4, #8]
 800712e:	463e      	mov	r6, r7
 8007130:	42be      	cmp	r6, r7
 8007132:	d900      	bls.n	8007136 <__ssputs_r+0x86>
 8007134:	463e      	mov	r6, r7
 8007136:	4632      	mov	r2, r6
 8007138:	6820      	ldr	r0, [r4, #0]
 800713a:	4641      	mov	r1, r8
 800713c:	f000 fab6 	bl	80076ac <memmove>
 8007140:	68a3      	ldr	r3, [r4, #8]
 8007142:	6822      	ldr	r2, [r4, #0]
 8007144:	1b9b      	subs	r3, r3, r6
 8007146:	4432      	add	r2, r6
 8007148:	60a3      	str	r3, [r4, #8]
 800714a:	6022      	str	r2, [r4, #0]
 800714c:	2000      	movs	r0, #0
 800714e:	e7db      	b.n	8007108 <__ssputs_r+0x58>
 8007150:	462a      	mov	r2, r5
 8007152:	f000 fb6f 	bl	8007834 <_realloc_r>
 8007156:	4606      	mov	r6, r0
 8007158:	2800      	cmp	r0, #0
 800715a:	d1e1      	bne.n	8007120 <__ssputs_r+0x70>
 800715c:	6921      	ldr	r1, [r4, #16]
 800715e:	4650      	mov	r0, sl
 8007160:	f000 fabe 	bl	80076e0 <_free_r>
 8007164:	e7c7      	b.n	80070f6 <__ssputs_r+0x46>
	...

08007168 <_svfiprintf_r>:
 8007168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800716c:	4698      	mov	r8, r3
 800716e:	898b      	ldrh	r3, [r1, #12]
 8007170:	061b      	lsls	r3, r3, #24
 8007172:	b09d      	sub	sp, #116	; 0x74
 8007174:	4607      	mov	r7, r0
 8007176:	460d      	mov	r5, r1
 8007178:	4614      	mov	r4, r2
 800717a:	d50e      	bpl.n	800719a <_svfiprintf_r+0x32>
 800717c:	690b      	ldr	r3, [r1, #16]
 800717e:	b963      	cbnz	r3, 800719a <_svfiprintf_r+0x32>
 8007180:	2140      	movs	r1, #64	; 0x40
 8007182:	f000 fafd 	bl	8007780 <_malloc_r>
 8007186:	6028      	str	r0, [r5, #0]
 8007188:	6128      	str	r0, [r5, #16]
 800718a:	b920      	cbnz	r0, 8007196 <_svfiprintf_r+0x2e>
 800718c:	230c      	movs	r3, #12
 800718e:	603b      	str	r3, [r7, #0]
 8007190:	f04f 30ff 	mov.w	r0, #4294967295
 8007194:	e0d1      	b.n	800733a <_svfiprintf_r+0x1d2>
 8007196:	2340      	movs	r3, #64	; 0x40
 8007198:	616b      	str	r3, [r5, #20]
 800719a:	2300      	movs	r3, #0
 800719c:	9309      	str	r3, [sp, #36]	; 0x24
 800719e:	2320      	movs	r3, #32
 80071a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80071a8:	2330      	movs	r3, #48	; 0x30
 80071aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007354 <_svfiprintf_r+0x1ec>
 80071ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071b2:	f04f 0901 	mov.w	r9, #1
 80071b6:	4623      	mov	r3, r4
 80071b8:	469a      	mov	sl, r3
 80071ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071be:	b10a      	cbz	r2, 80071c4 <_svfiprintf_r+0x5c>
 80071c0:	2a25      	cmp	r2, #37	; 0x25
 80071c2:	d1f9      	bne.n	80071b8 <_svfiprintf_r+0x50>
 80071c4:	ebba 0b04 	subs.w	fp, sl, r4
 80071c8:	d00b      	beq.n	80071e2 <_svfiprintf_r+0x7a>
 80071ca:	465b      	mov	r3, fp
 80071cc:	4622      	mov	r2, r4
 80071ce:	4629      	mov	r1, r5
 80071d0:	4638      	mov	r0, r7
 80071d2:	f7ff ff6d 	bl	80070b0 <__ssputs_r>
 80071d6:	3001      	adds	r0, #1
 80071d8:	f000 80aa 	beq.w	8007330 <_svfiprintf_r+0x1c8>
 80071dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071de:	445a      	add	r2, fp
 80071e0:	9209      	str	r2, [sp, #36]	; 0x24
 80071e2:	f89a 3000 	ldrb.w	r3, [sl]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	f000 80a2 	beq.w	8007330 <_svfiprintf_r+0x1c8>
 80071ec:	2300      	movs	r3, #0
 80071ee:	f04f 32ff 	mov.w	r2, #4294967295
 80071f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071f6:	f10a 0a01 	add.w	sl, sl, #1
 80071fa:	9304      	str	r3, [sp, #16]
 80071fc:	9307      	str	r3, [sp, #28]
 80071fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007202:	931a      	str	r3, [sp, #104]	; 0x68
 8007204:	4654      	mov	r4, sl
 8007206:	2205      	movs	r2, #5
 8007208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800720c:	4851      	ldr	r0, [pc, #324]	; (8007354 <_svfiprintf_r+0x1ec>)
 800720e:	f7f9 f80f 	bl	8000230 <memchr>
 8007212:	9a04      	ldr	r2, [sp, #16]
 8007214:	b9d8      	cbnz	r0, 800724e <_svfiprintf_r+0xe6>
 8007216:	06d0      	lsls	r0, r2, #27
 8007218:	bf44      	itt	mi
 800721a:	2320      	movmi	r3, #32
 800721c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007220:	0711      	lsls	r1, r2, #28
 8007222:	bf44      	itt	mi
 8007224:	232b      	movmi	r3, #43	; 0x2b
 8007226:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800722a:	f89a 3000 	ldrb.w	r3, [sl]
 800722e:	2b2a      	cmp	r3, #42	; 0x2a
 8007230:	d015      	beq.n	800725e <_svfiprintf_r+0xf6>
 8007232:	9a07      	ldr	r2, [sp, #28]
 8007234:	4654      	mov	r4, sl
 8007236:	2000      	movs	r0, #0
 8007238:	f04f 0c0a 	mov.w	ip, #10
 800723c:	4621      	mov	r1, r4
 800723e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007242:	3b30      	subs	r3, #48	; 0x30
 8007244:	2b09      	cmp	r3, #9
 8007246:	d94e      	bls.n	80072e6 <_svfiprintf_r+0x17e>
 8007248:	b1b0      	cbz	r0, 8007278 <_svfiprintf_r+0x110>
 800724a:	9207      	str	r2, [sp, #28]
 800724c:	e014      	b.n	8007278 <_svfiprintf_r+0x110>
 800724e:	eba0 0308 	sub.w	r3, r0, r8
 8007252:	fa09 f303 	lsl.w	r3, r9, r3
 8007256:	4313      	orrs	r3, r2
 8007258:	9304      	str	r3, [sp, #16]
 800725a:	46a2      	mov	sl, r4
 800725c:	e7d2      	b.n	8007204 <_svfiprintf_r+0x9c>
 800725e:	9b03      	ldr	r3, [sp, #12]
 8007260:	1d19      	adds	r1, r3, #4
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	9103      	str	r1, [sp, #12]
 8007266:	2b00      	cmp	r3, #0
 8007268:	bfbb      	ittet	lt
 800726a:	425b      	neglt	r3, r3
 800726c:	f042 0202 	orrlt.w	r2, r2, #2
 8007270:	9307      	strge	r3, [sp, #28]
 8007272:	9307      	strlt	r3, [sp, #28]
 8007274:	bfb8      	it	lt
 8007276:	9204      	strlt	r2, [sp, #16]
 8007278:	7823      	ldrb	r3, [r4, #0]
 800727a:	2b2e      	cmp	r3, #46	; 0x2e
 800727c:	d10c      	bne.n	8007298 <_svfiprintf_r+0x130>
 800727e:	7863      	ldrb	r3, [r4, #1]
 8007280:	2b2a      	cmp	r3, #42	; 0x2a
 8007282:	d135      	bne.n	80072f0 <_svfiprintf_r+0x188>
 8007284:	9b03      	ldr	r3, [sp, #12]
 8007286:	1d1a      	adds	r2, r3, #4
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	9203      	str	r2, [sp, #12]
 800728c:	2b00      	cmp	r3, #0
 800728e:	bfb8      	it	lt
 8007290:	f04f 33ff 	movlt.w	r3, #4294967295
 8007294:	3402      	adds	r4, #2
 8007296:	9305      	str	r3, [sp, #20]
 8007298:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007364 <_svfiprintf_r+0x1fc>
 800729c:	7821      	ldrb	r1, [r4, #0]
 800729e:	2203      	movs	r2, #3
 80072a0:	4650      	mov	r0, sl
 80072a2:	f7f8 ffc5 	bl	8000230 <memchr>
 80072a6:	b140      	cbz	r0, 80072ba <_svfiprintf_r+0x152>
 80072a8:	2340      	movs	r3, #64	; 0x40
 80072aa:	eba0 000a 	sub.w	r0, r0, sl
 80072ae:	fa03 f000 	lsl.w	r0, r3, r0
 80072b2:	9b04      	ldr	r3, [sp, #16]
 80072b4:	4303      	orrs	r3, r0
 80072b6:	3401      	adds	r4, #1
 80072b8:	9304      	str	r3, [sp, #16]
 80072ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072be:	4826      	ldr	r0, [pc, #152]	; (8007358 <_svfiprintf_r+0x1f0>)
 80072c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072c4:	2206      	movs	r2, #6
 80072c6:	f7f8 ffb3 	bl	8000230 <memchr>
 80072ca:	2800      	cmp	r0, #0
 80072cc:	d038      	beq.n	8007340 <_svfiprintf_r+0x1d8>
 80072ce:	4b23      	ldr	r3, [pc, #140]	; (800735c <_svfiprintf_r+0x1f4>)
 80072d0:	bb1b      	cbnz	r3, 800731a <_svfiprintf_r+0x1b2>
 80072d2:	9b03      	ldr	r3, [sp, #12]
 80072d4:	3307      	adds	r3, #7
 80072d6:	f023 0307 	bic.w	r3, r3, #7
 80072da:	3308      	adds	r3, #8
 80072dc:	9303      	str	r3, [sp, #12]
 80072de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072e0:	4433      	add	r3, r6
 80072e2:	9309      	str	r3, [sp, #36]	; 0x24
 80072e4:	e767      	b.n	80071b6 <_svfiprintf_r+0x4e>
 80072e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80072ea:	460c      	mov	r4, r1
 80072ec:	2001      	movs	r0, #1
 80072ee:	e7a5      	b.n	800723c <_svfiprintf_r+0xd4>
 80072f0:	2300      	movs	r3, #0
 80072f2:	3401      	adds	r4, #1
 80072f4:	9305      	str	r3, [sp, #20]
 80072f6:	4619      	mov	r1, r3
 80072f8:	f04f 0c0a 	mov.w	ip, #10
 80072fc:	4620      	mov	r0, r4
 80072fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007302:	3a30      	subs	r2, #48	; 0x30
 8007304:	2a09      	cmp	r2, #9
 8007306:	d903      	bls.n	8007310 <_svfiprintf_r+0x1a8>
 8007308:	2b00      	cmp	r3, #0
 800730a:	d0c5      	beq.n	8007298 <_svfiprintf_r+0x130>
 800730c:	9105      	str	r1, [sp, #20]
 800730e:	e7c3      	b.n	8007298 <_svfiprintf_r+0x130>
 8007310:	fb0c 2101 	mla	r1, ip, r1, r2
 8007314:	4604      	mov	r4, r0
 8007316:	2301      	movs	r3, #1
 8007318:	e7f0      	b.n	80072fc <_svfiprintf_r+0x194>
 800731a:	ab03      	add	r3, sp, #12
 800731c:	9300      	str	r3, [sp, #0]
 800731e:	462a      	mov	r2, r5
 8007320:	4b0f      	ldr	r3, [pc, #60]	; (8007360 <_svfiprintf_r+0x1f8>)
 8007322:	a904      	add	r1, sp, #16
 8007324:	4638      	mov	r0, r7
 8007326:	f3af 8000 	nop.w
 800732a:	1c42      	adds	r2, r0, #1
 800732c:	4606      	mov	r6, r0
 800732e:	d1d6      	bne.n	80072de <_svfiprintf_r+0x176>
 8007330:	89ab      	ldrh	r3, [r5, #12]
 8007332:	065b      	lsls	r3, r3, #25
 8007334:	f53f af2c 	bmi.w	8007190 <_svfiprintf_r+0x28>
 8007338:	9809      	ldr	r0, [sp, #36]	; 0x24
 800733a:	b01d      	add	sp, #116	; 0x74
 800733c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007340:	ab03      	add	r3, sp, #12
 8007342:	9300      	str	r3, [sp, #0]
 8007344:	462a      	mov	r2, r5
 8007346:	4b06      	ldr	r3, [pc, #24]	; (8007360 <_svfiprintf_r+0x1f8>)
 8007348:	a904      	add	r1, sp, #16
 800734a:	4638      	mov	r0, r7
 800734c:	f000 f87a 	bl	8007444 <_printf_i>
 8007350:	e7eb      	b.n	800732a <_svfiprintf_r+0x1c2>
 8007352:	bf00      	nop
 8007354:	080079dc 	.word	0x080079dc
 8007358:	080079e6 	.word	0x080079e6
 800735c:	00000000 	.word	0x00000000
 8007360:	080070b1 	.word	0x080070b1
 8007364:	080079e2 	.word	0x080079e2

08007368 <_printf_common>:
 8007368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800736c:	4616      	mov	r6, r2
 800736e:	4699      	mov	r9, r3
 8007370:	688a      	ldr	r2, [r1, #8]
 8007372:	690b      	ldr	r3, [r1, #16]
 8007374:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007378:	4293      	cmp	r3, r2
 800737a:	bfb8      	it	lt
 800737c:	4613      	movlt	r3, r2
 800737e:	6033      	str	r3, [r6, #0]
 8007380:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007384:	4607      	mov	r7, r0
 8007386:	460c      	mov	r4, r1
 8007388:	b10a      	cbz	r2, 800738e <_printf_common+0x26>
 800738a:	3301      	adds	r3, #1
 800738c:	6033      	str	r3, [r6, #0]
 800738e:	6823      	ldr	r3, [r4, #0]
 8007390:	0699      	lsls	r1, r3, #26
 8007392:	bf42      	ittt	mi
 8007394:	6833      	ldrmi	r3, [r6, #0]
 8007396:	3302      	addmi	r3, #2
 8007398:	6033      	strmi	r3, [r6, #0]
 800739a:	6825      	ldr	r5, [r4, #0]
 800739c:	f015 0506 	ands.w	r5, r5, #6
 80073a0:	d106      	bne.n	80073b0 <_printf_common+0x48>
 80073a2:	f104 0a19 	add.w	sl, r4, #25
 80073a6:	68e3      	ldr	r3, [r4, #12]
 80073a8:	6832      	ldr	r2, [r6, #0]
 80073aa:	1a9b      	subs	r3, r3, r2
 80073ac:	42ab      	cmp	r3, r5
 80073ae:	dc26      	bgt.n	80073fe <_printf_common+0x96>
 80073b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80073b4:	1e13      	subs	r3, r2, #0
 80073b6:	6822      	ldr	r2, [r4, #0]
 80073b8:	bf18      	it	ne
 80073ba:	2301      	movne	r3, #1
 80073bc:	0692      	lsls	r2, r2, #26
 80073be:	d42b      	bmi.n	8007418 <_printf_common+0xb0>
 80073c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073c4:	4649      	mov	r1, r9
 80073c6:	4638      	mov	r0, r7
 80073c8:	47c0      	blx	r8
 80073ca:	3001      	adds	r0, #1
 80073cc:	d01e      	beq.n	800740c <_printf_common+0xa4>
 80073ce:	6823      	ldr	r3, [r4, #0]
 80073d0:	68e5      	ldr	r5, [r4, #12]
 80073d2:	6832      	ldr	r2, [r6, #0]
 80073d4:	f003 0306 	and.w	r3, r3, #6
 80073d8:	2b04      	cmp	r3, #4
 80073da:	bf08      	it	eq
 80073dc:	1aad      	subeq	r5, r5, r2
 80073de:	68a3      	ldr	r3, [r4, #8]
 80073e0:	6922      	ldr	r2, [r4, #16]
 80073e2:	bf0c      	ite	eq
 80073e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073e8:	2500      	movne	r5, #0
 80073ea:	4293      	cmp	r3, r2
 80073ec:	bfc4      	itt	gt
 80073ee:	1a9b      	subgt	r3, r3, r2
 80073f0:	18ed      	addgt	r5, r5, r3
 80073f2:	2600      	movs	r6, #0
 80073f4:	341a      	adds	r4, #26
 80073f6:	42b5      	cmp	r5, r6
 80073f8:	d11a      	bne.n	8007430 <_printf_common+0xc8>
 80073fa:	2000      	movs	r0, #0
 80073fc:	e008      	b.n	8007410 <_printf_common+0xa8>
 80073fe:	2301      	movs	r3, #1
 8007400:	4652      	mov	r2, sl
 8007402:	4649      	mov	r1, r9
 8007404:	4638      	mov	r0, r7
 8007406:	47c0      	blx	r8
 8007408:	3001      	adds	r0, #1
 800740a:	d103      	bne.n	8007414 <_printf_common+0xac>
 800740c:	f04f 30ff 	mov.w	r0, #4294967295
 8007410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007414:	3501      	adds	r5, #1
 8007416:	e7c6      	b.n	80073a6 <_printf_common+0x3e>
 8007418:	18e1      	adds	r1, r4, r3
 800741a:	1c5a      	adds	r2, r3, #1
 800741c:	2030      	movs	r0, #48	; 0x30
 800741e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007422:	4422      	add	r2, r4
 8007424:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007428:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800742c:	3302      	adds	r3, #2
 800742e:	e7c7      	b.n	80073c0 <_printf_common+0x58>
 8007430:	2301      	movs	r3, #1
 8007432:	4622      	mov	r2, r4
 8007434:	4649      	mov	r1, r9
 8007436:	4638      	mov	r0, r7
 8007438:	47c0      	blx	r8
 800743a:	3001      	adds	r0, #1
 800743c:	d0e6      	beq.n	800740c <_printf_common+0xa4>
 800743e:	3601      	adds	r6, #1
 8007440:	e7d9      	b.n	80073f6 <_printf_common+0x8e>
	...

08007444 <_printf_i>:
 8007444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007448:	460c      	mov	r4, r1
 800744a:	4691      	mov	r9, r2
 800744c:	7e27      	ldrb	r7, [r4, #24]
 800744e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007450:	2f78      	cmp	r7, #120	; 0x78
 8007452:	4680      	mov	r8, r0
 8007454:	469a      	mov	sl, r3
 8007456:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800745a:	d807      	bhi.n	800746c <_printf_i+0x28>
 800745c:	2f62      	cmp	r7, #98	; 0x62
 800745e:	d80a      	bhi.n	8007476 <_printf_i+0x32>
 8007460:	2f00      	cmp	r7, #0
 8007462:	f000 80d8 	beq.w	8007616 <_printf_i+0x1d2>
 8007466:	2f58      	cmp	r7, #88	; 0x58
 8007468:	f000 80a3 	beq.w	80075b2 <_printf_i+0x16e>
 800746c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007470:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007474:	e03a      	b.n	80074ec <_printf_i+0xa8>
 8007476:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800747a:	2b15      	cmp	r3, #21
 800747c:	d8f6      	bhi.n	800746c <_printf_i+0x28>
 800747e:	a001      	add	r0, pc, #4	; (adr r0, 8007484 <_printf_i+0x40>)
 8007480:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007484:	080074dd 	.word	0x080074dd
 8007488:	080074f1 	.word	0x080074f1
 800748c:	0800746d 	.word	0x0800746d
 8007490:	0800746d 	.word	0x0800746d
 8007494:	0800746d 	.word	0x0800746d
 8007498:	0800746d 	.word	0x0800746d
 800749c:	080074f1 	.word	0x080074f1
 80074a0:	0800746d 	.word	0x0800746d
 80074a4:	0800746d 	.word	0x0800746d
 80074a8:	0800746d 	.word	0x0800746d
 80074ac:	0800746d 	.word	0x0800746d
 80074b0:	080075fd 	.word	0x080075fd
 80074b4:	08007521 	.word	0x08007521
 80074b8:	080075df 	.word	0x080075df
 80074bc:	0800746d 	.word	0x0800746d
 80074c0:	0800746d 	.word	0x0800746d
 80074c4:	0800761f 	.word	0x0800761f
 80074c8:	0800746d 	.word	0x0800746d
 80074cc:	08007521 	.word	0x08007521
 80074d0:	0800746d 	.word	0x0800746d
 80074d4:	0800746d 	.word	0x0800746d
 80074d8:	080075e7 	.word	0x080075e7
 80074dc:	680b      	ldr	r3, [r1, #0]
 80074de:	1d1a      	adds	r2, r3, #4
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	600a      	str	r2, [r1, #0]
 80074e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80074e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074ec:	2301      	movs	r3, #1
 80074ee:	e0a3      	b.n	8007638 <_printf_i+0x1f4>
 80074f0:	6825      	ldr	r5, [r4, #0]
 80074f2:	6808      	ldr	r0, [r1, #0]
 80074f4:	062e      	lsls	r6, r5, #24
 80074f6:	f100 0304 	add.w	r3, r0, #4
 80074fa:	d50a      	bpl.n	8007512 <_printf_i+0xce>
 80074fc:	6805      	ldr	r5, [r0, #0]
 80074fe:	600b      	str	r3, [r1, #0]
 8007500:	2d00      	cmp	r5, #0
 8007502:	da03      	bge.n	800750c <_printf_i+0xc8>
 8007504:	232d      	movs	r3, #45	; 0x2d
 8007506:	426d      	negs	r5, r5
 8007508:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800750c:	485e      	ldr	r0, [pc, #376]	; (8007688 <_printf_i+0x244>)
 800750e:	230a      	movs	r3, #10
 8007510:	e019      	b.n	8007546 <_printf_i+0x102>
 8007512:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007516:	6805      	ldr	r5, [r0, #0]
 8007518:	600b      	str	r3, [r1, #0]
 800751a:	bf18      	it	ne
 800751c:	b22d      	sxthne	r5, r5
 800751e:	e7ef      	b.n	8007500 <_printf_i+0xbc>
 8007520:	680b      	ldr	r3, [r1, #0]
 8007522:	6825      	ldr	r5, [r4, #0]
 8007524:	1d18      	adds	r0, r3, #4
 8007526:	6008      	str	r0, [r1, #0]
 8007528:	0628      	lsls	r0, r5, #24
 800752a:	d501      	bpl.n	8007530 <_printf_i+0xec>
 800752c:	681d      	ldr	r5, [r3, #0]
 800752e:	e002      	b.n	8007536 <_printf_i+0xf2>
 8007530:	0669      	lsls	r1, r5, #25
 8007532:	d5fb      	bpl.n	800752c <_printf_i+0xe8>
 8007534:	881d      	ldrh	r5, [r3, #0]
 8007536:	4854      	ldr	r0, [pc, #336]	; (8007688 <_printf_i+0x244>)
 8007538:	2f6f      	cmp	r7, #111	; 0x6f
 800753a:	bf0c      	ite	eq
 800753c:	2308      	moveq	r3, #8
 800753e:	230a      	movne	r3, #10
 8007540:	2100      	movs	r1, #0
 8007542:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007546:	6866      	ldr	r6, [r4, #4]
 8007548:	60a6      	str	r6, [r4, #8]
 800754a:	2e00      	cmp	r6, #0
 800754c:	bfa2      	ittt	ge
 800754e:	6821      	ldrge	r1, [r4, #0]
 8007550:	f021 0104 	bicge.w	r1, r1, #4
 8007554:	6021      	strge	r1, [r4, #0]
 8007556:	b90d      	cbnz	r5, 800755c <_printf_i+0x118>
 8007558:	2e00      	cmp	r6, #0
 800755a:	d04d      	beq.n	80075f8 <_printf_i+0x1b4>
 800755c:	4616      	mov	r6, r2
 800755e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007562:	fb03 5711 	mls	r7, r3, r1, r5
 8007566:	5dc7      	ldrb	r7, [r0, r7]
 8007568:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800756c:	462f      	mov	r7, r5
 800756e:	42bb      	cmp	r3, r7
 8007570:	460d      	mov	r5, r1
 8007572:	d9f4      	bls.n	800755e <_printf_i+0x11a>
 8007574:	2b08      	cmp	r3, #8
 8007576:	d10b      	bne.n	8007590 <_printf_i+0x14c>
 8007578:	6823      	ldr	r3, [r4, #0]
 800757a:	07df      	lsls	r7, r3, #31
 800757c:	d508      	bpl.n	8007590 <_printf_i+0x14c>
 800757e:	6923      	ldr	r3, [r4, #16]
 8007580:	6861      	ldr	r1, [r4, #4]
 8007582:	4299      	cmp	r1, r3
 8007584:	bfde      	ittt	le
 8007586:	2330      	movle	r3, #48	; 0x30
 8007588:	f806 3c01 	strble.w	r3, [r6, #-1]
 800758c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007590:	1b92      	subs	r2, r2, r6
 8007592:	6122      	str	r2, [r4, #16]
 8007594:	f8cd a000 	str.w	sl, [sp]
 8007598:	464b      	mov	r3, r9
 800759a:	aa03      	add	r2, sp, #12
 800759c:	4621      	mov	r1, r4
 800759e:	4640      	mov	r0, r8
 80075a0:	f7ff fee2 	bl	8007368 <_printf_common>
 80075a4:	3001      	adds	r0, #1
 80075a6:	d14c      	bne.n	8007642 <_printf_i+0x1fe>
 80075a8:	f04f 30ff 	mov.w	r0, #4294967295
 80075ac:	b004      	add	sp, #16
 80075ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075b2:	4835      	ldr	r0, [pc, #212]	; (8007688 <_printf_i+0x244>)
 80075b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80075b8:	6823      	ldr	r3, [r4, #0]
 80075ba:	680e      	ldr	r6, [r1, #0]
 80075bc:	061f      	lsls	r7, r3, #24
 80075be:	f856 5b04 	ldr.w	r5, [r6], #4
 80075c2:	600e      	str	r6, [r1, #0]
 80075c4:	d514      	bpl.n	80075f0 <_printf_i+0x1ac>
 80075c6:	07d9      	lsls	r1, r3, #31
 80075c8:	bf44      	itt	mi
 80075ca:	f043 0320 	orrmi.w	r3, r3, #32
 80075ce:	6023      	strmi	r3, [r4, #0]
 80075d0:	b91d      	cbnz	r5, 80075da <_printf_i+0x196>
 80075d2:	6823      	ldr	r3, [r4, #0]
 80075d4:	f023 0320 	bic.w	r3, r3, #32
 80075d8:	6023      	str	r3, [r4, #0]
 80075da:	2310      	movs	r3, #16
 80075dc:	e7b0      	b.n	8007540 <_printf_i+0xfc>
 80075de:	6823      	ldr	r3, [r4, #0]
 80075e0:	f043 0320 	orr.w	r3, r3, #32
 80075e4:	6023      	str	r3, [r4, #0]
 80075e6:	2378      	movs	r3, #120	; 0x78
 80075e8:	4828      	ldr	r0, [pc, #160]	; (800768c <_printf_i+0x248>)
 80075ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075ee:	e7e3      	b.n	80075b8 <_printf_i+0x174>
 80075f0:	065e      	lsls	r6, r3, #25
 80075f2:	bf48      	it	mi
 80075f4:	b2ad      	uxthmi	r5, r5
 80075f6:	e7e6      	b.n	80075c6 <_printf_i+0x182>
 80075f8:	4616      	mov	r6, r2
 80075fa:	e7bb      	b.n	8007574 <_printf_i+0x130>
 80075fc:	680b      	ldr	r3, [r1, #0]
 80075fe:	6826      	ldr	r6, [r4, #0]
 8007600:	6960      	ldr	r0, [r4, #20]
 8007602:	1d1d      	adds	r5, r3, #4
 8007604:	600d      	str	r5, [r1, #0]
 8007606:	0635      	lsls	r5, r6, #24
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	d501      	bpl.n	8007610 <_printf_i+0x1cc>
 800760c:	6018      	str	r0, [r3, #0]
 800760e:	e002      	b.n	8007616 <_printf_i+0x1d2>
 8007610:	0671      	lsls	r1, r6, #25
 8007612:	d5fb      	bpl.n	800760c <_printf_i+0x1c8>
 8007614:	8018      	strh	r0, [r3, #0]
 8007616:	2300      	movs	r3, #0
 8007618:	6123      	str	r3, [r4, #16]
 800761a:	4616      	mov	r6, r2
 800761c:	e7ba      	b.n	8007594 <_printf_i+0x150>
 800761e:	680b      	ldr	r3, [r1, #0]
 8007620:	1d1a      	adds	r2, r3, #4
 8007622:	600a      	str	r2, [r1, #0]
 8007624:	681e      	ldr	r6, [r3, #0]
 8007626:	6862      	ldr	r2, [r4, #4]
 8007628:	2100      	movs	r1, #0
 800762a:	4630      	mov	r0, r6
 800762c:	f7f8 fe00 	bl	8000230 <memchr>
 8007630:	b108      	cbz	r0, 8007636 <_printf_i+0x1f2>
 8007632:	1b80      	subs	r0, r0, r6
 8007634:	6060      	str	r0, [r4, #4]
 8007636:	6863      	ldr	r3, [r4, #4]
 8007638:	6123      	str	r3, [r4, #16]
 800763a:	2300      	movs	r3, #0
 800763c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007640:	e7a8      	b.n	8007594 <_printf_i+0x150>
 8007642:	6923      	ldr	r3, [r4, #16]
 8007644:	4632      	mov	r2, r6
 8007646:	4649      	mov	r1, r9
 8007648:	4640      	mov	r0, r8
 800764a:	47d0      	blx	sl
 800764c:	3001      	adds	r0, #1
 800764e:	d0ab      	beq.n	80075a8 <_printf_i+0x164>
 8007650:	6823      	ldr	r3, [r4, #0]
 8007652:	079b      	lsls	r3, r3, #30
 8007654:	d413      	bmi.n	800767e <_printf_i+0x23a>
 8007656:	68e0      	ldr	r0, [r4, #12]
 8007658:	9b03      	ldr	r3, [sp, #12]
 800765a:	4298      	cmp	r0, r3
 800765c:	bfb8      	it	lt
 800765e:	4618      	movlt	r0, r3
 8007660:	e7a4      	b.n	80075ac <_printf_i+0x168>
 8007662:	2301      	movs	r3, #1
 8007664:	4632      	mov	r2, r6
 8007666:	4649      	mov	r1, r9
 8007668:	4640      	mov	r0, r8
 800766a:	47d0      	blx	sl
 800766c:	3001      	adds	r0, #1
 800766e:	d09b      	beq.n	80075a8 <_printf_i+0x164>
 8007670:	3501      	adds	r5, #1
 8007672:	68e3      	ldr	r3, [r4, #12]
 8007674:	9903      	ldr	r1, [sp, #12]
 8007676:	1a5b      	subs	r3, r3, r1
 8007678:	42ab      	cmp	r3, r5
 800767a:	dcf2      	bgt.n	8007662 <_printf_i+0x21e>
 800767c:	e7eb      	b.n	8007656 <_printf_i+0x212>
 800767e:	2500      	movs	r5, #0
 8007680:	f104 0619 	add.w	r6, r4, #25
 8007684:	e7f5      	b.n	8007672 <_printf_i+0x22e>
 8007686:	bf00      	nop
 8007688:	080079ed 	.word	0x080079ed
 800768c:	080079fe 	.word	0x080079fe

08007690 <memcpy>:
 8007690:	440a      	add	r2, r1
 8007692:	4291      	cmp	r1, r2
 8007694:	f100 33ff 	add.w	r3, r0, #4294967295
 8007698:	d100      	bne.n	800769c <memcpy+0xc>
 800769a:	4770      	bx	lr
 800769c:	b510      	push	{r4, lr}
 800769e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076a6:	4291      	cmp	r1, r2
 80076a8:	d1f9      	bne.n	800769e <memcpy+0xe>
 80076aa:	bd10      	pop	{r4, pc}

080076ac <memmove>:
 80076ac:	4288      	cmp	r0, r1
 80076ae:	b510      	push	{r4, lr}
 80076b0:	eb01 0402 	add.w	r4, r1, r2
 80076b4:	d902      	bls.n	80076bc <memmove+0x10>
 80076b6:	4284      	cmp	r4, r0
 80076b8:	4623      	mov	r3, r4
 80076ba:	d807      	bhi.n	80076cc <memmove+0x20>
 80076bc:	1e43      	subs	r3, r0, #1
 80076be:	42a1      	cmp	r1, r4
 80076c0:	d008      	beq.n	80076d4 <memmove+0x28>
 80076c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076ca:	e7f8      	b.n	80076be <memmove+0x12>
 80076cc:	4402      	add	r2, r0
 80076ce:	4601      	mov	r1, r0
 80076d0:	428a      	cmp	r2, r1
 80076d2:	d100      	bne.n	80076d6 <memmove+0x2a>
 80076d4:	bd10      	pop	{r4, pc}
 80076d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076de:	e7f7      	b.n	80076d0 <memmove+0x24>

080076e0 <_free_r>:
 80076e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076e2:	2900      	cmp	r1, #0
 80076e4:	d048      	beq.n	8007778 <_free_r+0x98>
 80076e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076ea:	9001      	str	r0, [sp, #4]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f1a1 0404 	sub.w	r4, r1, #4
 80076f2:	bfb8      	it	lt
 80076f4:	18e4      	addlt	r4, r4, r3
 80076f6:	f000 f8d3 	bl	80078a0 <__malloc_lock>
 80076fa:	4a20      	ldr	r2, [pc, #128]	; (800777c <_free_r+0x9c>)
 80076fc:	9801      	ldr	r0, [sp, #4]
 80076fe:	6813      	ldr	r3, [r2, #0]
 8007700:	4615      	mov	r5, r2
 8007702:	b933      	cbnz	r3, 8007712 <_free_r+0x32>
 8007704:	6063      	str	r3, [r4, #4]
 8007706:	6014      	str	r4, [r2, #0]
 8007708:	b003      	add	sp, #12
 800770a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800770e:	f000 b8cd 	b.w	80078ac <__malloc_unlock>
 8007712:	42a3      	cmp	r3, r4
 8007714:	d90b      	bls.n	800772e <_free_r+0x4e>
 8007716:	6821      	ldr	r1, [r4, #0]
 8007718:	1862      	adds	r2, r4, r1
 800771a:	4293      	cmp	r3, r2
 800771c:	bf04      	itt	eq
 800771e:	681a      	ldreq	r2, [r3, #0]
 8007720:	685b      	ldreq	r3, [r3, #4]
 8007722:	6063      	str	r3, [r4, #4]
 8007724:	bf04      	itt	eq
 8007726:	1852      	addeq	r2, r2, r1
 8007728:	6022      	streq	r2, [r4, #0]
 800772a:	602c      	str	r4, [r5, #0]
 800772c:	e7ec      	b.n	8007708 <_free_r+0x28>
 800772e:	461a      	mov	r2, r3
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	b10b      	cbz	r3, 8007738 <_free_r+0x58>
 8007734:	42a3      	cmp	r3, r4
 8007736:	d9fa      	bls.n	800772e <_free_r+0x4e>
 8007738:	6811      	ldr	r1, [r2, #0]
 800773a:	1855      	adds	r5, r2, r1
 800773c:	42a5      	cmp	r5, r4
 800773e:	d10b      	bne.n	8007758 <_free_r+0x78>
 8007740:	6824      	ldr	r4, [r4, #0]
 8007742:	4421      	add	r1, r4
 8007744:	1854      	adds	r4, r2, r1
 8007746:	42a3      	cmp	r3, r4
 8007748:	6011      	str	r1, [r2, #0]
 800774a:	d1dd      	bne.n	8007708 <_free_r+0x28>
 800774c:	681c      	ldr	r4, [r3, #0]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	6053      	str	r3, [r2, #4]
 8007752:	4421      	add	r1, r4
 8007754:	6011      	str	r1, [r2, #0]
 8007756:	e7d7      	b.n	8007708 <_free_r+0x28>
 8007758:	d902      	bls.n	8007760 <_free_r+0x80>
 800775a:	230c      	movs	r3, #12
 800775c:	6003      	str	r3, [r0, #0]
 800775e:	e7d3      	b.n	8007708 <_free_r+0x28>
 8007760:	6825      	ldr	r5, [r4, #0]
 8007762:	1961      	adds	r1, r4, r5
 8007764:	428b      	cmp	r3, r1
 8007766:	bf04      	itt	eq
 8007768:	6819      	ldreq	r1, [r3, #0]
 800776a:	685b      	ldreq	r3, [r3, #4]
 800776c:	6063      	str	r3, [r4, #4]
 800776e:	bf04      	itt	eq
 8007770:	1949      	addeq	r1, r1, r5
 8007772:	6021      	streq	r1, [r4, #0]
 8007774:	6054      	str	r4, [r2, #4]
 8007776:	e7c7      	b.n	8007708 <_free_r+0x28>
 8007778:	b003      	add	sp, #12
 800777a:	bd30      	pop	{r4, r5, pc}
 800777c:	2000019c 	.word	0x2000019c

08007780 <_malloc_r>:
 8007780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007782:	1ccd      	adds	r5, r1, #3
 8007784:	f025 0503 	bic.w	r5, r5, #3
 8007788:	3508      	adds	r5, #8
 800778a:	2d0c      	cmp	r5, #12
 800778c:	bf38      	it	cc
 800778e:	250c      	movcc	r5, #12
 8007790:	2d00      	cmp	r5, #0
 8007792:	4606      	mov	r6, r0
 8007794:	db01      	blt.n	800779a <_malloc_r+0x1a>
 8007796:	42a9      	cmp	r1, r5
 8007798:	d903      	bls.n	80077a2 <_malloc_r+0x22>
 800779a:	230c      	movs	r3, #12
 800779c:	6033      	str	r3, [r6, #0]
 800779e:	2000      	movs	r0, #0
 80077a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077a2:	f000 f87d 	bl	80078a0 <__malloc_lock>
 80077a6:	4921      	ldr	r1, [pc, #132]	; (800782c <_malloc_r+0xac>)
 80077a8:	680a      	ldr	r2, [r1, #0]
 80077aa:	4614      	mov	r4, r2
 80077ac:	b99c      	cbnz	r4, 80077d6 <_malloc_r+0x56>
 80077ae:	4f20      	ldr	r7, [pc, #128]	; (8007830 <_malloc_r+0xb0>)
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	b923      	cbnz	r3, 80077be <_malloc_r+0x3e>
 80077b4:	4621      	mov	r1, r4
 80077b6:	4630      	mov	r0, r6
 80077b8:	f000 f862 	bl	8007880 <_sbrk_r>
 80077bc:	6038      	str	r0, [r7, #0]
 80077be:	4629      	mov	r1, r5
 80077c0:	4630      	mov	r0, r6
 80077c2:	f000 f85d 	bl	8007880 <_sbrk_r>
 80077c6:	1c43      	adds	r3, r0, #1
 80077c8:	d123      	bne.n	8007812 <_malloc_r+0x92>
 80077ca:	230c      	movs	r3, #12
 80077cc:	6033      	str	r3, [r6, #0]
 80077ce:	4630      	mov	r0, r6
 80077d0:	f000 f86c 	bl	80078ac <__malloc_unlock>
 80077d4:	e7e3      	b.n	800779e <_malloc_r+0x1e>
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	1b5b      	subs	r3, r3, r5
 80077da:	d417      	bmi.n	800780c <_malloc_r+0x8c>
 80077dc:	2b0b      	cmp	r3, #11
 80077de:	d903      	bls.n	80077e8 <_malloc_r+0x68>
 80077e0:	6023      	str	r3, [r4, #0]
 80077e2:	441c      	add	r4, r3
 80077e4:	6025      	str	r5, [r4, #0]
 80077e6:	e004      	b.n	80077f2 <_malloc_r+0x72>
 80077e8:	6863      	ldr	r3, [r4, #4]
 80077ea:	42a2      	cmp	r2, r4
 80077ec:	bf0c      	ite	eq
 80077ee:	600b      	streq	r3, [r1, #0]
 80077f0:	6053      	strne	r3, [r2, #4]
 80077f2:	4630      	mov	r0, r6
 80077f4:	f000 f85a 	bl	80078ac <__malloc_unlock>
 80077f8:	f104 000b 	add.w	r0, r4, #11
 80077fc:	1d23      	adds	r3, r4, #4
 80077fe:	f020 0007 	bic.w	r0, r0, #7
 8007802:	1ac2      	subs	r2, r0, r3
 8007804:	d0cc      	beq.n	80077a0 <_malloc_r+0x20>
 8007806:	1a1b      	subs	r3, r3, r0
 8007808:	50a3      	str	r3, [r4, r2]
 800780a:	e7c9      	b.n	80077a0 <_malloc_r+0x20>
 800780c:	4622      	mov	r2, r4
 800780e:	6864      	ldr	r4, [r4, #4]
 8007810:	e7cc      	b.n	80077ac <_malloc_r+0x2c>
 8007812:	1cc4      	adds	r4, r0, #3
 8007814:	f024 0403 	bic.w	r4, r4, #3
 8007818:	42a0      	cmp	r0, r4
 800781a:	d0e3      	beq.n	80077e4 <_malloc_r+0x64>
 800781c:	1a21      	subs	r1, r4, r0
 800781e:	4630      	mov	r0, r6
 8007820:	f000 f82e 	bl	8007880 <_sbrk_r>
 8007824:	3001      	adds	r0, #1
 8007826:	d1dd      	bne.n	80077e4 <_malloc_r+0x64>
 8007828:	e7cf      	b.n	80077ca <_malloc_r+0x4a>
 800782a:	bf00      	nop
 800782c:	2000019c 	.word	0x2000019c
 8007830:	200001a0 	.word	0x200001a0

08007834 <_realloc_r>:
 8007834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007836:	4607      	mov	r7, r0
 8007838:	4614      	mov	r4, r2
 800783a:	460e      	mov	r6, r1
 800783c:	b921      	cbnz	r1, 8007848 <_realloc_r+0x14>
 800783e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007842:	4611      	mov	r1, r2
 8007844:	f7ff bf9c 	b.w	8007780 <_malloc_r>
 8007848:	b922      	cbnz	r2, 8007854 <_realloc_r+0x20>
 800784a:	f7ff ff49 	bl	80076e0 <_free_r>
 800784e:	4625      	mov	r5, r4
 8007850:	4628      	mov	r0, r5
 8007852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007854:	f000 f830 	bl	80078b8 <_malloc_usable_size_r>
 8007858:	42a0      	cmp	r0, r4
 800785a:	d20f      	bcs.n	800787c <_realloc_r+0x48>
 800785c:	4621      	mov	r1, r4
 800785e:	4638      	mov	r0, r7
 8007860:	f7ff ff8e 	bl	8007780 <_malloc_r>
 8007864:	4605      	mov	r5, r0
 8007866:	2800      	cmp	r0, #0
 8007868:	d0f2      	beq.n	8007850 <_realloc_r+0x1c>
 800786a:	4631      	mov	r1, r6
 800786c:	4622      	mov	r2, r4
 800786e:	f7ff ff0f 	bl	8007690 <memcpy>
 8007872:	4631      	mov	r1, r6
 8007874:	4638      	mov	r0, r7
 8007876:	f7ff ff33 	bl	80076e0 <_free_r>
 800787a:	e7e9      	b.n	8007850 <_realloc_r+0x1c>
 800787c:	4635      	mov	r5, r6
 800787e:	e7e7      	b.n	8007850 <_realloc_r+0x1c>

08007880 <_sbrk_r>:
 8007880:	b538      	push	{r3, r4, r5, lr}
 8007882:	4d06      	ldr	r5, [pc, #24]	; (800789c <_sbrk_r+0x1c>)
 8007884:	2300      	movs	r3, #0
 8007886:	4604      	mov	r4, r0
 8007888:	4608      	mov	r0, r1
 800788a:	602b      	str	r3, [r5, #0]
 800788c:	f7fa fba2 	bl	8001fd4 <_sbrk>
 8007890:	1c43      	adds	r3, r0, #1
 8007892:	d102      	bne.n	800789a <_sbrk_r+0x1a>
 8007894:	682b      	ldr	r3, [r5, #0]
 8007896:	b103      	cbz	r3, 800789a <_sbrk_r+0x1a>
 8007898:	6023      	str	r3, [r4, #0]
 800789a:	bd38      	pop	{r3, r4, r5, pc}
 800789c:	20000384 	.word	0x20000384

080078a0 <__malloc_lock>:
 80078a0:	4801      	ldr	r0, [pc, #4]	; (80078a8 <__malloc_lock+0x8>)
 80078a2:	f000 b811 	b.w	80078c8 <__retarget_lock_acquire_recursive>
 80078a6:	bf00      	nop
 80078a8:	2000038c 	.word	0x2000038c

080078ac <__malloc_unlock>:
 80078ac:	4801      	ldr	r0, [pc, #4]	; (80078b4 <__malloc_unlock+0x8>)
 80078ae:	f000 b80c 	b.w	80078ca <__retarget_lock_release_recursive>
 80078b2:	bf00      	nop
 80078b4:	2000038c 	.word	0x2000038c

080078b8 <_malloc_usable_size_r>:
 80078b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078bc:	1f18      	subs	r0, r3, #4
 80078be:	2b00      	cmp	r3, #0
 80078c0:	bfbc      	itt	lt
 80078c2:	580b      	ldrlt	r3, [r1, r0]
 80078c4:	18c0      	addlt	r0, r0, r3
 80078c6:	4770      	bx	lr

080078c8 <__retarget_lock_acquire_recursive>:
 80078c8:	4770      	bx	lr

080078ca <__retarget_lock_release_recursive>:
 80078ca:	4770      	bx	lr

080078cc <_init>:
 80078cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ce:	bf00      	nop
 80078d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078d2:	bc08      	pop	{r3}
 80078d4:	469e      	mov	lr, r3
 80078d6:	4770      	bx	lr

080078d8 <_fini>:
 80078d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078da:	bf00      	nop
 80078dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078de:	bc08      	pop	{r3}
 80078e0:	469e      	mov	lr, r3
 80078e2:	4770      	bx	lr
